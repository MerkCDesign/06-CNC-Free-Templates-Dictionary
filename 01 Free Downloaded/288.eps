%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: shutterstock_12722383 [Converted] копия.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: www.PHILka.RU
%%CreationDate: 7/28/2009
%%BoundingBox: 0 0 1169 832
%%HiResBoundingBox: 0 0 1168.2071 831.0411
%%CropBox: 0 0 1168.2071 831.0411
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x198 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2009-07-28T00:06:33+06:00</xap:CreateDate>
         <xap:ModifyDate>2009-07-28T00:06:33+06:00</xap:ModifyDate>
         <xap:MetadataDate>2009-07-28T00:06:33+06:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUu13zHoOgWf1zW&#xA;r+DT7Y8gslxIsYYojSFU5Ecm4ITQb4q8I0L/AJy2h1Pztb6Q2hcNEvrtLS1vBNSdVkf00lkQrw3J&#xA;BKhvhHc4aV9EYFdir4n/ADl/PnXfOuoxW+letpXl62PO2g5cZLhqketMV7dglSB7nCl6r+Qv55+b&#xA;NdudL0HzNaC6gvnuLOw8wIQrtcWkAuGiuU6FjEfhcUr4MeRCh9B4FeefmF+c2heQvMVlp+vQyLp9&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:D54F67C7D77ADE118B5BE88AF2B37359</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D64F67C7D77ADE118B5BE88AF2B37359</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -831.041 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 831.041 li
1168.21 831.041 li
1168.21 0 li
cp
clp
[1 0 0 1 0 0 ] concat
1098.41 79.8091 mo
1100.13 80.2778 1102.78 79.5903 1105.3 78.6187 cv
1105.57 79.1089 1105.91 79.6167 1106.38 80.1792 cv
1107 80.9126 1107.44 81.6274 1107.79 82.3491 cv
1104.55 84.4731 1100.24 85.7769 1096.33 85.7007 cv
1095.93 82.6763 1095.96 79.1392 1098.41 79.8091 cv
cp
1163.64 97.6069 mo
1163.69 96.519 1165.14 94.4468 1164.63 93.4517 cv
1163.81 91.8608 1160.43 93.2173 1158.96 92.5347 cv
1155.05 90.729 1152.17 85.356 1151.51 81.3228 cv
1151.18 79.3745 1152.77 77.0903 1150.46 76.5786 cv
1148.78 76.2075 1148.32 77.3872 1147.15 78.1206 cv
1146.91 78.27 1146.66 78.3989 1146.4 78.5142 cv
1146.29 78.1226 1146.17 77.7319 1146.05 77.3433 cv
1145.03 74.1714 1143.83 70.6509 1142.02 67.8384 cv
1141.49 67.0054 1140.76 66.3892 1140.36 65.3892 cv
1139.85 64.1206 1139.96 62.6802 1139.37 61.4478 cv
1138.16 58.9404 1135.07 58.7471 1133.96 56.4224 cv
1132.47 53.335 1132.57 49.0659 1129.31 47.1099 cv
1128.03 46.3408 1126.33 46.5093 1125.13 45.6616 cv
1123.96 44.8398 1123.48 43.3184 1122.71 42.1841 cv
1120.86 39.5034 1117.75 37.5757 1115.06 35.8301 cv
1114.4 35.3989 1113.71 34.9194 1113 34.4941 cv
1110.47 30.9043 1105.84 29.2524 1101.34 29.6084 cv
1101.18 27.0962 1100.79 24.687 1099.93 22.1255 cv
1098.72 18.5488 1098.94 20.1689 1101.44 17.7529 cv
1102.89 16.3418 1103.15 14.0352 1101.61 12.6108 cv
1099.56 10.707 1095.39 11.2744 1093.08 12.2197 cv
1090.45 13.2949 1087.13 15.8003 1089.89 18.5112 cv
1091.05 19.6538 1093.03 19.6772 1094.1 20.7632 cv
1095.3 21.9941 1095.77 24.8286 1096.32 26.4292 cv
1096.8 27.8184 1097.13 29.1465 1097.34 30.4932 cv
1094.74 31.4722 1092.45 33.2246 1091 35.7705 cv
1089.7 34.0059 1088.27 32.4067 1087.23 31.3647 cv
1086.2 30.333 1082.04 28.5459 1081.95 27.2227 cv
1081.86 25.8999 1084.08 24.7476 1084.33 23.4897 cv
1084.56 22.3481 1083.94 21.0366 1083.23 20.2041 cv
1080.78 17.3286 1076.44 18.0049 1074.14 20.5405 cv
1071.9 23.0107 1072.41 25.3818 1075.03 27.2515 cv
1076.63 28.3994 1078.39 28.1509 1079.96 28.9893 cv
1081.87 30.0054 1083.53 32.8262 1084.94 34.415 cv
1086.42 36.0767 1087.35 37.6182 1088.31 39.625 cv
1088.36 39.7178 1088.4 39.814 1088.44 39.9111 cv
1085.11 44.4639 1088.19 57.8784 1081.56 59.7373 cv
1079.24 60.3911 1075.76 56.1597 1075.45 60.3022 cv
1075.16 64.0962 1076.66 65.6909 1080.13 65.9399 cv
1076.18 69.0142 1082.33 72.9614 1085.7 71.8052 cv
1088.38 70.8823 1088.28 69.1616 1088.31 66.9351 cv
1088.35 64.9067 1089.7 63.0688 1091.39 61.7739 cv
1093.57 60.1104 1096.45 59.7383 1099.27 59.1895 cv
1100.85 61.0073 1101.38 63.4917 1101.07 66.0962 cv
1100.9 67.4751 1098.88 70.2378 1099.59 71.4634 cv
1100.07 72.2896 1100.91 72.4849 1101.73 72.769 cv
1096.31 73.9907 1090.25 73.1665 1090.25 73.1665 cv
1090.25 75.0063 1089.76 79.7603 1089.37 83.2241 cv
1088.96 82.7856 1088.59 82.2964 1088.13 81.7583 cv
1086.83 80.23 1085.19 79.1616 1083.67 77.8745 cv
1080.59 75.2583 1077.41 73.0552 1073.59 71.644 cv
1066.68 69.0874 1057.61 70.9487 1052.53 76.394 cv
1048.02 81.2183 1047.1 87.1001 1040.41 89.6978 cv
1044.67 88.9282 1048.69 89.2847 1052.85 87.7798 cv
1058.42 85.7661 1064.44 83.5347 1070.48 84.5454 cv
1073.07 84.978 1075.06 85.7124 1075.5 88.5024 cv
1075.92 91.2075 1074.49 94.0679 1072.38 95.6851 cv
1070.55 94.605 1068.39 94.5161 1066.34 94.144 cv
1062.34 93.4155 1058.47 93.1265 1054.39 92.9468 cv
1049.08 92.7134 1045.45 94.7124 1040.82 96.8892 cv
1047.11 97.6284 1052.61 102.105 1058.51 104.292 cv
1063.4 106.107 1068.06 108.543 1073.38 108.851 cv
1076.55 109.035 1080.06 108.518 1082.85 106.916 cv
1084.06 106.223 1084.99 105.48 1085.94 104.896 cv
1091.2 137.315 li
1092.91 137.315 li
1092.91 137.315 1090.29 115.019 1092.02 103.899 cv
1094.56 103.774 1096.54 102.922 1098.89 101.605 cv
1097.68 108.538 1095.5 124.78 1098.98 137.695 cv
1100.69 137.695 li
1100.69 137.695 1100.52 108.476 1106.98 96.3208 cv
1107.68 95.8101 1108.37 95.2935 1109.06 94.772 cv
1109.16 105.899 1109.71 131.134 1112.65 135.986 cv
1114.36 134.279 li
1114.36 134.279 1113.33 104.235 1116.06 99.1675 cv
1116.06 99.1675 1112.27 99.1685 1114.17 94.8022 cv
1114.54 93.939 1115.02 93.0903 1115.54 92.2837 cv
1115.72 92.3774 1115.91 92.4731 1116.1 92.5728 cv
1118.08 93.6255 1120 94.8022 1121.88 96.0405 cv
1123.5 116.899 1111.51 142.819 1111.51 142.819 cv
1113.98 142.819 li
1122.63 132.88 1128.18 114.875 1131.17 102.514 cv
1133.34 104.012 1135.53 105.458 1137.81 106.754 cv
1138.71 110.797 1138.58 116.776 1134.85 124.978 cv
1127.26 141.68 1125.74 144.336 1125.74 144.336 cv
1127.83 144.336 li
1127.83 144.336 1145.23 120.827 1146.69 110.698 cv
1149.05 111.456 1151.58 112.276 1153.96 112.626 cv
1151.3 107.526 1149.04 102.333 1148.72 96.5513 cv
1150.09 97.2056 1151.44 97.8589 1152.68 98.8003 cv
1153.91 99.731 1154.44 100.224 1155.01 101.432 cv
1156.79 105.179 1156.63 109.745 1155.97 113.634 cv
1155.14 118.475 1154.76 122.937 1152.57 127.447 cv
1151.21 130.239 1149.38 132.999 1147.36 135.617 cv
1149.78 133.056 1152.2 130.496 1154.2 127.588 cv
1159.18 120.342 1165.6 111.03 1164.47 101.635 cv
1164.3 100.241 1163.58 98.9692 1163.64 97.6069 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
291.814 778.483 mo
291.871 778.437 291.927 778.389 291.986 778.338 cv
291.845 778.275 291.7 778.221 291.557 778.162 cv
291.646 778.268 291.728 778.377 291.814 778.483 cv
cp
f
176.865 831.041 mo
179.766 824.647 175.814 814.271 179.98 810.015 cv
184.912 804.973 190.215 807.92 189.953 797.675 cv
189.899 795.56 189.634 793.638 189.339 791.753 cv
198.37 789.294 207.587 787.167 216.273 785.422 cv
229.939 782.677 243.681 782.927 257.428 781.058 cv
266.218 779.861 273.937 778.698 282.743 779.858 cv
286.78 780.391 288.23 780.662 289.731 779.942 cv
289.003 779.199 288.206 778.53 287.312 777.965 cv
287.308 777.962 286.58 777.846 287.552 776.428 cv
288.169 775.526 288.623 775.471 288.872 775.55 cv
288.882 775.521 288.891 775.496 288.901 775.47 cv
288.838 775.346 288.792 775.171 288.774 774.931 cv
288.313 775.019 287.849 775.105 287.389 775.22 cv
287.386 775.221 286.799 775.682 286.38 774.015 cv
285.955 772.349 286.813 772.385 286.813 772.385 cv
286.964 772.362 287.114 772.354 287.266 772.334 cv
277.384 769.217 261.634 771.553 254.369 771.675 cv
240.306 771.91 225.434 771.35 211.437 770.137 cv
204.578 769.543 198.517 767.387 192.444 765.253 cv
196.084 755.586 202.185 746.206 210.64 747.733 cv
215.568 748.625 219.694 757.844 225.902 750.999 cv
228.856 747.742 227.723 739.633 226.826 736.229 cv
220.349 737.758 213.745 735.238 207.335 737.524 cv
212.954 735.521 215.236 730.769 222.262 729.716 cv
228.964 728.71 238.151 730.494 241.014 722.968 cv
241.327 722.143 241.58 720.322 241.757 718.123 cv
255.643 718.042 268.531 720.893 283.438 723.514 cv
270.911 714.543 257.153 706.188 241.842 705.313 cv
241.811 705.055 241.776 704.824 241.736 704.631 cv
240.134 696.606 232.566 694.491 225.474 693.813 cv
216.623 688.922 205.214 689.524 195.612 692.964 cv
188.791 695.409 186.823 698.972 186.146 704.361 cv
184.658 706.788 183.66 709.475 182.931 712.291 cv
171.864 711.504 161.911 706.742 153.246 697.942 cv
155.507 711.749 167.821 721.353 180.491 726.84 cv
178.977 736.553 176.319 745.215 164.01 747.726 cv
148.327 750.927 137.78 753.401 126.118 764.712 cv
120.183 770.467 113.27 775.609 106.509 780.981 cv
93.6328 791.209 84.7119 803.485 75.7598 816.922 cv
46.5381 826.685 li
48.7153 828.332 51.0537 829.773 53.5215 831.041 cv
176.865 831.041 li
cp
f
293.947 776.501 mo
293.901 776.443 293.849 776.39 293.801 776.331 cv
293.736 776.32 293.672 776.313 293.606 776.302 cv
293.721 776.368 293.835 776.435 293.947 776.501 cv
cp
f
293.606 776.302 mo
293.672 776.313 293.736 776.32 293.801 776.331 cv
304.29 778.078 314.438 782.535 322.964 789.252 cv
315.636 782.487 306.653 777.393 296.912 774.544 cv
304.269 775.163 311.673 778.131 318.312 781.673 cv
309.356 775.904 298.779 770.798 287.266 772.334 cv
287.114 772.354 286.964 772.362 286.813 772.385 cv
286.813 772.385 285.955 772.349 286.38 774.015 cv
286.799 775.682 287.386 775.221 287.389 775.22 cv
287.849 775.105 288.313 775.019 288.774 774.931 cv
288.792 775.171 288.838 775.346 288.901 775.47 cv
288.891 775.496 288.882 775.521 288.872 775.55 cv
288.623 775.471 288.169 775.526 287.552 776.428 cv
286.58 777.846 287.308 777.962 287.312 777.965 cv
288.206 778.53 289.003 779.199 289.731 779.942 cv
296.181 786.512 297.102 799.202 307.396 802.978 cv
297.568 798.384 298.291 786.616 291.814 778.483 cv
291.728 778.377 291.646 778.268 291.557 778.162 cv
291.7 778.221 291.845 778.275 291.986 778.338 cv
301.005 782.324 306.739 793.275 317.233 796.016 cv
307.291 792.573 303.082 781.998 293.947 776.501 cv
293.835 776.435 293.721 776.368 293.606 776.302 cv
cp
.768627 .752941 .623529 .811765 cmyk
f
228.87 705.52 mo
224.938 703.457 219.161 704.541 214.631 707.266 cv
214.631 707.266 li
218.319 703.529 223.698 700.246 230.2 701.39 cv
228.87 705.52 li
cp
.396078 .647059 .901961 .356863 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
228.87 705.52 mo
224.938 703.457 219.161 704.541 214.631 707.266 cv
214.631 707.266 li
218.319 703.529 223.698 700.246 230.2 701.39 cv
228.87 705.52 li
cp
0 0 0 0 cmyk
@
236.384 700.916 mo
240.587 701.938 244.502 703.485 248.155 705.4 cv
248.155 705.4 li
244.078 704.865 239.986 704.793 236.095 705.247 cv
236.384 700.916 li
cp
.396078 .647059 .901961 .356863 cmyk
f
236.384 700.916 mo
240.587 701.938 244.502 703.485 248.155 705.4 cv
248.155 705.4 li
244.078 704.865 239.986 704.793 236.095 705.247 cv
236.384 700.916 li
cp
0 0 0 0 cmyk
@
87.4653 64.3613 mo
83.2515 68.8232 79.5054 73.6992 76.0283 78.7568 cv
77.5742 76.251 79.1445 73.7637 81.0435 71.5059 cv
84.231 67.7148 87.5894 63.3105 91.1489 59.8691 cv
93.1626 57.9219 95.5859 56.2891 98.0386 54.668 cv
96.1597 58.8545 90.6436 60.9971 87.4653 64.3613 cv
cp
171.617 166.257 mo
169.961 166.576 167.443 166.657 165.806 166.202 cv
164.147 165.741 163.079 164.746 162.195 163.56 cv
166.249 161.797 170.048 159.587 173.202 156.657 cv
167.089 154.103 164.219 148.877 160.912 143.514 cv
156.161 135.81 151.256 127.787 148.173 119.187 cv
143.947 107.399 140.097 95.9063 137.215 83.9648 cv
138.769 82.5703 140.51 81.291 142.604 80.0723 cv
143.808 79.3721 144.971 79.1064 145.311 77.8721 cv
146.37 77.9072 147.376 78.0146 148.466 78.3389 cv
149.827 78.7422 150.436 79.7148 152.296 79.5527 cv
151.534 78.9717 150.732 78.3857 149.936 77.8291 cv
151.409 78.2363 152.968 79.1523 154.164 77.9033 cv
152.643 77.6846 151.057 77.377 149.95 76.1426 cv
151.737 77.3174 153.946 77.7158 155.96 77.2539 cv
155.946 77.1367 155.935 76.5986 155.954 76.4912 cv
153.972 77.2168 151.916 75.3926 150.13 74.498 cv
147.311 73.084 145.745 74.0078 143.356 74.7646 cv
142.932 74.7002 142.476 74.7051 142.019 74.7705 cv
140.058 75.0557 138.01 76.833 136.152 77.6455 cv
136.043 77.6934 135.933 77.7373 135.823 77.7842 cv
135.438 75.9365 135.073 74.0762 134.74 72.1992 cv
133.729 66.5166 133.702 60.5898 133.697 54.9287 cv
133.695 52.1377 134.286 49.1738 133.02 47.1182 cv
132.556 46.3633 132.11 45.8369 131.716 45.3633 cv
132.037 45.4756 132.369 45.5977 132.718 45.7393 cv
133.672 46.1279 136.151 48.4561 137.222 47.1094 cv
138.025 46.1006 136.11 44.2529 136.271 43.1328 cv
137.303 43.7393 138.483 43.9561 139.459 43.1182 cv
139.077 42.1641 138.856 41.0195 138.727 40.0332 cv
141.481 40.8955 144.032 42.6211 146.466 44.2002 cv
145.338 41.0557 145.477 38.5996 143.129 35.958 cv
141.002 33.5645 141.272 34.0625 141.739 31.1475 cv
142.083 28.9961 142.125 26.8516 141.677 24.7148 cv
141.094 21.9336 139.524 20.9482 137.303 20.2998 cv
137.335 19.7422 137.249 19.2441 136.998 18.835 cv
135.487 16.3701 131.014 18.0059 128.874 16.8838 cv
124.119 15.7646 li
119.467 16.8848 116.828 17.8232 113.771 21.918 cv
110.963 25.6787 108.421 29.1309 105.164 32.5313 cv
104.388 33.3408 103.837 34.1465 103.443 34.9492 cv
102.606 34.5742 101.781 34.0469 100.906 33.3867 cv
100.163 32.8252 99.0967 31.4248 98.1006 31.4014 cv
95.4067 31.3379 94.9912 35.1035 93.6426 36.6855 cv
94.4419 36.9063 95.1729 37.1162 95.8706 37.3096 cv
94.1162 37.5 92.5244 38.0225 91.4517 39.5938 cv
90.3979 41.1387 90.6934 42.1338 91.439 43.0176 cv
89.2671 45.4561 86.9551 47.8203 83.313 48.5273 cv
79.3169 49.3027 77.8418 47.2275 74.9102 45.3379 cv
72.2871 43.6465 68.9814 44.25 66.0107 45.1465 cv
67.6255 45.2295 69.917 47.0625 70.6069 48.5225 cv
68.9771 47.8291 66.7881 48.3174 65.397 48.9785 cv
69.2295 49.6787 71.6431 52.5215 75.3784 53.3184 cv
79.1362 54.1201 83.1982 52.4004 86.3599 50.46 cv
88.9512 48.8701 91.562 47.3086 93.5796 45.0908 cv
94.1523 45.709 94.6274 46.4189 94.7739 47.333 cv
97.8271 47.0684 98.5557 45.7695 99.4438 43.5078 cv
99.8672 42.4316 99.1855 41.9395 100.312 40.6494 cv
100.874 40.0049 101.656 39.5186 102.521 39.1104 cv
102.449 41.9189 103.055 44.7158 101.677 47.5439 cv
94.8979 49.0967 87.9063 52.2344 81.3521 53.5928 cv
74.5073 55.0107 67.6919 56.2754 60.814 57.4805 cv
56.6357 58.2129 52.8081 59.7725 48.771 60.9736 cv
46.2793 61.7148 43.6299 61.374 41.2075 62.165 cv
35.2144 64.1221 31.6206 71.2666 30.6655 77.0303 cv
29.4443 84.4043 32.7832 89.8623 38.873 93.8242 cv
46.0146 98.4707 55.9434 101.217 62.5718 94.3164 cv
65.5386 91.2285 68.8765 88.9443 71.5444 85.5713 cv
71.1694 86.1641 70.7959 86.7568 70.4248 87.3516 cv
64.1064 97.4834 56.6528 107.973 53.1265 119.472 cv
51.0278 126.315 49.8745 132.884 46.2822 139.119 cv
44.7622 141.757 43.3809 144.286 41.3711 146.58 cv
39.1924 149.066 35.3955 152.812 32.0083 153.67 cv
35.8281 153.796 39.748 152.835 43.625 153.699 cv
48.8154 154.854 54.0239 157.404 58.749 159.804 cv
60.9009 160.896 63.0576 161.983 65.2285 163.036 cv
63.833 165.6 62.3877 168.149 61.498 170.724 cv
61.9731 171.168 63.022 171.688 63.6504 171.801 cv
64.0029 170.094 65.2334 168.656 66.7354 169.586 cv
67.5552 170.095 68.1543 173.148 68.9526 174.081 cv
71.708 177.299 77.0264 178.654 80.9219 176.787 cv
74.7412 175.727 71.6973 171.337 72.0054 166.152 cv
79.2451 169.265 86.7295 171.673 94.7583 172.325 cv
111.92 173.72 130.336 172.83 147.052 168.466 cv
150.565 167.548 154.239 166.538 157.827 165.27 cv
159.65 168.202 160.917 172.445 161.358 174.822 cv
163.82 173.637 162.263 170.814 162.192 168.753 cv
168.306 172.664 176.171 169.131 178.426 162.113 cv
176.716 164.327 174.359 165.727 171.617 166.257 cv
cp
0 0 0 1 cmyk
f
285.97 108.979 mo
287.522 105.677 284.584 100.664 284.203 96.8872 cv
283.54 90.3296 282.429 83.8984 280.364 77.6826 cv
280.525 76.1191 280.44 74.4692 279.916 72.6553 cv
279.052 69.6631 277.715 66.7974 276.964 63.7705 cv
276.092 60.2588 277.349 57.2905 276.643 53.8296 cv
276.104 51.1841 274.683 47.4272 273.092 45.2129 cv
272.038 43.7495 269.654 42.6538 269.281 41.019 cv
268.939 39.5151 270.431 36.9302 270.348 35.1348 cv
270.226 32.4956 268.898 30.2539 267.934 27.8716 cv
267.484 26.7603 267.217 25.6572 267.029 24.5562 cv
271 26.2139 273.554 28.1436 275.757 33.0547 cv
277.52 36.9849 282.134 42.4004 287.16 41.2695 cv
281.736 40.3979 283.577 29.4038 282.004 25.4756 cv
279.337 18.8169 271.63 15.6929 264.71 13.6104 cv
264.625 13.4492 264.549 13.2896 264.456 13.1284 cv
261.726 8.39648 257.544 6.40479 252.923 6.13672 cv
251.322 4.64551 251.76 1.89307 253.7 .0522461 cv
251.033 -.375 248.366 1.90234 246.892 4.01367 cv
246.799 2.82959 246.88 1.57568 247.117 .458984 cv
244.564 1.16504 243.186 4.05566 242.8 6.78418 cv
241.907 5.16895 241.867 3.24219 242.817 1.25049 cv
241.071 3.03711 239.376 6.31738 239.605 9.10352 cv
239.494 9.1543 239.383 9.20264 239.272 9.25488 cv
234.096 12.3604 li
232.761 14.0732 231.719 15.7852 230.912 17.5703 cv
227.048 19.0156 222.971 20.2241 220.958 23.6987 cv
217.625 29.4521 220.802 36.7295 219.946 42.8223 cv
219.537 45.7393 212.813 60.0483 218.469 58.5713 cv
222.597 57.4937 224.996 49.0049 225.047 45.4111 cv
225.093 42.0156 225.043 39.2544 226.084 35.9297 cv
226.71 33.9282 227.678 32.6699 228.863 31.7891 cv
229.555 35.085 231.093 38.082 231.784 41.3477 cv
232.429 44.3999 228.43 48.9355 229.938 51.6992 cv
231.19 53.9932 232.558 51.6421 233.775 53.1504 cv
234.756 54.3633 233.106 57.9165 232.812 59.3613 cv
231.661 64.9912 230.286 70.3433 228.574 75.7793 cv
227.271 79.9146 225.443 83.8677 225.47 88.271 cv
225.478 89.6069 225.522 90.9785 225.597 92.3701 cv
223.957 97.4961 222.595 102.945 221.33 107.846 cv
220.072 112.715 218.755 119.214 219.944 124.112 cv
219.329 126.727 219.07 130.026 221.672 131.347 cv
224.353 132.706 228.002 130.593 228.523 127.689 cv
228.399 127.57 228.278 127.449 228.159 127.326 cv
227.719 127.62 226.99 127.698 226.506 127.998 cv
225.943 127.058 224.532 126.745 224.082 126.188 cv
223.418 125.366 223.328 124.373 222.968 123.461 cv
222.979 123.458 222.99 123.455 223.002 123.452 cv
223.125 117.56 225.238 112.355 227.486 107.162 cv
228.252 110.966 229.227 114.668 230.386 118.06 cv
235.013 131.604 233.438 145.604 235.132 159.806 cv
235.441 162.397 236.258 164.964 236.52 167.57 cv
236.745 169.82 236.042 172.15 237.28 174.109 cv
241.75 181.183 259.984 174.813 256.811 170.815 cv
244.452 171.615 248.601 158.262 250.308 151.336 cv
251.259 147.473 254.967 145.105 258.321 143.071 cv
260.333 141.851 264.501 140.085 266.888 140.724 cv
269.077 141.311 268.724 141.695 269.277 143.83 cv
270.288 147.734 267.851 150.663 268.244 154.114 cv
268.423 155.688 270.055 156.38 270.356 157.624 cv
270.831 159.583 269.58 160.87 268.854 162.388 cv
268.165 163.83 267.498 165.725 266.561 166.958 cv
265.403 168.483 262.477 169.204 261.678 170.763 cv
259.575 174.87 268.559 174.604 271.009 173.876 cv
274.554 172.824 278.156 164.991 278.706 161.162 cv
278.939 159.536 277.578 157.895 277.631 156.977 cv
277.716 155.476 278.877 155.53 279.319 154.293 cv
279.989 152.419 280.142 151.476 280.32 149.444 cv
280.963 142.1 281.87 134.741 282.14 127.352 cv
282.4 120.256 279.276 113.865 278.337 106.839 cv
277.679 101.908 277.509 96.5869 277.309 91.6611 cv
277.194 88.8374 277.933 86.3979 278.721 84.0146 cv
279.572 88.1064 279.713 93.1895 280.01 95.542 cv
280.63 100.436 282.305 105.33 283.929 110.356 cv
283.478 112.322 282.363 114.132 280.4 113.513 cv
280.949 116.004 283.072 119.166 285.867 117.273 cv
289.254 114.979 287.36 111.676 285.97 108.979 cv
cp
f
1077.43 312.953 mo
1076.06 308.429 1074.7 303.907 1073.33 299.383 cv
1075.23 298.913 1077.38 297.763 1078.64 296.588 cv
1080.58 294.793 1080.62 293.78 1081.06 292.112 cv
1082.81 291.98 1084.99 290.047 1088.68 286.269 cv
1091.13 283.759 1093.71 281.156 1096.26 278.451 cv
1096.1 283.7 1096.21 289.105 1096.7 294.464 cv
1094.19 304.9 1090.13 315.275 1088.94 325.407 cv
1088.4 330.019 1089.19 333.932 1092.14 337.07 cv
1091.49 340.932 1092.08 345.779 1091.9 349.027 cv
1091.73 352.084 1091.41 355.032 1091.06 357.989 cv
1086.52 342.977 1081.97 327.964 1077.43 312.953 cv
cp
1161.83 241.174 mo
1153.56 231.457 1155.83 222.748 1153.64 211.103 cv
1152.04 202.559 1146.43 189.347 1137.34 185.844 cv
1136.66 183.287 1135.18 180.607 1134.58 179.082 cv
1133.49 176.313 1132.03 173.801 1131.75 170.638 cv
1131.56 168.612 1132.78 165.309 1131.7 163.849 cv
1127.51 158.227 1110.6 159.609 1104.9 160.182 cv
1098.59 160.816 1089.21 161.435 1083.77 164.762 cv
1079.43 167.412 1076.03 174.619 1073.16 179.082 cv
1074.06 179.333 li
1073.97 179.476 1073.88 179.621 1073.79 179.765 cv
1069.27 183.528 1063.42 191.524 1063.27 195.962 cv
1065.92 193.131 1069.33 191.1 1072.95 189.779 cv
1072.61 191.419 1071.95 193.68 1071.29 195.483 cv
1073.62 194.867 1075.58 192.701 1077.42 191.283 cv
1075.6 196.476 1078.13 200.876 1080.77 205.064 cv
1077.6 207.524 1073.62 207.751 1071.1 211.147 cv
1075.21 212.629 1078.97 210.66 1083.09 211.03 cv
1084.02 213.715 1084.44 217.721 1086.75 218.659 cv
1090.8 220.304 1096.84 215.166 1101.38 215.682 cv
1095.85 216.087 1094.95 221.417 1090.93 224.093 cv
1092.92 224.813 1094.61 226.035 1095.32 227.725 cv
1095.28 229.086 1095.19 230.532 1095.15 231.942 cv
1095.11 232.035 1095.08 232.123 1095.04 232.215 cv
1095.08 232.195 1095.11 232.173 1095.15 232.154 cv
1095.09 234.447 1095.16 236.621 1095.73 238.13 cv
1096.93 235.423 1097.91 232.627 1099.49 230.138 cv
1099.78 230.551 1099.85 231.122 1100.16 231.586 cv
1101.66 230.331 1101.12 229.526 1101.79 227.572 cv
1102.94 224.217 1103.34 221.963 1104.49 220.135 cv
1106.67 218.895 1109.3 218.801 1111.04 220.128 cv
1109.95 222.838 1108.18 225.556 1107.11 227.967 cv
1104.77 233.195 1103.23 238.698 1101.64 244.205 cv
1101.08 246.135 1100.59 248.006 1100.13 249.856 cv
1093.47 262.794 1091.63 278.146 1077.18 284.817 cv
1076.41 284.201 li
1074.45 285.575 1071.89 285.833 1069.32 286.122 cv
1069.25 285.918 1069.19 285.715 1069.13 285.512 cv
1074.68 283.417 1078.66 281.076 1078.3 280.024 cv
1078.2 279.744 1077.8 279.583 1077.16 279.53 cv
1076.92 277.711 1075.22 275.64 1073.45 275.871 cv
1073.98 277.274 1074.04 278.531 1073.67 279.833 cv
1072.01 280.131 1070.01 280.626 1067.85 281.293 cv
1067.77 281.005 1067.68 280.719 1067.59 280.432 cv
1066.4 276.485 1065.22 272.533 1064.01 268.592 cv
1063.18 265.886 1062.48 263.315 1060.05 261.588 cv
1056.81 259.288 1056.14 262.221 1056.63 265.422 cv
1057.09 268.42 1058.19 271.196 1059.2 274.05 cv
1060.28 277.105 1061.36 280.159 1062.44 283.214 cv
1061.42 283.625 1060.48 284.039 1059.61 284.448 cv
1058.12 283.742 1057.23 282.069 1056.88 280.353 cv
1054.8 280.817 1055.96 284.475 1056.95 285.852 cv
1055.35 286.815 1054.47 287.648 1054.65 288.168 cv
1054.98 289.127 1058.82 288.707 1063.8 287.283 cv
1063.08 287.583 1062.4 287.958 1061.78 288.465 cv
1057.84 291.673 1059.33 297.039 1065.1 294.297 cv
1065.24 296.465 1066.35 298.006 1067.97 298.858 cv
1075.42 319.932 1082.88 341.007 1090.33 362.082 cv
1090.38 362.247 1090.44 362.413 1090.5 362.578 cv
1089.96 367.226 1089.93 372.006 1089.13 376.634 cv
1088.78 376.886 1088.41 377.137 1088.04 377.383 cv
1085.32 374.943 1080.86 379.087 1080.95 381.666 cv
1076.88 384.083 1073.04 386.625 1071.14 389.923 cv
1076.12 393.025 1086.64 391.197 1091.9 389.167 cv
1095.79 387.664 1097.39 385.887 1097.99 383.748 cv
1099.98 389.381 1101.97 395.015 1103.96 400.649 cv
1102.07 394.395 1100.18 388.142 1098.29 381.887 cv
1098.46 379.208 1097.8 376.023 1098.26 372.193 cv
1097.92 372.295 li
1100.56 362.307 1100.29 352.35 1103.65 342.365 cv
1106.41 342.363 1109.11 341.464 1112 339.983 cv
1113.2 340.703 1114.49 341.314 1115.83 341.797 cv
1115.86 342.251 1115.91 342.701 1115.98 343.137 cv
1116.67 347.582 1117.98 351.839 1118.47 356.264 cv
1118.94 360.608 1119.08 364.828 1118.38 368.889 cv
1115.36 366.513 1109.99 367.747 1111.48 372.905 cv
1106.51 373.323 1100.93 372.295 1098.48 371.042 cv
1096.75 381.097 1116.99 382.474 1123.06 381.034 cv
1134.08 378.424 1130.67 369.68 1127.97 361.441 cv
1128.58 355.498 1128.08 348.663 1127.2 342.594 cv
1131.39 341.479 1134.59 338.477 1134.87 333.056 cv
1135.44 322.133 1130.73 311.891 1132.05 300.882 cv
1133.81 286.321 1132.75 277.311 1127.04 264.153 cv
1124.03 257.241 1125.26 252.042 1126.73 245.192 cv
1128.02 239.212 1127.85 232.879 1126.77 226.631 cv
1125.49 219.263 1122.66 212.847 1119.55 206.469 cv
1119.66 206.22 1119.77 205.969 1119.91 205.718 cv
1122.12 206.231 1123.63 208.406 1124.05 210.85 cv
1125.57 208.643 1126.28 205.634 1127.67 203.549 cv
1127.7 205.198 1128.69 206.927 1128.76 208.621 cv
1130.54 207.463 1132.24 204.156 1133.39 203.451 cv
1135.53 200.135 1134.53 195.73 1132.29 191.37 cv
1133.13 191.526 1133.89 191.629 1134.53 191.653 cv
1136.85 200.477 1139.04 209.152 1139.14 218.636 cv
1139.31 234.141 1146.5 248.312 1152.04 262.771 cv
1149.92 249.655 1151.19 236.334 1149.63 223.217 cv
1151.67 230.528 1154.17 234.826 1161.83 241.174 cv
cp
f
44.8774 353.85 mo
43.8149 353.689 42.5674 353.518 41.7749 352.727 cv
40.7109 351.664 40.7251 349.521 41.0591 347.521 cv
42.5098 348.078 43.9897 348.421 44.8359 348.339 cv
45.252 348.299 45.6084 348.223 45.9214 348.122 cv
47.3232 350.373 47.418 352.742 44.8774 353.85 cv
cp
85.6289 255.804 mo
85.8125 255.241 86.0254 254.736 86.2603 254.272 cv
86.0479 254.784 85.833 255.294 85.6289 255.804 cv
cp
194.994 341.324 mo
193.304 339.118 190.427 336.389 188.256 334.688 cv
185.44 332.481 181.929 331.969 179.075 330.24 cv
175.263 327.932 175.991 323.414 174.855 319.604 cv
173.379 314.654 171.424 310.637 168.361 306.446 cv
166.662 304.121 165.094 302.454 162.993 300.527 cv
161.796 299.429 160.742 298.627 159.604 297.913 cv
159.357 297.598 159.092 297.293 158.813 296.995 cv
159.803 293.537 162.867 290.948 160.655 288.289 cv
158.665 285.896 154.401 284.46 151.955 282.218 cv
150.036 280.459 148.318 278.729 146.396 276.91 cv
142.108 272.851 138.891 269.142 133.257 266.804 cv
130.126 265.504 126.171 264.817 122.347 263.934 cv
120.25 262.268 117.901 260.94 115.421 259.822 cv
112.352 258.437 108.241 257.439 106.416 254.418 cv
107.908 254.115 109.365 253.062 110.776 250.917 cv
113.663 253.335 118.326 253.024 120.217 256.072 cv
119.224 253.703 116.209 252.787 114.477 250.959 cv
113.395 249.817 113.051 248.539 112.757 247.285 cv
113.39 245.955 113.951 244.582 114.382 243.221 cv
115.104 240.945 114.755 238.522 115.463 236.347 cv
117.528 236.542 117.463 238.98 119.672 238.79 cv
118.183 236.837 116.601 233.662 118.217 231.188 cv
116.6 235.06 123.264 237.057 125.836 238.031 cv
124.356 237.207 122.344 235.614 123.205 233.89 cv
125.379 235.748 128.554 236.269 131.219 235.465 cv
122.733 236.308 124.78 226.514 122.831 221.643 cv
121.524 218.374 117.964 214.126 114.558 212.969 cv
113.205 212.509 110.258 212.068 108.602 212.846 cv
107.946 212.954 107.298 213.152 106.665 213.449 cv
102.766 208.107 89.791 208.169 87.5034 214.542 cv
85.3687 215.772 82.9307 216.835 81.2168 218.356 cv
78.6582 220.627 76.3379 223.281 74.7993 226.302 cv
72.4468 230.921 72.8232 236.219 67.7329 239.06 cv
70.3677 238.242 72.7012 236.6 75.3677 235.854 cv
73.8145 237.403 73.7017 239.997 72.1221 241.44 cv
72.9941 240.682 74.0166 240.061 75.0996 239.626 cv
74.7959 241.739 74.9966 244.109 74.4268 246.149 cv
75.2466 245.095 76.1753 243.851 77.3584 243.249 cv
78.2734 247.381 81.668 250.596 81.0469 255.112 cv
80.4004 259.819 77.5249 262.951 78.4297 268.058 cv
78.5649 265.399 79.4844 263.466 81.0146 261.354 cv
83.3936 258.073 83.1147 256.394 84.1567 252.759 cv
84.7495 253.946 85.2324 255.412 85.2495 256.799 cv
84.5571 258.72 84.1489 260.647 84.7461 262.664 cv
85.0107 261.502 85.5698 260.701 86.2363 259.736 cv
87.1626 258.395 87.7754 257.199 88.3296 255.965 cv
89.8828 262.424 li
84.1055 261.958 78.3794 269.263 74.8135 272.925 cv
70.875 276.97 68.1816 282.162 64.6328 286.504 cv
62.2568 289.41 60.1772 293.705 57.5479 296.047 cv
56.6606 296.837 54.9907 295.816 54.4844 297.519 cv
53.8931 299.505 56.7041 300.625 57.4902 301.86 cv
58.3706 303.246 58.5654 305.037 59.5889 306.563 cv
58.5859 307.813 57.6104 309.077 56.7354 310.388 cv
54.2983 314.037 52.4106 318.113 50.4844 322.045 cv
49.8594 323.32 49.3403 324.158 49.0669 324.816 cv
44.8306 327.183 38.0605 328.9 35.3721 332.302 cv
31.7681 332.695 27.3833 332.783 27.5059 337.5 cv
22.5967 336.777 23.4102 341.605 24.8188 344.225 cv
18.4473 345.598 24.1323 353.361 25.7881 356.08 cv
28.5269 360.58 31.627 362.994 36.8135 361.172 cv
37.4028 361.785 38.0571 362.284 38.6572 362.573 cv
41.1362 363.766 43.4063 362.362 45.7412 361.807 cv
48.7915 361.081 51.5215 360.794 53.2534 357.765 cv
54.7607 355.129 53.9121 351.852 54.5088 349.006 cv
54.8188 347.525 55.7095 346.154 55.9463 344.649 cv
56.1543 343.326 56.0762 342.014 55.8071 340.726 cv
55.8496 340.681 55.8872 340.639 55.9316 340.592 cv
59.2061 337.088 60.9917 332.322 62.123 327.665 cv
65.0288 323.107 67.6392 318.269 70.7314 313.802 cv
71.9346 314.24 73.1953 314.549 74.0649 314.303 cv
75.7153 313.837 75.3643 313.048 76.4067 311.621 cv
79.4854 307.408 81.1479 301.908 84.5581 297.716 cv
80.1187 304.096 86.9785 316.187 90.2866 321.044 cv
94.689 327.508 96.002 332.209 91.3491 339.177 cv
92.2578 339.467 93.1362 339.813 93.9985 340.191 cv
93.8501 340.302 93.707 340.418 93.5718 340.541 cv
90.8813 342.989 91.8599 342.858 92.7266 345.925 cv
94.1606 350.996 93.1689 353.264 91.1787 358.141 cv
86.3164 370.054 83.3862 381.953 77.3491 393.586 cv
66.8223 413.87 84.4727 434.644 79.3359 455.104 cv
78.5063 458.407 77.6685 460.931 76.2251 463.867 cv
76.5747 463.894 76.9546 463.928 77.3467 463.964 cv
72.2954 469.755 65.6748 471.899 58.9634 475.577 cv
57.1421 476.575 53.7524 479.278 53.7832 481.61 cv
53.8257 484.853 60.6973 483.824 63.895 483.957 cv
68.2935 484.139 74.0786 484.586 78.1367 482.505 cv
81.6001 480.729 80.6685 480.573 84.6235 480.881 cv
87.6626 481.118 91.5801 480.753 94.2529 479.228 cv
100.848 475.462 96.2891 467.188 92.8901 461.47 cv
94.4351 457.556 91.5762 449.516 91.1694 445.41 cv
90.3901 437.54 90.4033 427.943 93.1006 420.465 cv
94.9526 415.33 96.3853 410.006 98.2036 404.821 cv
100.088 399.45 104.914 395.272 107.71 390.058 cv
109.536 386.653 111.359 383.207 113.111 379.718 cv
115.028 386.366 117.584 392.947 117.321 399.718 cv
117.014 407.623 118.686 414.695 121.08 422.155 cv
122.6 426.889 123.808 432.615 126.257 437.053 cv
129.602 443.115 134.645 447.828 137.417 454.624 cv
140.697 462.663 142.115 470.096 141.445 478.994 cv
141.922 478.998 142.521 478.988 143.199 478.961 cv
142.448 481.895 141.884 485.128 143.088 487.385 cv
144.39 489.826 149.726 493.3 152.217 494.709 cv
155.043 496.309 157.716 496.085 161.07 497.784 cv
166.773 500.675 171.488 502.048 178.019 501.994 cv
178.644 496.898 176.162 491.117 173.38 487.003 cv
171.492 484.208 168.917 480.894 166.503 478.561 cv
163.801 475.948 160.65 474.21 157.44 472.573 cv
157.552 468.997 154.63 464.918 153.446 462.157 cv
148.146 449.812 146.063 438.406 144.978 425.129 cv
143.725 409.798 138.281 395.117 136.917 379.669 cv
136.056 369.931 136.549 360.221 135.761 350.539 cv
135.344 345.401 134.437 341.465 132.763 337.872 cv
132.823 337.755 132.88 337.637 132.929 337.517 cv
133.892 335.126 132.724 335.141 131.972 332.429 cv
129.868 324.839 134.761 317.394 131.912 309.48 cv
131.06 307.113 130.626 304.595 130.426 301.991 cv
131.972 302.498 133.517 302.969 135.042 303.854 cv
136.472 304.685 137.212 306.764 138.446 307.904 cv
141.785 310.994 147.958 312.99 152.237 310.668 cv
152.84 312.147 153.538 313.599 154.423 315.018 cv
157.094 319.295 159.672 323.498 161.041 328.455 cv
162.157 332.495 166.162 336.419 166.693 340.267 cv
167.084 343.102 166.496 350.183 165.355 352.721 cv
164.398 354.85 162.779 354.55 163.747 357.412 cv
164.876 360.753 167.063 360.324 170.029 360.512 cv
168.237 364.264 174.014 366.062 176.801 365.167 cv
178.598 364.591 179.776 363.577 181.444 362.812 cv
183.628 361.808 185.51 362.503 187.277 359.859 cv
189.436 356.63 189.332 353.742 192.225 351.043 cv
195.539 347.949 198.117 345.403 194.994 341.324 cv
cp
f
420.194 74.8076 mo
421.11 73.7764 423.62 73.0649 424.138 71.8228 cv
425.466 68.6357 420.352 63.7202 419.209 61.2124 cv
417.364 57.1621 415.919 52.3809 413.669 48.3062 cv
410.354 42.3022 406.524 36.8667 402.185 31.7798 cv
404.595 28.1406 406.423 23.8691 407.212 20.3545 cv
408.31 15.4653 406.44 11.4639 406.12 6.77344 cv
406.476 13.3062 402.396 21.2261 396.788 25.8936 cv
396.521 25.6211 396.262 25.3438 395.99 25.0728 cv
391.287 20.3804 389.14 20.188 381.727 20.5049 cv
375.605 20.7661 369.984 22.3794 364.152 24.0029 cv
361.056 24.8652 357.839 26.124 354.823 27.79 cv
350.345 24.5342 346.656 19.3799 346.876 14.918 cv
344.466 19.0527 344.091 25.7158 344.891 30.3125 cv
345.083 31.4165 345.439 33.1211 345.98 34.8911 cv
344.936 36.1528 344.022 37.5161 343.279 38.9839 cv
337.347 50.7046 338.115 67.7368 341.18 81.1567 cv
341.104 81.0815 341.025 81.0054 340.949 80.9312 cv
337.672 77.7754 334.285 76.1826 331.998 72.1553 cv
330.362 69.2764 329.976 66.4478 329.279 63.2031 cv
328.248 58.3936 325.987 58.1333 324.703 63.2041 cv
323.863 66.5215 324.517 71.2227 325.357 74.4937 cv
326.582 79.2593 329.78 82.5034 331.609 86.8193 cv
335.503 96.002 332.543 106.287 340.367 113.6 cv
342.922 115.987 343.101 118.296 345.236 120.82 cv
347.098 123.02 349.794 123.354 351.978 122.348 cv
354.608 130.691 362.133 138.165 368.543 143.36 cv
373.17 147.109 377.833 150.054 383.141 152.816 cv
387.038 154.846 391.843 157.62 396.555 158.658 cv
398.875 161.957 400.83 165.699 402.062 168.974 cv
404.445 175.317 402.362 181.02 403.028 187.424 cv
403.634 185.098 404.415 182.814 405.031 180.484 cv
405.945 177.041 405.398 172.846 406.676 169.638 cv
408.069 170.617 408.461 172.817 408.148 174.598 cv
408.413 173.347 408.734 172.077 409.435 171.054 cv
409.729 171.445 410.18 171.832 410.42 172.25 cv
413.592 167.952 411.925 160.226 409.943 154.084 cv
410.213 153.688 410.456 153.274 410.666 152.841 cv
412.41 149.242 410.712 145.848 411.233 142.123 cv
412.119 135.797 417.361 132.988 419.896 127.858 cv
421.659 124.293 421.329 121.29 420.939 117.499 cv
420.631 114.488 418.522 109.985 419.523 106.971 cv
420.672 103.517 423.903 102.399 423.776 98.0913 cv
423.686 95.0479 421.533 92.2012 420.202 89.4692 cv
418.677 86.3389 417.742 82.6025 418.206 79.1182 cv
418.427 77.4487 419.052 76.0952 420.194 74.8076 cv
cp
f
408.148 174.598 mo
408.117 174.746 408.086 174.894 408.057 175.041 cv
408.093 174.896 408.122 174.749 408.148 174.598 cv
cp
f
504.512 62.0771 mo
504.56 62.2007 504.636 62.3398 504.771 62.5273 cv
504.693 62.375 504.606 62.2261 504.512 62.0771 cv
cp
f
640.916 236.724 mo
640.307 232.356 639.836 229.126 637.502 225.421 cv
636.533 223.887 635.027 222.134 633.563 220.284 cv
633.535 219.68 633.488 219.107 633.426 218.582 cv
632.645 212.114 627.643 206.469 625.836 200.173 cv
620.955 183.161 621.713 166.327 610.889 151.132 cv
609.693 149.455 607.779 147.595 606.791 145.966 cv
605.082 143.147 605.021 140.588 604.24 137.468 cv
602.945 132.299 598.674 128.774 594.658 125.42 cv
591.701 122.948 587.797 119.363 583.786 116.786 cv
583.769 116.677 583.752 116.569 583.736 116.461 cv
583.137 112.447 580.468 111.306 577.415 109.996 cv
577.294 109.688 577.15 109.385 576.97 109.088 cv
575.802 107.156 571.499 104.82 568.597 104.381 cv
568.637 103.618 568.641 102.861 568.566 102.126 cv
568.226 98.8188 566.138 95.6226 564.226 92.7002 cv
564.227 91.8569 564.233 91.0137 564.248 90.1714 cv
564.26 89.5083 564.754 88.123 564.499 87.519 cv
564.04 86.4331 562.022 85.4409 561.174 84.6108 cv
558.224 81.7256 556.488 78.0991 553.767 76.0415 cv
553.82 76.0415 553.873 76.0371 553.926 76.0371 cv
552.528 73.7192 551.436 70.6631 548.091 70.228 cv
547.938 70.207 547.783 70.1963 547.625 70.1895 cv
547.127 69.6333 546.454 69.1685 545.854 68.6606 cv
545.46 68.3267 545.145 68.0396 544.88 67.7944 cv
545.401 67.1387 545.875 66.437 546.289 65.6763 cv
546.668 64.9766 546.953 64.269 547.158 63.5586 cv
547.72 64.1953 548.278 64.6567 548.777 64.8496 cv
549.9 66.8696 li
550.912 66.1743 551.617 65.1431 552.052 63.958 cv
554.447 66.0825 556.136 68.3594 557.495 71.5054 cv
557.568 71.064 557.868 70.7139 557.968 70.3242 cv
558.242 70.811 558.974 71.1519 559.286 71.5562 cv
560.023 70.6807 559.98 69.354 560.692 68.4512 cv
561.611 69.0923 562.207 70.0205 563.103 70.6709 cv
564.758 68.5098 563.276 65.2495 562.747 62.874 cv
563.488 63.3853 563.82 62.8608 564.447 62.8872 cv
564.365 60.9976 562.328 59.2915 561.207 57.9028 cv
562.42 57.7505 563.814 57.7661 564.893 57.2363 cv
562.748 55.0024 559.983 54.0552 557.321 52.9648 cv
558.495 52.3433 559.869 52.3843 561.078 51.7861 cv
557.603 48.9497 552.31 50.9053 548.807 53.0376 cv
547.853 52.2686 546.831 51.7012 546.065 51.8013 cv
545.323 51.8999 544.772 52.1802 544.379 52.5942 cv
543.26 51.2388 541.912 50.0522 540.443 49.1196 cv
532.161 43.8657 518.287 44.146 510.285 49.9702 cv
509.396 50.6182 508.604 51.3389 507.962 52.1206 cv
507.939 52.062 li
507.947 52.083 507.952 52.103 507.958 52.1235 cv
507.422 52.7773 506.991 53.4736 506.698 54.2075 cv
505.29 55.2251 503.212 56.1909 502.807 57.3921 cv
502.146 59.3511 503.619 60.6489 504.512 62.0771 cv
504.402 61.7837 504.463 61.5781 504.383 61.0659 cv
505.247 61.3047 506.033 62.1323 506.542 62.8145 cv
506.688 61.4834 504.453 60.6289 505.181 59.4556 cv
505.448 59.0244 506.053 58.9351 506.771 58.896 cv
507.188 59.8564 507.914 60.9292 508.394 62.0176 cv
506.139 63.5684 504.038 65.6719 506.131 66.8774 cv
506.806 65.7017 507.747 64.8555 508.848 64.2778 cv
508.813 64.5474 508.739 64.8135 508.613 65.0747 cv
509.19 65.5464 li
508.507 67.5327 508.104 69.5981 508.298 71.6387 cv
508.47 73.4336 508.095 78.624 510.186 78.5483 cv
512.029 78.4819 512.738 76.5361 513.139 75.2007 cv
514.974 75.9722 516.276 75.9854 517.508 73.9888 cv
516.402 73.4917 516.137 72.4565 516.369 71.4058 cv
519.607 74.0503 li
519.693 74.0703 519.783 74.0879 519.87 74.1089 cv
520.019 74.5527 519.744 74.9775 518.704 76.0303 cv
517.799 76.9487 515.658 77.3979 515.109 78.5215 cv
513.88 81.0469 519.146 82.9629 516.581 84.0688 cv
517.87 85.5547 520.1 85.6328 521.667 84.4189 cv
523.799 82.7686 521.892 81.0723 523.397 80.0679 cv
523.577 79.9478 525.088 80.2666 525.597 80.0601 cv
525.661 80.0337 525.722 80.0039 525.782 79.9717 cv
525.816 80.0181 525.852 80.0635 525.889 80.1074 cv
526.991 82.1519 li
526.214 82.9995 525.472 83.8867 524.768 84.8208 cv
523.646 84.5967 li
522.418 85.8833 521.851 89.498 522.636 91.9507 cv
521.658 92.7808 520.881 93.7886 520.468 94.9185 cv
519.566 97.3862 520.661 100.947 519.152 103.203 cv
516.945 106.504 512.313 107.329 509.455 109.963 cv
509.386 109.874 509.318 109.802 509.252 109.757 cv
507.901 108.828 506.495 110.63 505.308 111.083 cv
503.493 111.778 502.32 110.98 500.568 111.109 cv
500.523 111.294 500.487 111.5 500.458 111.719 cv
498.186 111.641 495.938 111.456 493.818 110.85 cv
491.704 110.245 489.627 109.875 487.576 109.054 cv
487.133 108.876 486.605 108.593 486.046 108.293 cv
483.791 103.674 482.118 96.6548 476.954 96.9771 cv
476.471 92.7485 475.972 88.5137 475.492 84.2788 cv
475.985 84.2739 476.491 83.9341 477.085 82.8667 cv
477.93 84.1572 479.325 86.0679 480.632 84.646 cv
481.235 85.0171 481.943 85.0854 482.473 85.4419 cv
482.045 84.8359 481.791 83.7344 481.451 83.2598 cv
482.531 84.0459 483.727 84.5479 485.019 84.4819 cv
483.186 81.3184 480.233 79.1606 478.689 75.686 cv
477.506 73.022 476.905 70.5195 476.035 67.7583 cv
475.447 65.8916 474.778 61.2715 473.045 59.4116 cv
474.222 57.7217 473.745 56.4404 472.606 55.7563 cv
474.624 49.9956 476.955 44.4727 478.027 38.2388 cv
479.223 31.29 480.523 19.0317 476.109 13.0586 cv
475.884 13.6812 475.068 14.4756 474.86 15.0737 cv
474.244 12.8022 473.491 10.564 473.48 8.18994 cv
473.418 9.46729 472.979 10.6934 472.207 11.7119 cv
471.913 10.2134 471.699 8.72314 471.478 7.22217 cv
471.405 9.2417 470.935 11.7617 469.487 13.0981 cv
469.282 12.7759 469.052 12.499 468.859 12.2354 cv
468.661 13.0786 467.78 13.9692 467.519 14.6875 cv
467.271 14.4561 467.05 14.1997 466.858 13.9194 cv
466.573 14.562 465.485 15.5156 465.179 16.1533 cv
463.8 12.9668 461.966 9.93604 461.664 6.21973 cv
460.344 8.58643 461.009 12.5103 458.902 14.1602 cv
458.558 13.6191 457.596 12.9727 457.316 12.4307 cv
457.362 14.5366 457.472 19.0981 454.398 16.7529 cv
454.584 17.2349 454.69 17.8379 454.9 18.2881 cv
453.645 16.5708 451.748 15.3721 450.686 13.5762 cv
450.852 16.8696 453.513 20.9766 454.364 24.4048 cv
455.247 27.9609 456.51 31.3628 457.516 34.9243 cv
459.681 42.6021 461.109 50.7002 467.71 55.9712 cv
467.657 56.0054 467.603 56.0386 467.551 56.0752 cv
467.739 57.4087 467.997 58.8862 468.721 60.0815 cv
466.858 61.7129 li
467.648 65.6997 468.158 69.0273 466.56 72.854 cv
466.75 72.665 466.966 72.5098 467.206 72.3872 cv
468.632 75.4214 464.352 80.4873 463.412 83.5039 cv
465.216 83.3296 466.235 81.4233 467.434 80.2456 cv
468.145 82.8936 468.212 85.2754 468.231 88.0181 cv
469.392 86.4321 470.107 84.3359 470.81 82.5391 cv
471.18 82.7964 471.5 83.0591 471.818 83.4287 cv
472.41 83.2046 472.916 83.2534 473.371 83.4067 cv
474.061 88.0347 474.687 92.6704 475.272 97.3125 cv
475.193 97.3379 475.116 97.3589 475.034 97.3877 cv
475.125 97.4316 475.212 97.479 475.299 97.5269 cv
475.366 98.062 475.434 98.5972 475.5 99.1338 cv
474.688 98.7837 473.845 98.2197 473.16 98.2847 cv
471.237 98.4683 472.188 99.521 471.42 100.757 cv
470.394 102.411 469.891 101.898 470.081 103.894 cv
470.151 104.646 470.54 105.343 470.648 106.131 cv
470.756 106.924 470.215 107.278 470.504 108.157 cv
470.706 108.763 471.593 109.289 471.764 109.789 cv
471.928 110.27 471.833 110.876 471.983 111.299 cv
472.484 112.706 472.585 113.647 474.511 113.997 cv
475.317 114.141 476.244 114.174 477.22 114.146 cv
477.617 117.884 477.997 121.623 478.361 125.364 cv
479.038 132.302 479.007 139.61 480.167 146.414 cv
481.262 152.851 482.014 158.896 482.07 165.47 cv
482.137 173.243 491.03 247.143 490.599 247.188 cv
491.497 247.093 492.124 246.841 492.543 246.47 cv
494.57 244.684 491.801 240.151 491.661 237.263 cv
491.429 232.466 492.016 227.547 491.33 222.857 cv
489.374 209.465 487.504 196.097 486.078 182.658 cv
483.652 159.79 481.224 136.922 478.798 114.054 cv
479.877 113.968 480.97 113.841 481.985 113.729 cv
482.242 113.894 482.563 114.067 482.978 114.271 cv
485.676 115.602 488.767 116.571 491.614 117.743 cv
493.606 118.563 495.411 119.558 497.339 120.498 cv
499.038 121.325 500.788 122.367 502.539 123.305 cv
502.554 123.64 li
504.033 127.149 507.239 127.745 510.582 128.296 cv
512.967 128.69 512.722 128.598 514.598 127.012 cv
516.419 125.473 518.463 123.824 518.636 122.177 cv
519.265 121.638 519.886 121.062 520.532 120.481 cv
522.759 118.482 525.129 117.758 527.962 117.143 cv
533.364 115.972 537.759 114.563 539.734 109.871 cv
542.543 111.086 544.255 113.938 546.123 116.189 cv
546.86 117.079 547.709 117.904 548.629 118.644 cv
548.552 118.703 li
547.442 120.221 548.167 124.458 548.802 126.056 cv
549.134 126.889 549.67 127.661 550.343 128.277 cv
550.338 129.41 550.338 130.535 550.392 131.658 cv
549.458 135.018 547.706 138.225 546.677 141.594 cv
545.075 146.835 543.845 152.217 541.191 157.065 cv
536.863 164.975 530.625 171.896 526.04 179.618 cv
523.026 184.692 521.419 188.751 520.315 194.517 cv
518.73 202.798 519.922 211.487 516.874 219.496 cv
516.665 220.049 516.488 220.562 516.34 221.046 cv
515.472 221.122 li
516.394 223.915 511.938 228.327 510.512 230.637 cv
509.413 232.42 508.61 235 506.991 236.343 cv
508.271 236.542 509.42 237.082 510.483 237.831 cv
507.159 241.923 504.542 246.604 497.473 246.214 cv
500.148 251.981 510.749 248.567 515.093 247.982 cv
516.053 247.853 517.735 247.845 519.633 247.766 cv
524.708 251.817 532.167 248.169 537.068 252.865 cv
539.423 255.121 540.677 258.572 543.56 260.411 cv
547.083 262.656 549.86 261.268 553.499 260.802 cv
557.908 260.239 560.351 261.802 564.081 263.699 cv
568.213 265.803 572.061 264.922 576.408 263.381 cv
581.487 261.58 585.424 260.901 590.73 262.455 cv
596.316 264.09 600.588 263.689 605.703 260.487 cv
610.328 257.591 614.045 256.823 619.6 257.402 cv
625.004 257.967 624.914 255.841 628.871 252.526 cv
632.047 249.865 636.943 251.472 639.865 248.842 cv
642.721 246.27 641.385 240.096 640.916 236.724 cv
cp
f
1167.71 548.471 mo
1165.27 526.308 1150.28 507.656 1132.56 495.185 cv
1132.58 495.164 1128.46 492.354 1122.75 489.24 cv
1117.05 486.129 1109.86 482.659 1104.47 479.853 cv
1093.45 474.665 1078.9 463.509 1079.09 463.311 cv
1071.21 456.39 1063.15 447.278 1064.05 436.417 cv
1064.9 425.404 1076.62 418.877 1087.02 418.458 cv
1092.37 418.133 1097.78 419.29 1102.63 421.629 cv
1107.35 423.928 1112.07 427.574 1113.18 432.835 cv
1114.12 437.941 1111.37 443.928 1106.3 445.675 cv
1101.35 447.9 1094.78 444.813 1094.5 439.108 cv
1093.98 439.166 li
1094.26 441.935 1095.82 444.745 1098.43 445.987 cv
1100.99 447.302 1104.04 447.231 1106.69 446.267 cv
1112.15 444.282 1115.09 437.895 1113.94 432.346 cv
1112.58 426.621 1107.55 422.87 1102.63 420.502 cv
1097.59 418.077 1091.91 416.924 1086.3 417.317 cv
1080.72 417.748 1075.14 419.444 1070.55 422.809 cv
1065.88 426.028 1062.65 431.508 1062.45 437.275 cv
1062.09 449.181 1070.77 458.435 1078.85 465.564 cv
1078.87 465.484 1087.99 474.404 1103.25 482.226 cv
1118.6 489.56 1132.08 496.634 1131.9 496.975 cv
1149.2 509.042 1164.1 527.213 1166.57 548.841 cv
1168.1 559.455 1166.28 570.472 1161.47 580.088 cv
1158.97 585.373 1155.38 589.904 1151.35 594.089 cv
1151.03 590.372 1150.65 586.691 1150.31 583.086 cv
1148.42 562.885 1141.59 540.395 1129.04 524.263 cv
1122.8 516.25 1116.5 510.535 1108.37 504.453 cv
1102.91 500.359 1098.52 496.341 1091.6 494.519 cv
1083.73 492.444 1066.58 495.353 1073.28 507.422 cv
1074.53 504.483 1075.86 499.492 1080.07 501.313 cv
1083.12 502.633 1084.02 508.338 1083.42 511.272 cv
1083.08 512.93 1082.36 514.3 1081.35 515.447 cv
1077.02 509.259 1068.56 505.659 1061.76 509.868 cv
1067.55 511.045 1069.7 516.658 1067.29 521.474 cv
1064.41 522.074 1061.58 522.597 1059.15 523.285 cv
1062.12 515.923 1059.96 507.397 1054.16 502.235 cv
1056.84 494.521 1061.99 489.009 1070.39 485.69 cv
1066.62 485.382 1061.31 484.936 1057.75 486.051 cv
1053.61 487.343 1046.9 492.529 1044.94 497.273 cv
1042.48 496.638 1039.9 496.543 1036.49 496.839 cv
1033.63 497.09 1029.82 497.228 1026.57 497.783 cv
1027.57 490.944 1030.53 485.566 1035.73 479.976 cv
1025.94 481.83 1016.79 491.505 1016.16 501.433 cv
1012.78 502.196 1009.32 504.731 1007.18 507.176 cv
1004.88 509.812 1004.41 513.473 1001.21 515.334 cv
1004.48 517.312 1002.78 518.628 1001.04 520.394 cv
1000.24 520.944 999.438 521.495 998.552 521.957 cv
997.005 522.763 994.415 522.743 993.108 523.781 cv
989.624 526.55 993.091 529.279 991.729 533.276 cv
991.047 535.276 986.227 539.019 989.78 541.306 cv
990.283 541.629 992.742 541.515 994.915 541.325 cv
994.389 545.999 998.293 546.175 999.171 550.478 cv
1001.91 548.309 998.545 544.614 1000.61 542.188 cv
1002.52 539.936 1006.73 542.755 1009.42 541.751 cv
1007.81 544.179 1009.54 546.247 1010.96 548.32 cv
1010.1 542.814 1013.31 542.768 1017.05 543.749 cv
1013.1 547.069 1008.7 550.195 1011.66 553.918 cv
1014.34 557.284 1014.51 554.557 1013.98 559.284 cv
1013.53 563.229 1015.62 564.986 1019.32 565.18 cv
1021.09 565.271 1023.62 563.841 1025.08 565.022 cv
1026.72 566.343 1025.48 569.819 1026.16 571.563 cv
1027.01 573.745 1029.32 576.166 1030.97 577.771 cv
1037.26 583.906 1042.85 588.439 1044.86 597.573 cv
1045.5 600.501 1045.79 604.124 1048.05 606.343 cv
1049.96 608.223 1052.79 608.955 1055.7 608.994 cv
1053.35 616.18 1049.6 623.062 1049.2 630.495 cv
1048.99 634.401 1049.81 637.978 1053.58 639.788 cv
1057.66 641.752 1063.75 641.464 1068.17 642.073 cv
1068.34 642.096 1068.51 642.121 1068.67 642.145 cv
1062.08 647.502 1044.34 646.399 1039.18 651.378 cv
1036.26 654.192 1035.25 660.811 1034.33 664.686 cv
1033.24 669.237 1036.6 675.208 1039.57 678.679 cv
1038.86 675.147 1042.42 674.585 1043.37 671.931 cv
1044.84 667.85 1041.87 664.955 1046.96 661.954 cv
1046.23 663.957 1047.83 667.741 1048.46 669.695 cv
1049.55 673.071 1051.08 675.707 1054.66 676.933 cv
1053.31 674.62 1055.54 672.126 1055.99 670.288 cv
1056.52 668.108 1057.86 659.2 1062.19 662.964 cv
1060.28 669.411 1065.59 673.212 1071.01 675.164 cv
1069.82 670.217 1067.22 668.029 1072.15 664.488 cv
1076.99 661.013 1083.72 658.431 1086.47 652.54 cv
1087.57 653.176 1089.3 654.237 1090.56 653.75 cv
1091.21 653.496 1091.71 653.186 1092.09 652.834 cv
1092.67 653.708 1093.13 654.646 1093.46 655.659 cv
1095.2 653.65 1097.16 651.675 1099.06 649.817 cv
1101.75 647.179 1104.06 646.245 1105.36 642.477 cv
1106.04 640.501 1105.77 638.117 1107.1 636.468 cv
1112.84 645.143 1110.52 654.602 1111.75 664.019 cv
1114.31 656.312 1117.48 649.268 1118.34 640.887 cv
1118.78 636.601 1118.38 622.928 1124.94 631.074 cv
1127.76 634.574 1128.72 641.111 1129.8 645.41 cv
1130.64 648.732 1131.98 652.475 1132.11 655.92 cv
1132.36 662.429 1131.73 669.243 1131.73 675.824 cv
1131.65 667.909 1136.01 660.556 1139.16 653.514 cv
1142.13 646.844 1145.56 640.001 1148.19 633.174 cv
1152.84 621.128 1152.52 607.853 1151.43 594.974 cv
1155.72 590.656 1159.59 585.942 1162.28 580.368 cv
1167.26 570.634 1169.21 559.343 1167.71 548.471 cv
cp
f
958.589 28.7959 mo
958.711 27.0674 958.854 25.3379 959.3 23.8027 cv
959.989 21.4346 963.29 20.6221 964.834 22.4902 cv
964.347 22.8789 963.885 23.2998 963.44 23.708 cv
963.053 24.0674 962.492 24.8965 962.041 25.166 cv
961.656 25.3955 960.419 25.5176 960.346 25.5713 cv
959.194 26.4082 958.784 26.7578 959.219 28.3486 cv
958.997 28.4707 958.789 28.625 958.589 28.7959 cv
cp
955.611 24.2188 mo
955.406 24.8203 955.289 26.0176 954.968 26.5596 cv
954.749 26.9287 953.928 27.5303 953.576 27.8105 cv
953.488 27.5908 953.4 27.3701 953.306 27.1465 cv
952.477 25.1924 951.029 23.1914 950.434 21.1846 cv
949.861 19.2568 952.082 17.2266 953.919 18.5371 cv
955.178 19.4375 955.338 21.0811 956.404 22.0869 cv
956.104 22.792 955.85 23.5176 955.611 24.2188 cv
cp
1022.09 196.555 mo
1020.31 195.218 1016.72 195.985 1015.19 194.142 cv
1014.09 192.827 1014.8 190.789 1013.11 189.369 cv
1011.91 188.368 1009.15 188.028 1007.31 187.063 cv
1008.9 185.027 1010.21 182.762 1011.14 180.271 cv
1013.28 174.602 1014.05 168.944 1011.87 163.19 cv
1010.47 159.499 1008.38 156.386 1007.91 152.369 cv
1007.33 147.443 1011.8 144.181 1007.68 139.815 cv
1006.3 138.352 1003.83 137.641 1002.99 135.629 cv
1002.46 134.327 1003.2 133.118 1002.82 131.827 cv
1002.38 130.326 1001.68 130.278 1000.61 129.229 cv
999.892 128.523 999.107 128.853 998.766 127.702 cv
998.433 126.585 999.665 124.978 999.271 123.528 cv
998.376 120.24 996.074 120.721 996.629 116.626 cv
996.877 114.8 997.666 114.24 996.365 112.547 cv
995.516 111.442 993.675 111.335 993.494 109.788 cv
993.346 108.515 995.096 107.735 994.625 106.226 cv
994.228 104.949 992.195 104.611 991.908 103.273 cv
991.558 101.631 993.306 100.672 993.516 99.1162 cv
993.777 97.1689 992.72 97.4775 992.238 95.959 cv
991.415 93.3633 992.334 94.2314 993.307 91.7646 cv
993.974 90.0703 993.397 89.4072 993.217 87.6563 cv
993.82 87.4023 994.432 87.1982 995.03 86.9941 cv
995.957 88.1016 997.199 88.9727 998.66 89.4863 cv
1002.16 90.7178 1003.39 90.3154 1005.5 93.6719 cv
1007.35 96.6289 1008.58 99.7666 1011.26 102.112 cv
1013.19 103.789 1016.67 105.052 1019.18 103.912 cv
1020.92 103.122 1022.75 100.807 1020.81 99.54 cv
1019.7 98.8174 1017.81 99.7256 1016.29 98.5322 cv
1014.13 96.834 1014.48 94.3643 1013.19 92.0313 cv
1015.29 95.626 1019.34 99.0781 1023.44 100.034 cv
1027.53 100.987 1029.69 98.9688 1028.38 96.8047 cv
1028.67 96.8955 li
1032.12 95.6367 1029.27 92.7305 1026.75 92.7617 cv
1025.81 92.7734 1024.6 93.0713 1024.04 93.6328 cv
1021.39 91.8057 1020.3 89.459 1021.12 85.9502 cv
1021.78 83.1602 1021.89 83.8145 1024.01 82.1152 cv
1026.04 80.4941 1025.4 78.8906 1026.12 76.6416 cv
1024.19 78.1338 1022.2 78.4863 1020.34 78.0928 cv
1021.25 77.0361 1021.74 75.377 1021.45 74.0908 cv
1020.68 75.5322 1019.07 75.9102 1017.54 76.0508 cv
1018.07 75.0928 1018.23 73.7754 1018.1 72.6074 cv
1017.48 73.5479 1016.53 74.1914 1015.52 74.6777 cv
1013.65 72.3789 1014.32 70.3301 1015.46 67.7822 cv
1014.56 68.1602 1012.99 69.2588 1012.07 70.4834 cv
1010.46 67.043 1010.33 63.5459 1012.76 62.542 cv
1005.15 61.3525 1004.44 70.0127 998.212 70.8223 cv
997.563 71.2695 li
994.486 69.9082 990.917 66.041 989.061 70.5361 cv
991.041 70.7969 993.463 71.3818 994.588 72.9023 cv
993.816 73.2051 993.066 73.5313 992.344 73.8848 cv
989.262 73.4814 986.402 74.2285 983.268 75.6436 cv
984.648 75.5957 986.049 75.9297 987.376 76.2529 cv
984.965 78.1904 981.855 78.7578 979.915 81.5967 cv
980.649 81.3643 981.367 81.6299 982.016 81.5479 cv
980.355 84.0059 977.999 85.4678 977.038 88.5332 cv
977.9 87.7998 978.987 87.2842 980.09 87.2441 cv
980.074 87.2861 980.055 87.3262 980.039 87.3691 cv
977.646 89.0498 975.983 92.3525 976.593 95.2461 cv
977.127 94.8496 977.695 94.5879 978.283 94.4111 cv
978.064 95.7598 977.898 97.0986 977.78 98.4277 cv
975.361 100.5 973.679 103.205 974.158 106.773 cv
975.201 106.096 976.336 105.767 977.521 105.561 cv
977.523 105.895 977.525 106.229 977.533 106.563 cv
975.96 108.105 974.915 110.055 974.237 112.191 cv
967.738 104.436 963.328 94.2031 963.328 94.2031 cv
956.951 77.1006 957.318 44.6748 957.521 36.5664 cv
958.771 34.5273 960.344 33.0195 961.882 31.0684 cv
963.182 29.4199 964.266 27.292 965.619 25.6387 cv
965.497 27.6064 964.855 29.5742 966.873 31.4453 cv
966.293 28.9023 967.804 26.5186 968.447 24.1084 cv
969.82 24.2139 971.104 25.2617 970.906 26.918 cv
970.619 29.333 967.791 30.4443 968.813 33.4639 cv
969.658 30.4404 973.571 29.4004 974.229 26.3711 cv
974.783 23.8027 971.553 21.1553 969.21 20.8906 cv
968.978 20.8643 968.753 20.8613 968.531 20.8701 cv
968.529 20.8633 968.529 20.8574 968.527 20.8516 cv
967.644 17.8223 962.715 16.875 960.088 17.9375 cv
958.602 18.541 957.637 19.6729 956.928 20.9844 cv
956.33 19.1797 956.355 17.0527 954.891 15.7803 cv
953.168 14.2842 949.8 15.6367 948.618 17.3105 cv
947.428 18.998 947.901 21.0625 948.353 22.8818 cv
948.464 23.3281 948.86 24.1016 948.878 24.5557 cv
948.892 24.9453 948.467 25.9395 948.477 26.0176 cv
948.634 27.2432 948.728 27.7021 950.121 28.0371 cv
950.123 29.4746 951.162 31.0586 952.163 32.0283 cv
953.36 32.4834 li
953.153 33.0469 953.024 33.6611 952.965 34.2949 cv
946.845 34.835 941.983 31.8281 941.983 31.8281 cv
922.665 3.83594 888.194 .384766 888.194 .384766 cv
913.029 27.3398 878.521 41.2266 878.521 41.2266 cv
878.521 41.2266 890.612 39.3457 895.255 52.7637 cv
899.897 66.1826 885.841 80.2686 885.841 80.2686 cv
895.457 78.4795 890.862 81.1895 908.95 88.3301 cv
927.036 95.4707 910.438 121.932 910.438 121.932 cv
923.591 100.85 941.708 103.352 955.717 105.92 cv
962.291 107.125 968.687 110.946 973.623 114.661 cv
972.896 118.507 973.068 122.657 973.331 126.016 cv
974.051 123.905 975.834 122.808 977.862 122.084 cv
975.283 125.181 975.223 134.71 976.617 138.092 cv
976.326 136.318 977.584 134.848 979.348 133.539 cv
979.373 133.938 979.396 134.338 979.418 134.736 cv
979.065 135.27 978.828 135.829 978.784 136.367 cv
978.734 136.975 979.049 137.526 979.389 138.03 cv
979.307 139.059 979.191 140.048 979.158 141.053 cv
978.607 141.413 977.916 141.663 977.293 142.113 cv
975.177 143.637 974.711 145.264 974.25 147.762 cv
975.137 146.614 977.064 146.673 979.139 147.011 cv
979.014 147.165 978.872 147.338 978.702 147.541 cv
976.955 149.642 975.113 151.233 973.666 153.673 cv
972.905 154.954 972.496 157.195 970.937 157.082 cv
969.646 156.989 968.104 154.351 966.811 153.774 cv
964.985 152.962 961.365 153.822 958.546 153.781 cv
959.535 152.073 960.129 149.94 960.202 148.695 cv
958.688 149.485 956.465 150.598 954.759 149.714 cv
954.768 149.669 954.781 149.617 954.791 149.57 cv
958.1 148.707 965.493 146.863 964.42 142.276 cv
963.039 144.854 960.247 144.305 957.914 143.591 cv
958.018 143.452 958.12 143.313 958.224 143.175 cv
961.986 142.543 966.032 141.415 966.105 136.886 cv
965.344 138.311 963.289 138.563 961.499 138.353 cv
961.627 138.104 961.746 137.854 961.852 137.601 cv
964.771 136.82 966.691 134.034 967.56 130.887 cv
966.474 132.318 964.837 132.289 963.208 132.14 cv
963.256 131.638 963.281 131.133 963.289 130.627 cv
966.112 128.566 968.504 125.296 965.071 122.407 cv
966.619 124.49 964.895 125.968 962.988 126.983 cv
962.829 126.133 962.605 125.302 962.314 124.498 cv
963.817 122.751 965.267 120.299 964.992 119.34 cv
964.109 116.255 961.561 118.718 959.459 119.366 cv
959.297 119.146 959.127 118.926 958.955 118.707 cv
959.988 117.057 960.961 114.929 959.874 113.208 cv
958.654 114.051 957.08 114.672 955.504 115.015 cv
955.107 114.658 954.697 114.315 954.281 113.982 cv
955.484 112.267 956.242 109.65 954.407 108.785 cv
953.77 110.431 952.463 111.393 950.752 111.619 cv
950.674 111.576 950.596 111.534 950.518 111.494 cv
952.592 109.331 950.577 105.922 947.501 106.37 cv
947.993 107.625 947.652 108.994 946.706 109.942 cv
946.206 108.377 940.836 105.154 939.536 106.759 cv
939.036 107.377 939.753 108.903 940.2 110.024 cv
939.729 110.169 939.263 110.353 938.803 110.569 cv
934.732 110.32 928.163 113.281 933.939 114.785 cv
933.866 114.896 933.797 115.008 933.727 115.119 cv
930.955 116.201 929.892 119.313 928.971 121.994 cv
929.652 121.157 930.643 120.685 931.693 120.479 cv
931.487 121.553 931.374 122.655 931.335 123.763 cv
930.972 125.466 930.786 127.203 930.702 128.884 cv
929.417 128.809 928.751 127.726 928.192 126.636 cv
927.135 131.174 932.196 134.539 934.183 137.95 cv
932.671 135.453 935.446 130.328 936.796 128.133 cv
933.233 131.02 933.181 128.69 933.89 125.138 cv
934.326 122.956 935.392 120.397 936.864 118.167 cv
940.544 114.634 945.69 112.961 950.296 115.779 cv
954.105 118.111 956.449 121.869 956.389 125.858 cv
955.518 127.852 955.436 131.217 953.552 132.515 cv
953.171 131.542 953.021 130.418 952.824 129.358 cv
952.326 132.28 951.137 135.694 950.029 138.46 cv
950.027 137.629 949.843 136.945 949.924 136.101 cv
948.835 137.813 947.53 140.412 947.554 142.702 cv
943.961 148.118 940.728 153.68 940.01 160.635 cv
938.876 171.614 943.269 181.459 952.245 187.512 cv
954.438 188.989 956.729 190.421 959.098 191.753 cv
958.902 191.928 958.699 192.101 958.482 192.268 cv
956.568 193.735 954.094 193.679 951.908 193.739 cv
949.504 193.806 947.503 193.854 945.552 195.628 cv
942.528 198.376 943.605 202.171 943.84 205.756 cv
944.2 203.824 948.726 202.535 949.618 200.457 cv
951.512 200.922 952.51 200.176 953.307 202.194 cv
954.221 204.503 952.348 206.547 953.96 209.069 cv
955.51 207.937 955.916 206.084 957.24 204.928 cv
959.048 203.35 958.58 203.673 959.837 205.554 cv
960.354 206.327 960.855 209.345 961.578 209.463 cv
963.433 209.767 964.289 206.277 964.854 205.116 cv
966.438 201.859 968.428 203.569 971.332 201.4 cv
973.387 199.864 972.637 200.365 971.809 198.475 cv
971.438 197.628 970.663 197.575 970.381 196.915 cv
971.45 197.285 972.526 197.625 973.609 197.924 cv
980.895 199.932 989.081 199.061 996.084 195.816 cv
997.496 196.914 999.795 196.663 1001.92 196.348 cv
1003.53 196.108 1003.41 195.466 1005.29 196.198 cv
1006.45 196.65 1007.3 197.854 1008.4 198.421 cv
1012.58 200.569 1021.43 195.326 1022.51 202.32 cv
1024.27 200.799 1023.85 197.872 1022.09 196.555 cv
cp
f
733.204 76.4277 mo
729.18 68.6104 723.586 61.8774 719.442 54.1001 cv
717.569 50.5879 717.267 46.7231 713.709 44.6641 cv
711.949 43.645 710.494 42.9102 708.824 42.582 cv
708.733 42.5049 708.642 42.4258 708.55 42.355 cv
708.526 42.3379 708.503 42.3242 708.48 42.3071 cv
709.34 41.7109 710.185 41.1064 711.002 40.4995 cv
711.987 39.7686 714.745 38.0518 714.498 36.6157 cv
711.555 37.7422 708.223 32.3896 706.172 35.9063 cv
705.803 36.5386 705.957 37.1416 705.315 37.6138 cv
704.581 38.1543 703.717 38.041 702.898 37.8857 cv
701.88 37.6938 701.084 37.2861 700.241 36.7256 cv
700.21 36.7041 700.183 36.6846 700.152 36.6641 cv
700.246 36.4941 700.328 36.2998 700.389 36.0381 cv
700.493 35.5947 700.297 35.1987 700.514 34.7729 cv
701.097 33.626 701.929 34.1626 703.033 33.5586 cv
704.205 32.918 704.931 31.0234 703.304 30.4297 cv
706.695 31.5166 709.719 33.1582 712.784 34.96 cv
713.854 33.0527 714.304 30.6157 713.626 28.4785 cv
713.039 26.6274 712.662 25.0752 711.299 23.625 cv
710.697 22.9854 709.572 22.2949 709.189 21.4932 cv
708.403 19.8398 710.252 18.1089 710.347 16.3887 cv
710.477 14.0518 708.963 10.729 706.439 10.2632 cv
707.898 13.0527 708.717 16.4688 704.441 17.4058 cv
703.699 17.5684 703.035 17.584 702.313 17.333 cv
701.702 17.1206 701.471 16.6265 701.121 16.2661 cv
700.944 15.7383 700.858 15.1641 700.896 14.4121 cv
700.993 12.5273 701.631 11.0425 702.871 9.59277 cv
703.526 8.82471 705.745 7.25684 705.335 6.01611 cv
704.953 4.85742 702.476 4.62305 701.559 4.57031 cv
698.601 4.40137 695.534 4.86426 692.77 5.89258 cv
690.379 6.78174 689.217 7.54297 688.439 10.0488 cv
687.821 12.0381 688.03 14.0742 688.428 16.0708 cv
687.238 15.6294 686.111 15.0698 684.904 14.6421 cv
681.166 13.3149 677.313 13.1206 673.783 15.3032 cv
675.378 15.918 676.531 16.4341 677.274 18.0898 cv
678.088 19.9028 677.604 21.6631 678.081 23.4766 cv
678.507 25.0962 680.208 25.4375 681.591 25.6821 cv
683.395 26.002 684.837 26.2671 686.313 27.0381 cv
686.032 27.6074 685.315 27.8809 685.06 28.4688 cv
684.096 30.6904 685.085 31.9673 686.539 32.8408 cv
686.085 33.2949 li
687.333 33.7222 688.208 34.4678 688.677 35.4995 cv
686.312 35.9292 683.473 36.1445 682.014 35.1362 cv
679.493 33.3931 680.03 29.3125 681.969 27.376 cv
678.205 27.9429 673.198 32.939 674.18 36.9399 cv
674.791 39.4351 676.544 41.5732 678.523 43.3687 cv
677.131 44.4043 675.518 45.228 674.229 45.4268 cv
672.89 45.6338 671.61 45.2715 670.292 45.6968 cv
668.784 46.1836 667.233 47.2998 666.279 48.5649 cv
664.472 50.9639 664.4 54.1245 664.771 56.9775 cv
665.167 60.0264 665.236 61.6758 664.096 64.606 cv
661.139 72.2026 655.314 79.1265 654.438 87.4453 cv
654.297 88.7905 654.477 90.2544 654.851 91.5522 cv
655.219 92.8223 656.374 94.3408 656.21 95.7188 cv
655.894 98.4019 651.585 98.4771 653.442 102.06 cv
653.852 102.851 654.804 103.306 654.281 104.268 cv
653.836 105.093 652.261 104.979 651.518 105.219 cv
648.474 106.207 649.029 107.979 650.797 109.799 cv
652.753 111.813 650.357 113.218 650.822 115.704 cv
650.962 116.448 651.455 117.345 651.957 117.898 cv
652.339 118.318 653.171 118.631 653.448 119.039 cv
654.188 120.124 652.739 121.278 653.037 122.582 cv
653.353 123.961 654.259 124.587 654.139 126.196 cv
653.901 129.343 652.118 133.067 654.406 135.801 cv
655.923 137.612 659.091 139.611 661.605 139.397 cv
664.757 139.13 667.597 135.383 669.245 132.916 cv
669.068 132.698 668.873 132.559 668.665 132.465 cv
668.128 131.277 665.838 127.59 664.381 128.551 cv
664.214 128.661 664.13 128.857 664.105 129.11 cv
664.098 129.101 664.092 129.09 664.085 129.081 cv
663.058 127.64 661.995 125.823 662.288 123.935 cv
662.521 122.433 663.331 120.775 663.747 119.286 cv
663.934 118.623 664.104 117.85 664.457 117.324 cv
666.199 118.512 665.28 122.462 666.248 124.25 cv
666.484 124.685 666.82 125.055 667.175 125.406 cv
667.326 126.171 667.465 126.91 667.575 127.605 cv
668.004 130.311 668.388 131.59 669.327 132.664 cv
670.122 136.849 672.216 141.058 673.699 144.772 cv
673.996 145.519 673.934 146.59 674.128 147.419 cv
673.734 148.654 673.43 149.943 673.692 151.364 cv
673.949 152.752 674.816 154.035 674.484 155.513 cv
674.174 156.898 672.571 158.041 672.307 159.644 cv
672.105 160.865 673.05 162.249 672.816 163.226 cv
672.584 164.205 671.429 164.934 670.945 166.183 cv
669.73 169.316 671.162 172.87 672.261 175.688 cv
673.329 178.435 672.299 180.711 672.928 183.563 cv
673.662 186.897 674.875 187.953 674.043 191.394 cv
672.315 198.544 668.155 202.832 662.332 207.046 cv
660.816 208.143 657.959 208.769 657.188 210.353 cv
661.116 214.163 667.745 209.313 671.217 207.376 cv
671.688 207.115 672.831 206.166 673.417 206.201 cv
674.445 206.262 675.082 207.53 675.118 207.535 cv
680.253 208.189 679.302 197.504 679.822 194.426 cv
680.715 189.143 683.616 182.885 683.64 177.496 cv
683.654 174.01 684.78 170.693 684.72 167.141 cv
684.662 163.671 682.826 161.869 681.684 158.811 cv
680.252 154.98 683.187 153.466 683.886 150.062 cv
684.383 147.64 684.077 145.15 683.887 142.629 cv
687.346 144.584 690.996 146.187 695.274 147.195 cv
695.395 147.583 695.524 147.971 695.667 148.359 cv
696.282 150.032 696.746 150.849 696.846 152.398 cv
697.002 154.832 696.342 156.896 697.459 159.388 cv
698.088 160.793 699.785 162.002 700.148 163.489 cv
700.634 165.467 699.543 167.57 699.318 169.572 cv
699.129 171.259 699.38 172.761 698.78 173.993 cv
698.683 174.191 697.525 173.942 697.162 174.719 cv
696.784 175.529 697.286 176.763 697.396 177.563 cv
697.835 180.721 699.374 183.091 700.09 185.816 cv
700.507 187.404 699.734 188.974 699.87 190.56 cv
700.041 192.567 701.054 194.211 701.736 196.085 cv
703.966 202.2 703.057 208.434 704.003 214.816 cv
704.391 217.428 704.474 220.579 707.813 218.634 cv
709.943 221.991 713.806 224.364 717.726 223.909 cv
721.743 223.444 720.02 220.505 718.062 217.779 cv
715.182 213.768 711.225 210.986 711.781 205.6 cv
712.214 201.393 711.54 197.543 711.644 193.276 cv
711.707 190.661 712.437 188.129 712.559 185.54 cv
712.681 182.929 711.579 180.921 711.16 178.389 cv
710.784 176.114 710.772 173.624 710.058 171.411 cv
709.485 169.637 709.172 169.489 708.082 167.854 cv
704.947 163.152 706.489 159.843 707.523 154.953 cv
707.927 153.042 707.979 151.057 708.065 149.069 cv
708.312 149.061 708.556 149.046 708.801 149.028 cv
708.826 154.536 706.165 161.232 710.691 165.101 cv
713.061 167.127 712.679 166.788 713.104 170.13 cv
713.587 173.941 715.885 173.08 717.794 175.703 cv
719.021 177.391 718.459 180.441 719.227 182.783 cv
720.311 186.09 723.168 188.505 724.12 191.806 cv
727.209 186.873 729.81 182.448 729.912 176.455 cv
729.981 172.382 727.68 167.889 729.134 163.999 cv
730.045 161.561 731.959 159.929 732.674 157.377 cv
733.44 154.641 733.219 151.709 733.219 148.891 cv
733.218 144.109 732.592 139.55 731.902 134.851 cv
730.125 122.736 734.114 112.645 736.532 100.931 cv
738.31 92.3198 737.249 84.2827 733.204 76.4277 cv
cp
f
886.287 601.198 mo
885.703 599.962 885.401 598.641 885.769 597.178 cv
886.405 594.643 888.553 592.171 890.968 589.709 cv
890.973 589.958 890.98 590.207 890.982 590.456 cv
891.036 596.084 891.017 599.587 891.986 603.892 cv
890.232 602.836 888.235 601.983 886.287 601.198 cv
cp
959.927 493.921 mo
957.953 489.798 954.002 484.793 950.184 482.085 cv
948.313 480.759 946 480.188 944.295 478.573 cv
942.006 476.403 939.715 472.939 937.772 470.37 cv
931.997 462.731 927.756 452.864 919.665 447.251 cv
918.041 446.124 916.727 445.298 915.482 445.043 cv
915.068 443.8 914.25 442.574 913.126 441.322 cv
912.027 440.101 910.171 439.19 908.732 438.06 cv
908.16 436.174 907.341 434.188 906.547 432.097 cv
906.051 430.79 905.689 429.462 905.409 428.123 cv
905.452 427.789 905.435 427.438 905.335 427.057 cv
907.556 427.066 908.365 429.235 909.572 430.528 cv
911.084 428.016 908.416 426.391 909.01 424.118 cv
912.049 425.283 915.897 427.616 919.32 424.987 cv
921.373 423.412 921.736 419.835 919.931 418.039 cv
921.233 420.112 920.502 423.014 918.055 423.821 cv
915.35 424.715 912.81 422.374 911.375 420.449 cv
906.85 414.378 904.404 404.918 899.486 398.32 cv
897.451 394.86 894.674 392.063 890.465 390.889 cv
886.748 389.853 882.706 389.926 878.9 390.288 cv
874.436 390.712 870.326 391.775 866.112 393.285 cv
864.365 393.91 862.068 394.479 859.963 395.306 cv
853.921 395.433 847.969 397.418 843.984 401.457 cv
841.325 404.153 841.408 409.97 840.971 413.503 cv
840.469 417.564 843.666 421.526 842.174 425.547 cv
840.832 429.164 832.664 429.959 833.066 424.966 cv
833.309 421.943 838.518 420.32 838.648 424.299 cv
840.058 420.509 834.463 419.864 832.207 421.463 cv
828.969 423.76 829.369 429.313 833.533 430.258 cv
831.434 430.527 829.315 429.897 828.639 427.717 cv
825.557 429.645 832.047 432.512 833.681 432.898 cv
837.044 433.694 840.432 433.178 843.634 431.66 cv
847.191 429.975 849.388 427.848 849.514 423.8 cv
849.563 422.208 848.764 420.603 848.916 419.093 cv
849.005 418.194 849.289 417.381 849.705 416.641 cv
850.924 419.571 853.734 421.749 854.505 424.981 cv
855.508 429.19 855.661 436.988 853.954 441.027 cv
853.432 442.263 851.039 444.316 851.005 445.605 cv
850.861 450.891 860.113 448.263 860.413 443.472 cv
862.034 443.427 861.384 444.531 862.21 445.44 cv
862.344 445.587 863.732 447.335 863.815 447.479 cv
865.567 450.499 864.305 449.258 862.414 452.263 cv
864.145 452.847 866.465 452.919 867.604 451.158 cv
866.909 452.229 866.039 452.964 864.795 452.932 cv
864.896 456.011 871.033 454.243 870.13 457.481 cv
870.084 457.646 873.727 456.407 874.063 456.203 cv
875.475 455.344 876.65 454.031 877.651 452.736 cv
879.391 450.487 879.585 448.084 882.416 447.157 cv
884.869 446.354 888.891 446.665 891.24 447.706 cv
892.67 448.34 893.149 449.491 893.709 450.601 cv
891.654 451.307 890.342 452.79 891.236 455.178 cv
889.391 457.447 886.43 462.142 887.979 464.914 cv
888.49 465.832 889.583 466.408 890.859 466.831 cv
890.223 471.129 889.195 475.213 888.983 479.696 cv
888.723 485.222 889.431 490.61 891.166 495.867 cv
893.584 503.194 893.091 509.814 893.557 517.259 cv
894.461 515.561 895.724 514.098 896.813 512.514 cv
896.284 514.621 895.619 516.775 894.959 519.088 cv
894.068 522.208 893.367 526.688 894.062 529.927 cv
894.352 531.275 895.556 532.221 895.842 533.3 cv
896.378 535.321 894.717 538.052 894.67 540.751 cv
894.652 541.779 895.072 543.11 895.047 544.069 cv
893.229 547.835 890.588 551.618 893.553 555.367 cv
893.629 555.463 893.715 555.554 893.795 555.647 cv
891.849 559.382 889.541 565.785 893.421 567.061 cv
893.139 568.692 892.663 570.398 892.193 572.095 cv
886.883 577.264 880.602 581.289 879.485 587.635 cv
879.218 589.152 877.665 602.327 877.804 602.851 cv
878.889 606.954 885.229 608.26 889.245 611.113 cv
890.432 609.636 890.381 608.271 889.801 606.914 cv
890.85 607.317 891.921 607.547 892.983 607.527 cv
893.103 607.901 893.226 608.28 893.359 608.673 cv
895.494 614.938 895.024 619.271 894.156 625.364 cv
892.6 636.294 896.018 647.753 896.979 658.634 cv
897.332 662.633 895.863 666.663 896.164 670.277 cv
896.448 673.702 898.273 676.043 900.931 677.596 cv
901.037 682.046 900.125 686.285 899.888 690.993 cv
899.653 695.632 901.706 698.802 903.659 702.271 cv
899.197 703.615 895.557 705.726 894.797 709 cv
894.187 711.628 900.152 721.53 901.161 724.196 cv
903.309 729.87 906.433 737.226 909.017 744.962 cv
909.886 755.688 910.697 766.433 910.98 777.396 cv
907.731 786.125 898.995 795.384 892.457 798.847 cv
890.709 799.772 888.817 800.925 886.923 801.454 cv
884.123 802.236 877.793 800.652 875.781 802.511 cv
870.387 807.497 877.157 810.93 881.475 811.344 cv
888.443 812.011 896.606 810.188 902.963 807.636 cv
909.771 804.902 913.563 799.582 920.822 804.534 cv
922.718 805.827 920.874 807.083 924.129 808.254 cv
926.09 808.959 931.445 808.245 933.289 807.498 cv
935.469 806.615 936.842 806.933 937.613 804.558 cv
938.196 802.759 937.463 799.752 936.586 796.699 cv
942.955 793.026 945.783 786.508 946.602 779.386 cv
952.266 782.128 955.348 771.947 949.479 770.672 cv
944.326 769.553 940.311 779.837 946.253 778.592 cv
946.253 779.21 li
946.318 779.246 946.38 779.272 946.444 779.306 cv
945.029 784.838 940.425 788.739 935.053 791.167 cv
934.877 790.382 934.753 789.656 934.714 789.022 cv
934.318 782.688 933.877 774.861 934.648 768.553 cv
935.245 763.674 935.293 758.733 935.24 753.737 cv
935.924 750.986 937.191 748.346 937.641 745.699 cv
938.086 743.069 936.58 739.399 937.126 737.153 cv
937.865 734.114 945.207 728.161 939.584 725.91 cv
943.955 724.938 948.842 707.842 949.88 703.322 cv
945.911 701.057 941.326 700.174 936.666 700.071 cv
934.527 692.347 931.096 685.292 930.263 677.41 cv
933.066 675.887 933.238 673.84 936.317 669.966 cv
938.938 666.67 942.713 668.224 942.563 662.405 cv
942.461 658.385 939.057 655.63 938.674 651.877 cv
938.123 646.474 941.893 646.135 944.025 642.303 cv
949.498 632.47 941.97 620.525 946.349 610.292 cv
949.373 603.222 954.033 599.209 953.688 590.302 cv
953.295 580.207 946.111 572.851 938.145 567.272 cv
940.832 566.172 944.141 564.486 944.121 562.364 cv
944.114 561.643 942.164 561.363 941.689 560.666 cv
940.865 559.452 939.894 558.099 939.062 556.672 cv
942.628 554.247 944.177 550.128 946.213 546.408 cv
948.232 542.719 949.096 539.615 949.488 536.342 cv
951.197 534.399 952.686 532.286 953.288 530.164 cv
954.512 525.854 953.229 519.575 952.688 515.201 cv
952.212 511.355 951.521 507.487 950.035 503.891 cv
949.185 501.834 948.064 499.877 946.997 497.903 cv
951.074 495.687 955.075 493.547 959.927 493.921 cv
cp
f
703.781 645.67 mo
703.521 645.884 703.274 646.104 703.02 646.32 cv
698.606 643.675 694.4 640.659 689.951 636.5 cv
688.971 635.583 687.349 634.196 685.57 633.037 cv
683.901 627.711 678.702 624.406 677.537 619.506 cv
677.058 617.489 678.564 613.897 679.576 610.381 cv
682.206 609.147 684.858 607.722 687.595 606.104 cv
694.705 601.903 702.595 597.792 710.527 595.317 cv
716.12 593.573 722.026 593.855 727.683 593.231 cv
727.2 595.07 727.296 596.803 727.054 599.428 cv
726.738 602.828 723.57 608.063 724.226 611.13 cv
725.284 616.088 729.491 616.5 733.346 615.265 cv
729.629 628.896 715.127 636.324 703.781 645.67 cv
cp
665.604 614.849 mo
665.62 614.845 665.634 614.843 665.648 614.839 cv
665.64 614.845 665.632 614.851 665.623 614.856 cv
665.617 614.854 665.61 614.851 665.604 614.849 cv
cp
668.523 787.135 mo
662.989 789.21 653.65 788.74 652.589 793.918 cv
644.6 796.652 637.388 802.015 629.558 805.255 cv
625.722 806.844 621.439 808.879 617.331 810.023 cv
614.794 808.243 611.827 807.122 609.647 804.054 cv
607.02 800.356 605.413 796.109 602.965 792.363 cv
602.701 791.958 602.441 791.574 602.188 791.213 cv
602.927 791.078 603.687 790.937 604.47 790.812 cv
616.36 788.907 628.759 788.467 640.576 785.998 cv
643.836 785.686 647.304 784.841 649.986 784.377 cv
655.418 783.436 660.892 783.369 666.359 782.76 cv
670.594 782.289 674.61 781.34 678.522 780.089 cv
679.156 780.704 679.81 781.31 680.48 781.905 cv
676.545 783.785 672.585 785.614 668.523 787.135 cv
cp
851.08 591.031 mo
847.335 588.569 li
844.559 583.456 841.621 578.206 839.529 573.018 cv
848.429 567.33 855.508 562.97 855.395 562.796 cv
857.828 561.188 857.695 560.797 857.695 560.797 cv
857.42 560.478 854.897 562.008 854.897 562.008 cv
855.027 562.221 848.17 565.745 838.812 571.136 cv
838.678 570.769 838.549 570.401 838.427 570.035 cv
838.975 569.18 839.466 568.279 839.751 567.443 cv
840.86 564.686 841.145 559.953 841.164 559.965 cv
841.228 559.519 840.85 559.39 840.85 559.39 cv
840.446 559.278 840.272 559.698 840.272 559.698 cv
840.248 559.685 838.384 563.216 837.165 566.403 cv
836.822 567.354 836.469 568.348 836.135 569.274 cv
836.143 569.18 836.147 569.085 836.15 568.996 cv
836.204 567.228 835.229 564.353 835.229 564.353 cv
835.166 564.076 834.764 564.067 834.764 564.067 cv
834.347 564.073 834.298 564.353 834.298 564.353 cv
834.298 564.353 833.552 566.379 833.393 568.41 cv
833.377 568.429 833.372 568.444 833.372 568.444 cv
833.38 568.418 832.587 569.759 832.771 571.096 cv
832.677 571.013 832.582 570.937 832.486 570.871 cv
832.26 570.282 832.016 569.711 831.762 569.242 cv
830.798 567.447 828.309 565.057 828.309 565.057 cv
828.097 564.811 827.741 565 827.741 565 cv
827.384 565.214 827.501 565.518 827.501 565.518 cv
827.501 565.518 828.084 568.251 829.249 570.449 cv
829.186 570.532 829.144 570.613 829.144 570.613 cv
828.96 570.988 829.085 571.109 829.085 571.109 cv
829.093 571.116 829.917 572.537 831.009 573.228 cv
831.149 573.316 831.3 573.392 831.458 573.454 cv
832.053 574.1 832.548 574.556 832.721 574.71 cv
826.545 578.404 819.794 582.675 813.46 587.199 cv
805.986 592.65 798.754 599.153 793.152 605.323 cv
790.681 602.218 788.228 599.127 785.542 596.151 cv
783.481 593.873 782.544 591.574 781.999 589.174 cv
783.074 587.601 783.801 585.745 784.041 583.513 cv
784.533 578.945 781.311 574.196 781.877 570.065 cv
782.557 565.096 789.237 561.351 789.795 556.39 cv
790.2 552.816 787.714 549.125 783.986 551.169 cv
784.524 546.634 798.687 546.813 802.844 545.247 cv
808.49 543.115 814.018 540.063 819.604 538.09 cv
811.809 539.028 803.667 539.972 795.484 540.349 cv
788.22 540.68 777.386 542.31 773.382 534.833 cv
771.161 530.682 772.63 526.403 773.266 522.092 cv
774.435 514.186 772.29 512.713 767.299 507.125 cv
761.25 500.354 766.377 492.196 762.262 484.857 cv
759.105 479.227 753.09 477.646 748.46 474.103 cv
744.268 470.895 741.488 469.58 735.936 472.582 cv
730.453 475.548 725.48 479.733 720.123 482.867 cv
715.781 485.409 706.218 487.559 704.096 492.711 cv
702.367 496.911 707.062 499.539 709.394 503.004 cv
709.666 503.408 709.75 503.854 709.773 504.282 cv
709.771 504.441 709.771 504.602 709.759 504.759 cv
709.503 508.421 706.344 510.908 705.386 514.25 cv
704.482 517.399 705.342 519.511 707.021 522.196 cv
709.167 525.629 710.249 527.87 711.622 531.79 cv
711.617 531.555 711.605 531.32 711.598 531.086 cv
711.837 533.153 711.775 535.221 711.338 537.213 cv
711.268 537.201 711.202 537.184 711.128 537.175 cv
710.192 538.111 li
704.28 536.893 702.384 544.867 707.376 547.003 cv
713.669 549.696 717.248 540.506 713.045 537.837 cv
716.572 530.884 712.736 521.423 713.799 513.291 cv
715.159 511.296 716.809 509.271 717.586 507.114 cv
719.126 502.853 716.841 499.196 716.524 495.257 cv
716.88 494.867 717.508 494.415 718.618 493.749 cv
720.788 492.445 723.61 491.988 726.106 491.772 cv
727.043 490.369 li
735.178 489.281 731.684 494.815 729.043 498.455 cv
724.746 504.377 728.896 503.49 732.24 508.375 cv
734.695 511.966 732.925 516.354 731.246 519.868 cv
730.79 520.819 732.017 520.918 731.263 522.104 cv
730.778 522.866 729.342 522.529 728.905 523.252 cv
728.542 523.852 727.413 524.296 727.008 524.982 cv
726.54 525.768 727.503 527.462 727.065 528.283 cv
726.178 529.949 723.996 530.749 723.288 532.121 cv
722.346 533.95 722.498 535.376 721.425 537.175 cv
720.127 539.35 718.878 537.99 718.725 541.387 cv
718.641 543.199 720.626 545.227 720.5 546.993 cv
719.958 554.647 700.522 557.736 694.312 559.174 cv
690.032 560.163 685.636 560.725 681.364 561.514 cv
696.239 563.892 711.834 563.676 725.463 557.726 cv
718.948 565.868 703.69 569.721 707.921 582.976 cv
714.85 583.272 720.171 577.445 726.552 575.556 cv
725.12 578.824 726.078 584.41 722.363 586.343 cv
719.403 587.884 714.308 584.879 718.465 582.931 cv
713.55 580.761 712.352 586.971 715.925 589.7 cv
711.565 590.693 707.178 591.985 702.462 593.57 cv
694.704 596.179 687.645 600.748 680.315 604.453 cv
679.987 602.583 678.79 601.18 675.986 600.731 cv
674.593 603.145 673.414 605.698 672 608.061 cv
670.932 608.433 669.854 608.779 668.759 609.068 cv
664.922 610.082 659.79 610.312 654.558 609.799 cv
654.316 609.664 654.073 609.537 653.833 609.396 cv
650.221 607.251 646.006 601.661 642.197 601.52 cv
641.495 604.156 642.38 606.171 644.005 607.684 cv
640.681 606.625 637.688 605.227 635.45 603.478 cv
626.093 596.169 637.181 582.999 629.743 575.274 cv
626.073 571.474 604.449 578.121 605.069 580.181 cv
607.28 587.538 610.204 595.638 610.024 603.516 cv
623.206 607.211 636.585 612.486 650.13 614.659 cv
651.426 616.691 653.044 618.762 653.849 620.249 cv
656.263 624.709 654.995 625.367 660.302 627.903 cv
665.537 630.408 671.825 631.501 676.813 634.927 cv
676.774 635.244 676.743 635.577 676.727 635.94 cv
676.635 638.008 684.047 645.509 685.222 647.087 cv
687.104 649.611 689.897 653.824 693.062 656.962 cv
689.298 661.81 685.964 666.97 682.438 672.066 cv
675.687 681.83 668.831 693.529 665.362 704.949 cv
664.104 709.092 664.271 719.213 661.514 722.526 cv
658.437 726.223 654.775 719.054 653.569 728.122 cv
652.389 737.01 656.085 740.931 659.208 748.797 cv
660.434 751.882 661.277 754.528 662.283 757.104 cv
660.971 757.585 659.656 758.029 658.574 758.522 cv
652.609 761.247 646.746 764.391 640.603 766.692 cv
636.028 768.407 628.311 768.018 627.433 772.299 cv
620.829 774.559 614.868 778.99 608.397 781.667 cv
605.227 782.979 601.688 784.665 598.291 785.608 cv
596.195 784.137 593.742 783.212 591.94 780.674 cv
589.769 777.619 588.441 774.11 586.417 771.012 cv
583.983 767.288 582.123 765.588 579.765 769.475 cv
575.591 776.352 583.695 790.048 590.381 792.856 cv
594.352 791.635 li
590.724 800.24 600.021 815.541 607.761 818.792 cv
613.463 817.037 li
616.537 818.148 620.396 817.023 624.807 816.316 cv
639.192 814.013 654.192 813.482 668.491 810.496 cv
672.434 810.116 676.63 809.093 679.875 808.531 cv
686.447 807.395 693.069 807.311 699.686 806.577 cv
707.573 805.699 714.841 803.456 721.977 800.597 cv
737.734 803.014 754.297 801.629 770.52 798.376 cv
787.168 795.037 801.329 790.135 814.118 779.147 cv
825.93 769.004 833.432 755.871 836.25 740.434 cv
841.721 710.467 838.702 677.051 824.388 649.992 cv
816.53 635.139 807.419 622.755 796.762 609.806 cv
795.985 608.862 795.224 607.917 794.466 606.969 cv
800.645 600.701 808.394 594.358 814.768 589.702 cv
820.159 585.707 827.032 581.104 833.585 576.846 cv
833.619 577.701 833.577 578.571 833.476 579.448 cv
833.162 579.244 li
832.76 584.992 828.349 590.398 825.619 595.251 cv
822.377 601.021 820.619 607.467 818.072 613.572 cv
816.896 616.394 814.756 618.945 815.313 622.121 cv
816.257 627.489 824.535 632.745 828.78 635.024 cv
835.399 638.581 846.568 639.75 853.976 638.22 cv
859.672 637.043 860.069 635.785 861.089 630.57 cv
864.187 614.724 856.773 604.996 851.08 591.031 cv
cp
f
.952148 618.322 mo
-1.63428 615.436 1.53125 614.065 4.68018 613.683 cv
2.75928 613.504 .94043 613.006 1.06494 611.642 cv
1.32959 608.739 7.24902 610.255 8.80566 610.604 cv
6.82617 610.068 2.48047 609.548 3.20068 606.66 cv
3.86279 604.002 6.8877 604.964 8.69873 605.321 cv
10.8203 605.739 13.9697 607.234 15.8887 607.077 cv
17.9185 606.911 19.5435 604.98 21.8862 604.733 cv
23.8345 604.527 25.6309 605.603 27.3711 604.615 cv
28.9419 603.725 30.1738 600.778 31.7026 599.519 cv
31.7568 599.474 31.8164 599.425 31.8745 599.377 cv
31.5225 599.095 31.1558 598.802 30.7734 598.485 cv
33.8599 594.58 38.9077 591.883 43.1191 589.034 cv
49.2681 584.875 52.9619 580.104 57.3525 574.264 cv
60.894 569.554 60.5264 560.417 67.8188 559.801 cv
71.2002 559.515 74.1299 560.706 77.3516 559.125 cv
78.4731 558.575 79.3828 557.751 80.3745 557.019 cv
79.375 555.605 79.7041 552.532 78.8179 551.492 cv
76.6499 548.945 72.2563 552.624 71.8081 555.131 cv
71.646 552.082 70.7759 550.164 71.4878 546.985 cv
69.7012 546.732 67.4614 547.652 67.2036 549.612 cv
66.7085 548.467 66.396 545.194 65.1396 545.006 cv
63.5542 544.766 62.3994 547.199 62.2959 548.374 cv
62.1143 546.441 60.896 545.335 59.4839 546.76 cv
58.5186 544.215 60.7632 541.188 61.2495 538.705 cv
60.5996 539.087 59.6152 539.092 58.9536 539.494 cv
58.3394 537.787 59.7632 536.861 60.0854 535.261 cv
59.2202 535.372 58.2876 535.111 57.4165 535.481 cv
59.0527 534.296 61.1284 533.481 62.0459 531.507 cv
60.833 530.973 59.2612 530.724 58.2017 530 cv
59.2041 529.054 60.6733 528.754 61.375 527.51 cv
60.1538 526.563 58.6289 526.439 57.1104 526.617 cv
58.7427 526.258 60.3359 525.743 61.9512 525.318 cv
61.1401 524.17 59.5073 523.543 58.0601 524.011 cv
59.481 523.148 61.0547 522.55 62.4795 521.675 cv
61.959 521.57 61.2632 521.065 60.543 521.014 cv
61.1138 520.802 61.5928 520.347 62.1631 520.136 cv
61.2954 520.123 60.4189 519.771 59.5527 519.765 cv
62.5376 517.266 65.0786 517.83 68.6631 517.997 cv
71.6011 518.131 73.394 517.468 75.8677 516.828 cv
77.9907 516.277 81.0786 517.1 82.4946 516.066 cv
84.749 514.421 84.5376 512.462 87.7368 511.14 cv
97.752 507.002 111.607 509.446 119.785 516.144 cv
120.708 518.298 li
126.382 519.312 127.801 523.334 130.482 527.524 cv
131.907 529.75 135.782 533.34 138.184 529.153 cv
137.846 531.525 135.594 532.815 133.741 534.112 cv
134.412 536.453 132.252 539.788 133.295 541.454 cv
134.264 543.005 140.401 544.436 142.061 544.979 cv
146.333 546.381 147.252 547.396 148.696 551.529 cv
149.854 554.844 151.592 556.775 153.509 559.602 cv
149.445 561.773 144.905 557.329 141.913 555.204 cv
138.89 553.059 135.083 553.781 132.065 551.614 cv
132 553.411 133.836 556.504 135.124 557.732 cv
133.925 562.518 125.643 553.633 122.354 554.582 cv
124.067 556.086 125.162 558.143 126.561 559.5 cv
127.216 560.138 129.462 560.279 129.357 561.662 cv
129.198 563.753 126.43 562.171 125.691 562.955 cv
123.791 564.968 127.798 568.654 127.55 570.896 cv
127.067 575.245 122.663 570.365 120.403 569.052 cv
117.064 567.112 117.796 568.689 115.667 570.104 cv
118.076 572.463 122.064 574.181 124.492 575.135 cv
126.657 575.981 129.165 576.017 131.218 577.104 cv
134.262 578.71 135.668 581.463 137.546 584.022 cv
132.483 580.852 127.926 581.242 122.596 580.173 cv
123.369 580.977 124.011 581.997 124.782 583.5 cv
127.506 588.815 129.088 594.388 129.328 600.438 cv
129.353 601.075 129.348 601.716 129.325 602.354 cv
133.539 601.027 135.835 598.237 136.942 594.3 cv
138.072 590.277 140.182 590.135 143.33 588.138 cv
144.672 587.285 145.918 586.343 146.884 585.095 cv
147.619 584.146 148.25 581.807 149.156 581.25 cv
153.507 578.569 151.959 584.585 151.42 586.42 cv
152.483 586.731 153.833 586.577 155.195 586.446 cv
155.651 585.417 156.061 584.374 156.215 583.235 cv
156.479 581.288 155.747 579.229 156.47 577.328 cv
158.591 578.647 158.829 576.725 160.504 576.75 cv
160.645 576.751 160.778 576.768 160.908 576.791 cv
161.774 575.627 162.422 574.331 162.878 572.968 cv
162.029 567.986 158.74 564.127 161.301 558.826 cv
162.81 555.701 165.771 551.309 160.586 549.337 cv
165.757 551.004 173.184 554.406 173.878 560.657 cv
174.398 565.329 169.556 569.866 166.45 571.62 cv
173.748 567.13 171.425 556.979 164.951 553.332 cv
167.849 554.964 163.954 558.479 163.284 560.071 cv
162.068 562.966 162.559 567.019 163.545 570.153 cv
163.701 569.097 163.766 568.023 163.743 566.961 cv
168.399 567.822 163.946 575.322 163.07 578.002 cv
163.292 578.158 163.518 578.3 163.757 578.404 cv
164.61 578.775 166.988 578.787 167.593 579.27 cv
169.513 580.798 167.635 580.467 166.893 581.467 cv
166.305 582.256 165.772 583.128 165.278 584.047 cv
165.506 585.545 165.693 587.084 165.418 587.939 cv
165.028 589.157 163.927 589.726 162.858 589.689 cv
162.003 592.1 161.26 594.592 160.502 596.934 cv
161.502 597.381 162.296 597.839 162.609 598.321 cv
164.725 601.569 161.387 602.44 158.217 602.338 cv
160.088 602.807 161.811 603.576 161.479 604.906 cv
160.772 607.733 155.155 605.333 153.669 604.749 cv
155.544 605.58 159.759 606.76 158.608 609.503 cv
157.696 611.673 155.47 610.938 153.76 610.287 cv
152.382 614.5 152.191 617.177 146.836 614.163 cv
142.438 611.688 146.163 610.213 148.345 607.803 cv
147.544 607.456 146.782 607.199 146.132 607.152 cv
144.101 607.007 142.199 608.665 139.846 608.554 cv
137.89 608.459 136.279 607.122 134.407 607.832 cv
132.719 608.471 131.051 611.195 129.348 612.207 cv
129.155 612.321 128.944 612.447 128.718 612.577 cv
128.763 613.34 128.85 614.096 129.005 614.843 cv
130.722 623.08 131.413 630.974 131.097 639.398 cv
130.865 645.607 131.742 651.882 127.676 656.806 cv
127.665 660.234 127.206 663.647 126.588 665.645 cv
125.123 670.378 123.054 670.429 124.114 675.751 cv
125.131 680.861 124.337 686.168 123.161 691.126 cv
122.346 694.567 122.136 697.839 122.463 701.365 cv
123.017 707.363 122.593 711.817 126.425 716.871 cv
129.226 720.563 130.203 725.062 133.74 728.368 cv
135.559 730.065 137.793 731.183 139.844 732.501 cv
141.319 733.448 145.344 734.858 146.257 736.216 cv
148.916 740.173 140.8 738.566 138.53 737.972 cv
133.986 736.78 129.452 735.161 126.082 731.723 cv
124.861 730.478 123.835 728.328 122.11 727.737 cv
120.275 727.107 120.039 728.409 119.057 728.438 cv
115.958 728.53 109.807 724.646 109.623 721.242 cv
109.38 716.761 116.449 713.617 116.286 708.333 cv
116.21 705.874 114.355 703.063 113.703 700.676 cv
112.899 697.724 112.946 694.729 112.341 691.765 cv
111.134 685.846 109.82 679.879 107.46 674.463 cv
106.844 673.051 106.384 671.542 105.998 669.993 cv
104.717 670.152 103.436 670.206 102.159 670.16 cv
100.937 673.733 99.3091 677.195 97.2495 680.726 cv
95.3394 683.999 92.7534 686.52 91.5591 690.205 cv
90.1416 694.578 90.4521 699.084 88.3984 703.386 cv
87.4951 705.278 85.9702 707.2 85.4004 709.213 cv
84.7607 711.475 85.2495 713.747 85.04 716.049 cv
84.5723 721.19 81.3345 724.85 79.2676 729.344 cv
77.3823 733.443 78.3389 739.889 76.2446 743.26 cv
74.3745 746.27 68.9219 747.27 65.9458 749.07 cv
61.4644 751.784 57.3408 756.53 51.6816 756.759 cv
51.5576 749.987 59.0249 747.577 62.2642 742.839 cv
65.1851 738.564 66.4702 732.27 67.2622 727.113 cv
67.7876 723.694 68.5737 720.594 69.8945 717.372 cv
71.7568 712.828 70.6519 708.801 71.5605 704.122 cv
72.5054 699.263 76.875 696.099 76.7656 690.799 cv
76.6938 687.304 74.9316 683.53 74.3438 680.066 cv
73.9048 677.472 73.4971 674.874 73.252 672.263 cv
70.394 672.475 67.7959 671.918 64.7168 670.83 cv
63.1621 670.28 59.1694 669.804 58.6353 667.777 cv
58.249 666.308 59.9375 664.688 59.458 662.896 cv
55.4316 662.766 49.2368 664.864 45.6323 661.559 cv
42.623 658.795 48.1284 654.313 49.5942 651.521 cv
55.9019 639.509 59.3223 625.418 71.9346 618.658 cv
71.9702 618.346 72.0015 618.033 72.0293 617.719 cv
69.0776 614.284 66.8872 610.254 65.1099 605.896 cv
63.9253 602.995 62.6987 598.623 62.146 594.077 cv
60.4585 595.835 58.8013 597.656 56.7505 599.327 cv
53.4404 602.023 49.0493 603.393 45.3594 605.643 cv
42.9507 607.112 40.7188 608.766 38.0156 609.609 cv
37.9624 608.531 37.8467 607.606 37.6724 606.795 cv
37.5557 606.84 37.436 606.876 37.311 606.907 cv
34.1357 608.838 li
29.5444 610.755 27.4614 614.017 26.9331 618.376 cv
26.4321 622.524 24.3682 622.986 21.5615 625.441 cv
20.3652 626.489 19.2788 627.611 18.5137 628.992 cv
17.9321 630.04 17.6675 632.448 16.8569 633.139 cv
12.9658 636.452 13.5767 630.271 13.8296 628.376 cv
10.7188 627.96 5.89893 631.602 3.89355 627.347 cv
1.15137 621.53 9.73438 625.344 11.0122 622.473 cv
12.0127 620.225 2.52686 620.078 .952148 618.322 cv
cp
f
401.249 242.833 mo
396.564 245.586 389.461 245.137 384.088 245.333 cv
380.189 245.476 376.232 244.965 372.37 245.646 cv
369.792 246.1 367.246 246.959 364.746 248.035 cv
364.771 246.401 364.55 244.83 363.909 243.456 cv
361.673 238.663 356.708 236.621 353.029 233.391 cv
353.859 230.905 357.78 229.794 358.203 226.487 cv
358.585 223.49 355.875 220.522 353.337 223.77 cv
363.945 208.337 358.194 190.434 348.681 175.989 cv
344 168.88 337.428 163.575 328.128 163.996 cv
322.631 164.244 316.888 166.714 313.559 171.174 cv
312.304 172.856 310.459 176.322 309.92 179.264 cv
307.416 179.674 305.381 182.281 307.568 184.793 cv
311.326 189.108 319.017 181.139 311.867 179.84 cv
312.722 179.84 li
312.395 179.623 312.048 179.468 311.696 179.365 cv
313.428 175.958 315.716 173.139 320.534 172.662 cv
325.381 172.181 329.494 176.697 328.044 181.552 cv
327.491 183.406 325.882 185.024 323.871 186.548 cv
324.39 185.262 li
313.077 196.237 297.053 198.544 287.713 212.415 cv
286.796 213.778 284.707 216.332 284.75 218.095 cv
284.825 220.98 285.776 219.876 288.543 219.964 cv
289.843 220.005 291.075 220.256 292.263 220.623 cv
291.861 222.072 291.5 223.498 291.166 224.821 cv
290.134 228.904 288.286 232.02 291.974 234.887 cv
289.899 238.494 285.265 238.61 281.827 239.689 cv
278.161 240.84 273.904 241.831 272.8 245.979 cv
271.853 249.535 273.657 252.039 276.894 253.261 cv
279.223 254.141 282.837 254.62 285.315 254.224 cv
288.324 253.745 290.208 250.993 292.779 252.042 cv
294.644 252.803 295.431 255.891 297.899 256.161 cv
300.166 256.41 302.699 254 305.619 254.279 cv
301.73 254.821 295.619 266.113 297.034 269.903 cv
299.403 276.244 312.462 274.745 316.927 272.868 cv
322.091 270.697 325.592 265.932 330.12 262.757 cv
330.517 263.238 330.916 263.719 331.314 264.204 cv
323.654 268.501 316.715 275.531 315.57 284.212 cv
316.076 280.374 323.523 279.451 326.251 279.43 cv
331.562 279.392 336.085 281.444 341.076 282.823 cv
350.2 285.344 361.533 281.711 367.935 275.284 cv
372.191 271.009 377.155 268.698 382.164 265.539 cv
380.72 265.399 379.164 265.477 377.776 265.637 cv
382.841 254.602 392.813 250.784 401.249 242.833 cv
cp
f
475.843 466.371 mo
474.164 460.053 472.482 454.313 471.589 447.764 cv
470.492 439.729 469.737 431.93 467.241 424.17 cv
461.534 406.438 453.396 389.852 444.897 373.336 cv
441.687 367.092 438.296 360.919 435.315 354.559 cv
434.935 353.044 434.556 351.53 434.181 350.02 cv
433.76 348.317 433.251 346.673 432.696 345.051 cv
433.917 342.188 434.688 339.092 434.897 335.704 cv
435.155 331.526 434.571 325.93 432.958 322.038 cv
430.8 316.831 425.868 312.276 422.246 308.065 cv
420.538 308.839 li
420.729 308.096 420.862 307.317 420.931 306.504 cv
422.229 305.706 423.355 304.623 423.968 303.682 cv
426.739 299.424 428.779 294.409 430.692 289.723 cv
434.718 279.856 439.224 270.538 444.317 261.171 cv
448.248 253.947 450.506 244.146 456.681 238.536 cv
457.372 237.906 459.038 236.344 459.038 235.264 cv
463.534 238.382 471.495 232.178 466.411 227.825 cv
464.196 225.93 459.113 226.518 457.554 228.983 cv
456.88 230.05 456.754 232.87 457.667 234.212 cv
457.595 234.202 457.524 234.192 457.445 234.184 cv
455.009 233.936 450.663 239.936 449.173 241.494 cv
440.927 250.113 431.831 257.896 422.413 265.2 cv
418.062 268.577 414.003 271.36 410.031 275.263 cv
405.626 279.594 401.271 283.972 396.953 288.389 cv
393.521 289.559 390.122 291.401 389.774 295.032 cv
390.093 294.684 390.476 294.388 390.899 294.155 cv
390.677 294.85 390.681 295.578 390.248 296.44 cv
389.052 298.831 386.554 298.243 384.152 299.612 cv
382.578 300.51 378.853 302.406 378.544 304.496 cv
378.051 307.838 381.499 304.873 383.28 305.829 cv
382.549 307.096 381.296 306.518 380.513 307.487 cv
379.097 309.239 380.761 309.225 380.849 310.606 cv
380.913 311.617 380.712 312.944 380.646 314.106 cv
380.614 314.684 381.498 314.909 381.306 315.693 cv
381.163 316.275 379.748 316.799 379.319 317.198 cv
376.072 320.221 373.818 323.632 373.47 328.127 cv
373.224 331.305 375.256 335.734 372.512 338.264 cv
375.229 338.274 379.538 336.721 382.073 335.755 cv
382.429 335.62 382.771 335.471 383.106 335.317 cv
382.448 336.816 381.792 338.319 381.124 339.821 cv
380.617 340.959 380.038 342.461 379.585 344.084 cv
379.493 344.192 379.399 344.299 379.31 344.405 cv
376.337 347.883 374.366 352.253 374.265 356.477 cv
369.757 359.591 364.841 362.519 364.498 367.624 cv
364.207 371.955 367.229 375.449 370.849 377.5 cv
371.837 378.061 372.762 378.434 373.647 378.664 cv
373.48 379.488 373.314 380.311 373.152 381.137 cv
370.518 394.564 371.06 408.008 371.641 421.584 cv
371.839 426.225 372.126 430.676 372.644 435.295 cv
372.659 435.436 372.671 435.578 372.683 435.725 cv
372.448 435.627 li
372.54 435.795 372.626 435.965 372.707 436.133 cv
372.817 438.361 372.574 441.326 373.202 443.184 cv
373.329 443.563 373.54 443.922 373.811 444.27 cv
373.603 447.438 373.155 450.535 374.216 453.309 cv
371.726 455.385 368.897 457.08 365.712 458.396 cv
361.741 460.037 356.205 458.092 352.63 459.979 cv
354.188 464.023 363.237 463.619 366.853 463.467 cv
373.21 463.197 387.294 465.813 394.542 462.039 cv
399.261 462.316 403.979 462.289 407.94 462.75 cv
421.763 464.361 435.454 466.109 449.179 468.227 cv
448.395 467.895 li
453.468 468.604 458.493 469.498 463.16 471.139 cv
467.747 472.752 474.274 477.777 476.159 482.33 cv
479.19 481.928 476.399 468.463 475.843 466.371 cv
cp
f
901.771 212.66 mo
900.892 204.385 895.879 201.819 889.272 197.712 cv
892.736 196.146 896.253 196.553 899.868 196.879 cv
895.105 190.714 890.298 190.584 884.279 186.733 cv
887.331 184.457 890.891 183.153 894.779 182.808 cv
892.403 181.174 889.218 178.436 886.401 177.244 cv
882.963 175.788 879.009 176.581 875.675 175.322 cv
876.806 170.719 881.969 169.988 885.333 167.562 cv
881.152 164.943 873.856 164.902 868.951 165.056 cv
868.929 164.982 868.905 164.91 868.883 164.836 cv
870.122 161.937 872.267 160.212 874.595 158.188 cv
872.108 157.182 869.171 158.039 866.552 158.13 cv
866.123 157.074 865.674 156.046 865.202 155.043 cv
866.054 154.081 867.012 153.186 867.726 152.077 cv
866.376 152.043 865.015 151.975 863.665 152 cv
862.988 150.749 862.271 149.531 861.521 148.331 cv
864.455 141.077 873.687 135.351 880.732 135.602 cv
876.986 129.184 875.243 114.897 885.668 113.12 cv
879.357 105.391 876.41 90.4937 887.184 84.7725 cv
879.972 87.5439 873.514 90.6597 867.176 95.4561 cv
860.396 100.586 859.682 105.875 856.021 112.284 cv
854.069 111.006 853.505 108.804 854.923 106.906 cv
848.395 112.583 851.744 123.108 847.722 129.418 cv
845.229 125.725 843.003 121.981 840.703 117.983 cv
843.784 113.943 848.053 110.339 849.827 105.884 cv
852.532 99.0889 852.204 90.0547 851.425 82.9482 cv
850.476 74.2954 847.417 67.8794 841.618 61.311 cv
838.382 57.6421 825.804 45.77 830.604 40.4141 cv
822.117 47.1543 826.291 58.1045 827.108 66.8179 cv
827.687 72.9883 825.518 77.6484 822.406 82.1519 cv
820.772 78.2598 818.591 74.751 816.254 72.1812 cv
812.415 67.9595 808.882 63.4243 803.978 60.0244 cv
800.88 57.8784 792.153 55.3799 794.077 50.2422 cv
790.297 58.3091 794.924 63.6289 798.938 69.7388 cv
801.971 74.355 807.161 84.6318 803.023 90.1938 cv
797.942 93.4023 788.465 94.4614 785.834 96.2783 cv
782.193 98.791 782.847 102.87 782.118 106.68 cv
781.259 111.178 779.069 114.016 775.128 116.5 cv
771.487 118.794 768.883 118.712 764.816 119.305 cv
758.909 120.166 759.968 123.046 765.413 124.927 cv
773.358 127.671 781.957 128.695 790.419 129.125 cv
793.878 129.3 800.491 129.346 807.249 128.463 cv
809.893 129.737 812.832 130.625 815.152 131.064 cv
811.124 139.118 816.253 150.174 818.649 158.161 cv
818.454 158.29 818.269 158.408 818.1 158.516 cv
813.304 161.553 807.216 161.7 801.77 162.351 cv
798.574 162.731 792.998 161.77 790.536 164.277 cv
787.881 166.982 789.424 172.245 792.429 174.216 cv
792.257 172.432 793.07 171.006 794.65 170.336 cv
796.156 172.556 800.44 174.167 799.697 169.936 cv
800.537 170.685 801.855 170.968 802.633 171.605 cv
798.764 166.179 810.409 165.27 813.472 164.677 cv
815.547 164.275 817.614 163.838 819.637 163.316 cv
819.923 171.454 812.292 173.082 805.486 178.35 cv
796.855 185.031 802.479 197.03 807.496 204.068 cv
810.176 207.827 820.766 215.861 818.614 219.732 cv
816.998 222.637 810.313 223.452 807.367 222.643 cv
805.071 222.013 800.759 214.993 797.644 217.571 cv
793.229 221.224 801.13 225.559 803.604 225.941 cv
807.843 226.596 812.56 225.688 816.72 225.438 cv
824.58 224.963 833.04 224.034 841.034 224.024 cv
845.613 224.02 851.993 225.971 857.711 226.594 cv
857.975 228.945 858.084 231.319 857.878 233.764 cv
857.115 242.789 851.479 250.825 846.528 258.182 cv
841.063 266.302 833.378 274.3 825.441 280.179 cv
820.456 280.405 814.491 284.436 809.332 285.198 cv
804.845 285.86 800.252 286.323 795.782 286.717 cv
789.481 287.273 782.884 287.146 776.771 285.383 cv
761.381 276.571 758.434 259.155 761.647 243.219 cv
763.163 235.71 766.715 228.638 767.154 220.775 cv
767.284 218.452 767.155 216.248 766.866 214.114 cv
768.079 207.493 769.289 200.892 767.737 193.994 cv
766.062 186.543 760.144 169.746 767.317 163.196 cv
757.222 171.287 756.394 186.864 760.022 197.976 cv
761.184 201.53 762.378 206.33 762.319 210.769 cv
759.778 223.047 752.418 234.701 751.713 247.531 cv
750.972 260.992 753.155 273.044 761.144 282.431 cv
759.226 282.503 757.327 282.182 755.389 281.841 cv
756.834 285.084 760.937 286.971 763.878 288.682 cv
762.367 290.168 760.005 290.793 757.911 291.371 cv
763.464 292.89 767.312 294.563 773.231 294.667 cv
772.469 296.657 770.815 298.287 769.031 299.468 cv
772.796 300.604 777.188 298.844 781.017 297.965 cv
781.556 299.774 781.197 301.56 779.972 303.034 cv
784.556 303.123 791.223 298.361 795.158 299.769 cv
794.891 301.542 793.54 303.262 792.972 304.914 cv
797.886 304.057 801.521 299.981 805.884 298.922 cv
804.483 305.733 811.762 298.866 813.465 297.136 cv
813.727 298.631 814.09 300.053 813.978 301.639 cv
816.158 300.368 817.817 297.73 820.39 297.522 cv
820.188 298.465 820.44 299.283 820.04 300.191 cv
821.624 299.558 823.43 297.794 825.037 295.698 cv
825.373 295.67 825.707 295.64 826.023 295.59 cv
828.866 295.151 836.264 289.698 835.132 294.607 cv
838.464 293.608 842.665 290.892 842.518 286.978 cv
842.836 287.713 843.564 288.06 843.782 289.346 cv
847.346 287.595 851.969 285.757 854.521 282.601 cv
856.383 280.296 856.428 278.118 857.494 275.534 cv
859.524 276.198 859.731 278.132 858.759 279.981 cv
862.09 278.325 867.477 273.702 866.822 269.467 cv
868.936 269.312 870.212 270.778 870.012 273.012 cv
872.943 269.253 873.183 265.204 872.423 260.698 cv
874.744 259.97 876.891 261.393 877.644 263.781 cv
882.34 259.16 878.565 253.961 877.078 249.094 cv
880.192 250.691 884.32 254.245 884.986 258.05 cv
888.956 251.707 887.817 241.72 885.025 235.274 cv
887.492 236.709 890.171 239.543 891.547 242.175 cv
893.164 234.88 892.696 230.517 888.379 224.214 cv
891.907 224.293 896.006 227.16 898.723 229.339 cv
902.411 221.429 893.152 216.866 890.162 211.485 cv
893.479 209.928 898.579 210.877 901.771 212.66 cv
cp
f
767.317 163.196 mo
767.6 162.971 767.86 162.729 768.156 162.515 cv
767.857 162.727 767.582 162.957 767.317 163.196 cv
cp
f
291.978 448.924 mo
291.514 451.19 290.99 453.853 290.31 456.629 cv
288.857 452.286 287.22 448.077 285.684 443.756 cv
284.513 440.461 282.297 436.711 282.669 433.122 cv
283.372 426.341 288.917 422.069 293.051 417.584 cv
295.761 414.646 297.427 410.633 299.066 406.737 cv
299.766 407.767 300.537 408.803 301.359 409.924 cv
301.649 410.319 301.874 410.642 302.063 410.944 cv
301.942 411.158 301.817 411.371 301.684 411.579 cv
300.608 413.271 298.035 415.051 298.197 417.336 cv
298.328 419.188 300.344 420.31 302.784 421.085 cv
302.757 421.23 302.731 421.373 302.704 421.52 cv
302.23 423.979 300.706 427.792 300.463 431.096 cv
299.879 431.657 299.351 432.331 298.903 433.121 cv
294.508 437.21 293.123 443.314 291.978 448.924 cv
cp
267.953 366.601 mo
270.672 370.691 270.393 374.044 269.296 377.966 cv
268.271 377.544 267.245 377.171 266.219 376.987 cv
268.859 374.372 269.605 370.262 267.953 366.601 cv
cp
277.427 379.6 mo
279.82 375.647 280.633 371.519 280.502 367.244 cv
280.863 367.594 281.224 367.948 281.58 368.311 cv
282.388 369.133 283.243 369.775 284.129 370.266 cv
283.53 372.244 283.984 374.93 282.413 376.67 cv
281.39 377.805 279.146 379.075 277.427 379.6 cv
cp
271.462 362.966 mo
276.567 365.817 277.796 374.021 276.289 379.834 cv
274.494 380.031 272.722 379.401 270.958 378.664 cv
272.659 376.461 273.792 372.862 273.746 370.901 cv
273.683 368.289 272.367 365.412 271.462 362.966 cv
cp
310.687 370.719 mo
310.673 370.722 310.661 370.723 310.648 370.725 cv
308.282 371.14 304.643 372.405 301.721 374.221 cv
301.484 372.95 301.259 371.679 301.087 370.404 cv
300.854 368.676 300.615 366.915 300.476 365.146 cv
300.591 365.007 300.706 364.868 300.817 364.726 cv
301.637 363.678 302.437 362.633 303.211 361.582 cv
304.465 364.29 303.951 366.077 304.045 369.327 cv
306.025 367.806 308.664 364.014 307.644 361.317 cv
309.698 363.75 310.815 367.314 310.687 370.719 cv
cp
347.873 646.587 mo
347.368 642.594 345.548 638.563 345.525 634.456 cv
345.49 628.245 345.197 622.038 345.007 615.783 cv
344.759 607.585 344.091 600.037 342.64 592.1 cv
342.567 591.701 342.511 591.282 342.46 590.853 cv
342.551 589.371 342.551 587.907 342.448 586.454 cv
342.683 586.396 342.914 586.324 343.135 586.219 cv
344.261 585.681 344.885 585.384 344.953 583.933 cv
345.057 581.741 343.313 580.75 341.321 580.318 cv
340.966 579.16 340.525 578.005 339.989 576.848 cv
337.754 572.021 336.852 567.075 334.037 562.529 cv
331.687 558.732 331.233 555.392 330.325 551.05 cv
329.778 548.438 329.24 545.389 327.856 543.034 cv
326.07 539.993 322.458 538.447 320.267 535.588 cv
316.814 531.085 315.992 524.588 313.565 519.465 cv
311.268 514.616 310.101 509.461 307.687 504.653 cv
307.494 504.268 307.292 503.887 307.089 503.506 cv
309.058 503.223 310.869 503.082 311.077 500.729 cv
311.364 497.478 307.687 491.495 305.399 489.454 cv
303.846 488.068 301.79 486.9 300.393 485.523 cv
298.733 483.89 298.379 482.154 297.482 479.983 cv
296.477 477.551 295.65 475.055 294.9 472.532 cv
297.635 469.463 300.421 466.438 302.609 462.921 cv
305.647 458.04 310.716 450.94 310.552 444.463 cv
310.832 444.046 311.09 443.458 311.326 442.644 cv
312.089 440.009 311.791 437.472 311.268 434.82 cv
311.166 434.307 311.03 433.833 310.868 433.389 cv
311.147 432.983 311.448 432.581 311.783 432.198 cv
313.855 429.82 315.703 428.387 317.357 425.736 cv
318.869 426.056 320.437 425.896 322.231 424.721 cv
324.522 423.221 325.7 420.57 327.235 418.425 cv
329.286 415.558 329.71 413.072 329.732 410.293 cv
331.054 408.06 331.926 405.614 331.962 402.769 cv
332.052 395.579 330.458 384.983 326.798 378.732 cv
325.276 376.13 323.42 374.068 321.238 372.648 cv
325.071 367.575 327.686 360.896 327.516 355.708 cv
327.348 350.558 324.702 344.104 320.39 340.178 cv
322.658 338.789 324.557 336.684 325.893 333.524 cv
327.329 330.129 329.318 318.703 323.636 318.671 cv
323.645 317.1 325.166 315.767 325.405 314.084 cv
322.046 315.308 319.206 314.509 315.987 314.831 cv
316.274 310.986 323.624 306.531 327.183 307.652 cv
326.282 300.065 311.891 301.494 306.94 302.458 cv
301.644 303.49 298.344 302.098 293.273 301.022 cv
285.958 299.47 276.939 301.105 270.567 305.2 cv
270.177 305.45 269.742 305.756 269.294 306.104 cv
268.383 306.431 267.456 306.814 266.51 307.248 cv
262.825 308.939 258.718 311.176 257.548 315.372 cv
256.378 319.571 258.04 323.314 261.141 325.223 cv
260.711 325.669 260.288 326.115 259.877 326.561 cv
253.345 333.636 246.299 343.779 246.846 353.697 cv
247.298 361.891 254.022 364.266 260.185 367.271 cv
264.087 369.174 266.023 373.006 263.754 376.743 cv
259.442 376.505 255.42 377.175 251.597 379.483 cv
246.717 382.429 244.779 388.582 246.12 393.894 cv
246.829 396.704 247.589 398.716 245.024 400.679 cv
242.801 402.381 239.692 403.779 239.53 407.207 cv
239.257 412.967 249.117 415.613 246.067 422.42 cv
244.043 426.939 239.208 430.133 236.412 434.153 cv
234.666 436.663 234.777 435.887 232.487 436.964 cv
230.116 438.076 229.6 439.695 230.386 442.209 cv
228.964 443.632 228.094 441.927 226.744 442.673 cv
225.394 443.418 224.689 446.428 223.892 447.679 cv
221.77 451.012 219.587 454.266 217.608 457.577 cv
212.68 465.827 208.672 475.563 202.466 482.984 cv
200.665 485.139 198.726 486.901 196.201 488.206 cv
194.283 489.197 192.354 489.426 192.532 492.038 cv
192.791 495.797 197.158 500.927 199.79 503.229 cv
204.484 507.34 210.358 510.919 215.843 513.92 cv
219.087 515.694 222.503 516.788 226.012 517.515 cv
227.591 522.17 229.315 526.629 230.725 530.681 cv
233.434 538.461 234.715 546.464 234.256 554.77 cv
233.83 562.476 234.721 569.409 236.599 576.886 cv
237.514 580.523 237.961 584.072 238.428 587.659 cv
236.803 588.479 235.002 591.037 236.912 593.41 cv
237.571 594.229 238.426 594.58 239.384 594.64 cv
239.746 597.492 240.04 600.4 240.304 603.258 cv
240.558 606.008 240.583 606.682 242.838 607.146 cv
244.242 618.719 241.281 630.118 240.064 641.687 cv
238.823 653.47 236.331 669.935 245.285 679.226 cv
250.043 684.164 259.188 684.515 265.373 682.047 cv
273.408 678.841 275.421 673.052 273.675 664.862 cv
272.098 657.464 268.316 651.037 267.01 643.736 cv
264.832 631.56 262.931 619.536 261.718 607.228 cv
261.515 605.178 261.235 603.159 261.168 601.187 cv
261.361 599.907 261.515 598.741 261.674 598.025 cv
261.942 596.813 262.166 595.581 262.364 594.344 cv
265.497 593.944 265.3 590.149 263.065 588.002 cv
263.244 585.064 263.236 582.122 263.017 579.244 cv
262.656 574.516 261.108 570.896 259.696 566.503 cv
258.699 563.403 259.813 560.224 259.317 556.988 cv
258.899 554.259 257.573 551.661 257.021 548.966 cv
256.21 545.007 256.744 540.508 256.562 536.473 cv
256.317 531.056 256.78 525.596 257.291 520.167 cv
263.59 520.185 269.974 519.72 276.028 518.467 cv
278.285 522.049 281.08 525.38 283.464 528.853 cv
289.527 537.683 296.618 546.263 299.615 556.453 cv
300.81 560.513 303.937 563.16 306.436 566.385 cv
309.18 569.928 311.227 574.834 313.37 578.786 cv
314.917 581.642 315.966 584.752 316.825 587.928 cv
315.754 588.87 315.145 590.106 315.745 591.513 cv
316.121 592.393 316.96 592.788 318.047 592.87 cv
318.412 594.434 318.771 595.99 319.158 597.518 cv
319.562 599.118 320.054 605.528 321.337 606.778 cv
321.57 610.281 321.637 613.796 321.245 617.344 cv
320.483 624.22 319.225 630.964 316.808 637.471 cv
314.857 642.722 311.044 646.183 308.004 650.714 cv
302.4 659.067 299.052 666.975 305.002 676.035 cv
307.529 679.883 310.107 681.506 314.745 680.531 cv
319.329 679.567 324.771 676.968 328.582 674.267 cv
333.899 670.499 338.222 663.568 344.218 661.476 cv
347.259 660.414 347.936 659.809 348.134 656.254 cv
348.311 653.087 348.266 649.698 347.873 646.587 cv
cp
f
570.01 616.449 mo
568.593 618.303 567.624 620.346 565.868 621.911 cv
565.331 621.522 564.916 621.151 564.454 620.677 cv
568.254 616.957 566.412 614.108 563.273 611.143 cv
559.939 607.996 556.085 604.494 552.232 601.358 cv
543.901 594.582 536.503 586.071 527.166 580.689 cv
520.564 576.884 513.317 574.536 506.618 570.995 cv
500.607 567.819 496.127 563.724 490.66 559.774 cv
486.73 556.935 481.458 552.868 476.453 552.135 cv
474.326 550.172 471.394 549.228 467.627 548.622 cv
463.521 547.962 459.207 549.1 455.15 548.125 cv
453.345 547.689 451.954 546.983 450.745 546.086 cv
453.305 540.956 454.587 535.093 454.276 528.708 cv
453.168 525.567 li
454.489 521.074 454.365 516.972 451.625 511.932 cv
450.047 509.03 447.662 508.402 449.146 504.417 cv
447.61 504.662 446.215 504.139 444.708 504.797 cv
444.278 500.636 447.718 497.487 451.48 496.347 cv
445.615 492.52 438.84 500.402 432.864 503.046 cv
428.556 502.913 424.143 503.688 419.943 504.735 cv
403.891 508.739 389.749 515.386 373.23 508.453 cv
375.036 512.036 379.057 514.646 383.02 515.014 cv
377.954 515.151 374.372 513.34 369.763 512.528 cv
374.179 516.483 378.228 517.817 383.734 519.697 cv
379.866 521.706 376.069 520.438 372.025 520.154 cv
380.169 525.699 395.681 536.297 406.366 532.327 cv
403.079 540.532 411.69 547.898 407.649 553.99 cv
413.872 556.092 414.998 561.961 420.909 564.612 cv
423.241 565.657 425.429 565.603 427.639 565.002 cv
428.657 567.134 432.212 569.49 432.902 572.229 cv
428.163 577.621 419.609 579.488 414.401 584.982 cv
426.902 585.24 441.446 593.139 446.661 604.86 cv
447.448 606.628 448.041 608.444 448.481 610.292 cv
442.979 614.521 435.821 617.354 429.897 620.608 cv
425.282 623.144 419.048 624.304 415.046 627.122 cv
412.946 626.085 409.008 620.821 406.555 621.08 cv
402.015 621.562 403.992 629.25 398.105 628.794 cv
399.58 631.803 403.42 631.042 405.844 629.405 cv
406.345 633.442 402.452 632.136 402.087 634.405 cv
401.82 636.064 404.132 640.733 405.006 641.919 cv
408.273 646.351 414.197 647.825 419.221 642.948 cv
421.351 640.879 421.361 638.398 423.423 636.436 cv
425.074 634.862 430.234 634.394 432.447 633.668 cv
435.945 632.521 439.452 631.284 442.965 630.01 cv
437.898 634.487 432.058 638.184 425.871 642.287 cv
419.389 646.585 412.259 649.78 405.517 653.58 cv
401.458 655.868 395.786 661.249 393.33 665.111 cv
389.676 670.857 392.842 675.91 396.429 680.897 cv
403.8 691.145 410.309 701.83 418.231 711.595 cv
421.831 716.031 425.358 721.137 425.416 727.141 cv
426.281 726.907 427.063 726.342 427.818 725.643 cv
425.548 731.691 424.456 738.733 419.868 743.564 cv
416.001 747.638 397.335 758.015 411.126 762.63 cv
419.45 765.415 431.083 756.918 436.521 751.83 cv
440.193 748.394 443.45 745.426 448.185 743.326 cv
452.159 741.565 457.11 740.95 458.985 736.344 cv
461.489 730.193 456.303 729.32 453.882 724.557 cv
452.131 721.112 451.928 717.405 450.446 714.282 cv
452.182 713.275 453.872 712.081 455.634 710.594 cv
449.072 706.428 444.736 699.262 439.048 694.312 cv
434.74 690.562 431.641 687.365 430.493 681.656 cv
436.295 675.038 442.575 671.372 450.341 667.442 cv
455.262 664.954 459.872 661.861 464.478 658.748 cv
466.94 665.446 470.9 672.222 472.553 678.473 cv
474.897 687.336 476.775 696.403 475.091 705.393 cv
473.161 715.695 471.181 725.919 468.617 736.094 cv
467.292 741.354 465.969 746.489 464.035 751.56 cv
462.453 755.707 459.335 758.744 457.755 762.771 cv
458.063 763.059 458.388 763.354 458.721 763.651 cv
456.618 766.537 455.195 770.179 453.16 772.9 cv
449.606 777.653 443.762 780.525 438.413 782.684 cv
434.012 784.458 425.438 783.659 421.9 786.454 cv
416.825 790.466 425.17 795.663 428.794 797.393 cv
439.397 802.454 450.047 800.521 460.368 795.855 cv
464.385 794.039 469.174 792.251 473.06 790.144 cv
475.558 788.789 476.944 788.014 478.035 784.953 cv
478.658 783.202 478.052 780.901 478.477 779.035 cv
478.686 778.12 478.971 777.233 479.308 776.363 cv
483.136 777.702 486.908 778.337 490.245 777.786 cv
489.9 763.016 491.372 747.12 494.792 732.793 cv
497.894 719.799 502.772 707.578 501.615 694.108 cv
501.054 687.583 503.826 683.528 505.577 677.482 cv
507.113 672.184 508.006 665.339 507.989 659.814 cv
507.94 644.785 507.129 632.684 500.6 618.973 cv
499.234 616.106 497.177 613.081 494.761 610.166 cv
495.147 607.172 495.027 604.18 493.506 601.283 cv
491.078 596.655 487.178 596.188 486.259 590.756 cv
485.841 588.28 485.737 585.688 485.654 583.082 cv
486.829 583.18 488.016 583.244 489.22 583.277 cv
494.844 583.432 495.023 585.016 499.842 587.858 cv
507.474 592.361 515.552 591.359 522.426 596.914 cv
530.087 603.106 539.005 604.852 546.706 609.995 cv
551.213 613.007 553.125 615.164 552.988 620.206 cv
552.875 624.321 550.827 628.553 556.466 630.488 cv
558.771 631.279 565.601 629.907 568.045 628.628 cv
571.842 626.641 571.867 620.491 570.01 616.449 cv
cp
f
215.293 206.892 mo
215.158 206.673 215.142 206.196 215.064 205.955 cv
214.974 205.675 214.878 205.383 214.759 205.101 cv
215.29 204.708 215.416 204.056 216.035 203.707 cv
216.937 203.199 217.914 204.024 217.585 204.788 cv
217.245 205.582 216.502 206.368 216.054 207.139 cv
216.002 207.227 215.954 207.313 215.907 207.401 cv
215.75 207.287 215.385 207.04 215.293 206.892 cv
cp
182.053 205.955 mo
181.976 206.196 181.96 206.673 181.825 206.892 cv
181.733 207.04 181.368 207.287 181.21 207.401 cv
181.164 207.313 181.115 207.227 181.064 207.139 cv
180.615 206.368 179.873 205.582 179.532 204.788 cv
179.204 204.024 180.181 203.199 181.083 203.707 cv
181.702 204.056 181.828 204.708 182.359 205.101 cv
182.24 205.383 182.144 205.675 182.053 205.955 cv
cp
183.77 205.761 mo
184.019 204.813 185.541 204.464 186.323 205.194 cv
186.107 205.354 185.901 205.525 185.708 205.691 cv
185.537 205.837 185.3 206.171 185.096 206.282 cv
184.924 206.375 184.347 206.435 184.313 206.456 cv
183.801 206.798 183.62 206.94 183.873 207.57 cv
183.772 207.622 183.681 207.684 183.591 207.753 cv
183.596 207.063 183.608 206.375 183.77 205.761 cv
cp
213.245 207.57 mo
213.498 206.94 213.317 206.798 212.803 206.456 cv
212.771 206.435 212.193 206.375 212.021 206.282 cv
211.818 206.171 211.581 205.837 211.41 205.691 cv
211.216 205.525 211.011 205.354 210.794 205.194 cv
211.577 204.464 213.099 204.813 213.348 205.761 cv
213.51 206.375 213.522 207.063 213.526 207.753 cv
213.437 207.684 213.345 207.622 213.245 207.57 cv
cp
250.671 213.327 mo
250.671 213.327 234.926 207.529 247.405 196.995 cv
247.405 196.995 231.14 198.1 221.216 209.09 cv
221.216 209.09 218.844 210.249 215.992 209.986 cv
215.983 209.733 215.942 209.488 215.862 209.262 cv
216.438 209.09 li
216.938 208.712 217.475 208.09 217.519 207.517 cv
218.183 207.396 218.241 207.214 218.353 206.727 cv
218.36 206.695 218.192 206.297 218.21 206.142 cv
218.233 205.961 218.444 205.656 218.51 205.48 cv
218.776 204.758 219.063 203.94 218.557 203.26 cv
218.054 202.584 216.519 202.02 215.665 202.603 cv
214.939 203.097 214.885 203.944 214.547 204.657 cv
214.256 204.129 213.838 203.672 213.161 203.42 cv
211.964 202.976 209.623 203.315 209.113 204.521 cv
209.009 204.516 208.903 204.517 208.794 204.524 cv
207.687 204.611 206.09 205.64 206.271 206.666 cv
206.484 207.877 208.287 208.322 208.588 209.532 cv
209.162 208.338 207.871 207.874 207.811 206.91 cv
207.771 206.249 208.405 205.842 209.051 205.812 cv
209.278 206.776 209.913 207.735 209.562 208.744 cv
210.564 208.015 210.325 207.225 210.33 206.442 cv
210.914 207.11 211.354 207.966 211.914 208.632 cv
212.573 209.42 213.263 210.033 213.786 210.854 cv
213.629 214.084 212.793 226.993 209.272 233.75 cv
209.272 233.75 206.748 238.026 203.313 241.085 cv
203.303 241.005 203.295 240.924 203.284 240.843 cv
203.102 239.527 202.49 237.838 202.695 236.515 cv
202.841 235.565 203.526 234.72 203.928 233.827 cv
205.066 231.294 206.164 225.65 202.354 224.611 cv
202.553 223.175 202.379 221.786 200.831 221.136 cv
200.537 221.857 200.455 222.771 200.799 223.492 cv
200.215 223.451 198.845 224.042 198.396 223.84 cv
197.646 223.504 197.592 221.922 197.033 221.292 cv
196.735 222.444 196.35 223.946 195.782 224.972 cv
194.911 226.546 193.882 227.177 193.794 229.195 cv
193.741 230.411 193.887 231.432 194.444 232.528 cv
194.648 232.93 195.092 233.271 195.139 233.634 cv
195.259 234.573 194.161 236.219 193.97 237.188 cv
193.84 237.847 193.63 240.976 194.266 241.464 cv
191.681 239.478 189.5 236.552 187.845 233.75 cv
184.324 226.993 183.489 214.084 183.332 210.854 cv
183.855 210.033 184.544 209.42 185.204 208.632 cv
185.764 207.966 186.204 207.11 186.788 206.442 cv
186.792 207.225 186.553 208.015 187.556 208.744 cv
187.205 207.735 187.84 206.776 188.067 205.812 cv
188.713 205.842 189.347 206.249 189.307 206.91 cv
189.247 207.874 187.956 208.338 188.529 209.532 cv
188.831 208.322 190.634 207.877 190.846 206.666 cv
191.027 205.64 189.431 204.611 188.324 204.524 cv
188.214 204.517 188.109 204.516 188.002 204.515 cv
187.495 203.315 185.154 202.976 183.957 203.42 cv
183.279 203.672 182.861 204.129 182.571 204.657 cv
182.233 203.944 182.179 203.097 181.453 202.603 cv
180.599 202.02 179.063 202.584 178.561 203.26 cv
178.055 203.94 178.341 204.758 178.608 205.48 cv
178.674 205.656 178.885 205.961 178.908 206.142 cv
178.925 206.297 178.758 206.695 178.765 206.727 cv
178.877 207.214 178.935 207.396 179.599 207.517 cv
179.643 208.09 180.18 208.712 180.68 209.09 cv
181.256 209.262 li
181.176 209.488 181.134 209.733 181.126 209.986 cv
178.274 210.249 175.902 209.09 175.902 209.09 cv
165.978 198.1 149.712 196.995 149.712 196.995 cv
162.191 207.529 146.447 213.327 146.447 213.327 cv
146.447 213.327 152.056 212.483 154.649 217.789 cv
157.243 223.093 151.09 228.809 151.09 228.809 cv
155.544 228.022 153.474 229.137 162.174 231.837 cv
170.874 234.538 163.915 245.199 163.915 245.199 cv
169.424 236.707 177.993 237.56 184.639 238.473 cv
186.484 238.726 188.269 239.325 189.967 240.077 cv
190.985 240.528 194.212 241.652 194.464 242.826 cv
194.623 243.558 194.025 243.845 193.744 244.425 cv
193.35 245.237 193.225 246.16 193.175 247.052 cv
193.071 248.894 193.417 250.738 193.772 252.536 cv
194.19 254.649 194.58 256.789 195.326 258.816 cv
195.501 259.297 198.301 264.229 198.248 264.268 cv
200.249 262.851 200.726 260.635 201.854 258.632 cv
203.078 256.461 203.683 254.66 204.204 252.16 cv
204.602 250.244 205.047 248.292 205.108 246.329 cv
205.152 244.921 204.357 243.704 204.359 242.386 cv
204.359 239.901 210.573 238.735 212.477 238.473 cv
219.122 237.561 227.693 236.706 233.203 245.199 cv
233.203 245.199 226.244 234.538 234.944 231.837 cv
243.644 229.137 241.574 228.022 246.026 228.809 cv
246.026 228.809 239.875 223.093 242.469 217.789 cv
245.062 212.483 250.671 213.327 250.671 213.327 cv
cp
f
1044.34 324.117 mo
1042.09 317.479 1032.18 298.894 1024.08 307.817 cv
1021.59 310.561 1019.95 315.352 1018.16 318.736 cv
1015.84 323.097 1013.05 327.097 1009.61 330.424 cv
1007.62 327.96 1005.45 325.667 1003.38 323.677 cv
1e3 320.428 994.763 317.505 992.825 313.132 cv
989.422 305.455 992.526 294.14 990.725 285.708 cv
989.146 278.313 981.598 270.725 975.529 266.778 cv
956.969 254.703 935.515 270.096 916.11 261.34 cv
919.047 262.829 920.838 266.086 923.905 267.151 cv
913.586 263.677 895.815 258.731 893.679 275.58 cv
896.466 268.327 903.48 263.667 910.501 268.099 cv
914.012 270.313 916.033 273.268 919.029 276.144 cv
922.1 279.091 925.899 280.941 929.572 282.962 cv
928.086 286.451 927.662 290.42 928.222 294.28 cv
928.587 296.787 929.637 299.189 929.945 301.665 cv
930.423 305.503 930.559 304.992 927.813 305.747 cv
925.739 306.318 923.586 303.243 922.737 307.388 cv
922.099 310.515 925.448 312.273 927.062 313.992 cv
931.773 319.01 927.632 320.531 927.875 326.261 cv
929.445 326.01 931.067 325.361 932.466 324.501 cv
934.39 327.552 934.881 331.111 937.511 334.316 cv
940.753 338.267 944.428 340.957 949.322 342.716 cv
950.474 343.131 951.606 343.424 952.724 343.629 cv
950.302 345.98 947.389 348.45 945.018 351.827 cv
940.945 357.624 940.896 359.846 945.573 364.97 cv
947.808 367.417 948.583 367.843 951.834 368.668 cv
949.951 375.081 951.454 384.459 951.454 391.116 cv
951.454 396.166 952.38 402.831 951.032 407.691 cv
949.769 412.245 944.81 415.521 943.478 420.381 cv
945.294 419.375 946.92 417.896 948.802 417.218 cv
948.064 419.979 945.897 427.401 948.807 429.295 cv
952.517 426.314 953.876 422.917 958.612 420.967 cv
962.712 419.276 968 417.224 972.436 417.545 cv
967.146 419.597 958.852 428.128 959.982 434.577 cv
963.035 431.536 966.309 429.692 970.742 429.324 cv
966.23 430.658 965.192 436.387 964.924 440.641 cv
968.1 437.281 971.765 434.756 976.234 433.446 cv
973.985 436.699 975.678 439.03 977.964 441.531 cv
980.725 432.235 985.911 431.18 993.765 428.133 cv
999.852 425.77 1002.07 422.127 1004.23 416.124 cv
1009.56 401.33 1013.19 384.845 1016.03 369.117 cv
1017.3 362.126 1018.39 354.07 1017.26 346.687 cv
1021.64 349.401 1025.73 350.293 1024.88 344.479 cv
1026.28 347.466 1029.08 350.498 1032.53 350.096 cv
1034.52 349.866 1036.39 348.589 1036.26 346.683 cv
1038.21 351.724 1042.49 359.395 1047.29 353.964 cv
1052.95 347.554 1046.59 330.74 1044.34 324.117 cv
cp
f
1154.72 804.213 mo
1153.93 802.077 1152.91 800.522 1151.37 798.893 cv
1149.88 797.31 1148.35 795.153 1146.52 793.859 cv
1143.08 787.966 1134.37 773.643 1126.37 765.461 cv
1127.95 765.197 1129.5 764.883 1131.03 764.521 cv
1134.19 763.771 1136.88 762.942 1139.43 760.704 cv
1141.27 759.09 1142.76 756.674 1143.91 754.538 cv
1145.85 750.947 1144.07 746.122 1141.81 743.047 cv
1139.84 740.352 1136.68 738.334 1135.44 735.167 cv
1133.64 730.547 1135.83 724.446 1137.55 720.141 cv
1138.77 717.082 1138.55 714.021 1135.95 711.741 cv
1134.8 710.727 1131.76 707.047 1130.07 707.736 cv
1131.56 708.659 1132.42 710.146 1132.56 711.75 cv
1130.16 715.297 1125.48 711.774 1126.45 708.255 cv
1127.11 705.898 1128.83 703.803 1128.97 701.307 cv
1129.12 698.727 1126.47 693.973 1123.74 693.482 cv
1125.12 694.694 1125.82 696.79 1125.32 698.563 cv
1124.88 700.098 1123.65 700.414 1122.96 701.58 cv
1122.31 700.653 1122.44 699.172 1123.47 698.574 cv
1121.11 699.815 1119.1 701.792 1119.41 704.479 cv
1119.68 706.843 1119.5 707.631 1118.03 709.603 cv
1116.47 709.176 1116.78 708.111 1115.93 706.863 cv
1114.94 705.403 1113.24 702.589 1115.74 701.242 cv
1113.39 701.3 1111.33 705.507 1111.3 707.438 cv
1111.26 709.923 1113.33 713.623 1109.57 714.848 cv
1110.9 711.838 1107.24 708.098 1105.31 706.391 cv
1103.25 704.569 1099.57 701.853 1101.06 698.757 cv
1098.28 700.579 1098.08 704.54 1099.07 707.428 cv
1099.76 709.454 1101.62 711.003 1101.11 713.308 cv
1099.84 719.003 1096.55 712.331 1096.66 709.887 cv
1094.63 710.902 1095.05 716.729 1095.73 718.595 cv
1095.57 718.436 li
1094.36 717.744 1093.3 715.913 1093.81 714.527 cv
1091.73 716.519 1094.64 720.418 1095.65 722.293 cv
1097.17 725.135 1099.26 728.42 1098.44 731.796 cv
1097.35 736.338 1092.26 739.936 1089.96 743.904 cv
1086.98 749.051 1087.62 756.822 1092.41 760.9 cv
1095.85 763.823 1100.48 764.947 1104.83 765.663 cv
1106.07 765.869 1107.34 766.027 1108.61 766.151 cv
1100.35 774.768 1091.43 789.668 1088.39 794.923 cv
1084.54 796.748 1082.19 799.639 1080.99 803.701 cv
1080.75 804.485 1079.83 805.976 1079.93 806.72 cv
1080.08 807.803 1082.22 809.377 1083.13 809.672 cv
1083.58 809.817 1084.56 809.635 1084.8 809.729 cv
1085.38 809.962 1085.7 810.664 1086.31 810.944 cv
1087.19 811.353 1088.08 810.958 1088.9 810.977 cv
1089.55 810.991 1090.06 811.152 1090.78 811.262 cv
1097.37 812.262 1094.92 802.937 1094.98 797.91 cv
1098.62 792.543 1103.69 786.296 1107.27 782.026 cv
1105.73 789.306 1104.3 797.035 1104.16 801.277 cv
1104.11 802.8 1104.33 804.077 1104.77 805.15 cv
1104.08 807.853 1103 810.516 1102.37 813.202 cv
1102.08 814.428 1101.54 815.93 1101.61 817.196 cv
1100.89 817.764 1100.32 818.499 1100.2 819.298 cv
1099.72 822.368 1103.5 822.688 1105.72 823.136 cv
1107.79 823.553 1111.29 824.684 1113.37 823.919 cv
1115.17 823.259 1117.24 820.189 1114.26 819.188 cv
1113.05 818.811 li
1114.06 816.487 1114.22 812.982 1114.46 810.401 cv
1116.4 810.554 1118.37 810.504 1120.14 810.397 cv
1120.82 812.051 1121.35 813.818 1121.67 815.442 cv
1121.86 816.412 1121.51 818.702 1122.16 819.526 cv
1122.24 819.639 1122.36 819.731 1122.49 819.808 cv
1120.11 820.606 1120.74 822.349 1124.05 823.494 cv
1126.98 824.504 1139.27 823.927 1136.54 818.06 cv
1133.54 818.401 li
1135.69 815.225 1131.75 808.31 1128.83 803.601 cv
1129.41 800.075 1129.04 794.735 1127.37 786.649 cv
1126.79 783.858 1126.3 781.361 1125.88 779.129 cv
1129.12 782.906 1135.32 790.31 1139.76 796.714 cv
1139.29 798.644 1138.95 800.439 1139.6 802.454 cv
1140.46 805.126 1142.48 807.15 1142.6 810.062 cv
1142.7 812.259 1141.94 812.445 1144.39 812.602 cv
1146.09 812.712 1146.89 812.171 1148.34 811.928 cv
1149.22 811.781 1150.15 812.368 1151.06 812.047 cv
1151.53 811.878 1151.24 811.193 1151.53 811.059 cv
1151.92 810.878 1152.32 811.1 1152.76 810.981 cv
1154.32 810.56 1154.97 810.236 1155.33 808.374 cv
1155.61 806.96 1155.21 805.522 1154.72 804.213 cv
cp
f
743.938 315.104 mo
742.944 314.645 742.505 313.582 741.667 312.795 cv
740.32 311.529 738.438 310.531 736.729 309.814 cv
734.536 308.894 729.235 310.019 731.31 306.466 cv
732.454 304.507 735.065 303.69 736.411 301.796 cv
738.047 299.492 738.193 297.231 737.534 294.493 cv
736.846 291.632 735.482 289.39 733.402 287.353 cv
731.903 285.885 729.558 285.221 728.171 283.734 cv
726.026 281.437 727.339 278.259 724.942 275.941 cv
723.746 274.786 721.652 274.198 720.636 273.004 cv
719.278 271.407 720.12 269.438 719.489 267.823 cv
718.474 265.225 716.053 266.206 714.532 264.68 cv
713.548 263.696 714.475 263.301 714.078 262.141 cv
713.524 260.523 712.371 259.707 710.867 259.033 cv
709.366 258.361 707.703 258.297 706.099 258.125 cv
705.444 258.055 704.357 258.182 703.765 257.886 cv
702.612 257.312 702.905 256.326 702.116 255.678 cv
698.651 252.833 695.413 255.866 691.684 256.038 cv
691.29 255.304 li
685.986 253.247 679.306 255.965 674.744 259.039 cv
669.166 262.796 665.033 267.971 663.447 274.593 cv
661.071 284.518 669.535 290.212 677.406 292.902 cv
671.547 294.87 670.937 305.093 669.019 310.166 cv
666.53 316.749 662.551 322.328 656.891 326.625 cv
651.628 330.623 645.299 332.435 638.895 333.65 cv
630.887 335.17 617.438 335.975 613.634 326.597 cv
611.164 320.514 609.194 310.939 617.319 307.738 cv
620.337 306.552 624.415 307.928 626.236 310.723 cv
624.82 307.832 622.826 305.561 619.08 305.758 cv
611.775 306.141 606.644 313.538 607.036 320.49 cv
607.431 327.494 612.8 334.126 618.748 337.327 cv
625.933 341.193 634.102 341.297 642.021 340.49 cv
652.903 339.378 663.742 338.038 674.622 336.87 cv
675.461 336.781 676.299 336.681 677.137 336.579 cv
676.91 337.158 676.794 337.753 676.827 338.357 cv
676.976 340.942 679.81 342.878 680.228 345.337 cv
680.654 347.856 677.985 348.039 677.981 350.291 cv
677.978 352.587 681.238 353.522 682.513 351.61 cv
683.355 352.676 685.166 354.112 686.323 352.435 cv
688.307 353.652 689.341 351.78 689.126 349.925 cv
688.955 348.449 687.733 346.412 686.783 345.276 cv
685.742 344.031 684.284 343.212 683.333 341.871 cv
681.891 339.84 682.182 337.729 683.251 335.777 cv
691.08 334.729 698.916 333.775 706.995 334.994 cv
713.101 335.915 719.659 337.905 723.571 332.121 cv
724.373 332.748 725.208 333.321 726.108 333.79 cv
728.569 335.075 731.463 335.325 733.966 336.211 cv
734.173 336.285 734.357 336.357 734.533 336.429 cv
733.708 337.873 732.442 339.455 734.075 340.771 cv
734.438 340.442 734.893 340.229 735.239 339.865 cv
735.096 341.491 735.754 342.708 736.745 341.226 cv
736.756 341.54 736.768 341.903 736.718 342.209 cv
736.938 342.177 737.119 342.066 737.275 341.907 cv
737.521 343.159 737.978 344.241 739.521 344.576 cv
740.464 344.781 742.904 344.333 742.718 342.976 cv
742.553 341.789 740.961 342.287 740.412 341.883 cv
739.109 340.925 739.516 341.646 739.23 339.851 cv
739.092 338.98 739.39 337.998 739.209 337.129 cv
738.709 334.717 736.94 334.502 734.762 333.5 cv
732.09 332.273 728.474 330.37 725.784 327.89 cv
726.25 327.048 726.807 326.256 727.609 325.571 cv
729.296 324.134 731.641 323.798 733.469 322.666 cv
735.306 321.528 736.982 319.671 735.776 317.552 cv
734.925 316.054 730.183 314.513 731.941 312.544 cv
733.363 310.951 737.801 312.118 739.225 313.022 cv
740.779 314.01 741.688 315.796 742.309 317.44 cv
740.112 317.348 739.784 319.329 741.109 320.632 cv
742.981 322.474 747.021 321.73 748.01 319.376 cv
749.678 315.395 746.025 316.067 743.938 315.104 cv
cp
f
626.236 310.723 mo
626.522 311.307 626.786 311.913 627.035 312.532 cv
626.877 311.877 626.598 311.275 626.236 310.723 cv
cp
f
660.223 505.765 mo
659.032 504.979 657.838 504.277 656.78 503.581 cv
655.127 502.532 654.167 501.048 653.714 499.321 cv
653.969 498.671 654.212 498.009 654.435 497.332 cv
654.771 497.125 655.098 496.905 655.41 496.668 cv
656.703 499.945 658.018 503.383 660.223 505.765 cv
cp
635.481 474.571 mo
636.01 475.006 636.548 475.432 636.932 475.995 cv
637.939 477.474 638.001 478.748 638.321 480.444 cv
638.447 481.111 638.612 481.704 638.808 482.25 cv
637.393 479.902 636.347 477.307 635.481 474.571 cv
cp
619.898 485.809 mo
619.257 483.904 618.87 481.885 618.588 479.809 cv
619.371 477.897 619.992 475.926 620.423 473.916 cv
620.586 475.607 620.666 477.31 620.65 478.994 cv
620.67 481.293 620.396 483.57 619.898 485.809 cv
cp
614.47 488.362 mo
614.508 488.004 614.532 487.642 614.535 487.271 cv
615.902 485.293 617.105 483.168 618.102 480.95 cv
618.566 482.686 619.134 484.355 619.875 485.913 cv
619.198 488.908 618.106 491.828 616.709 494.617 cv
616.269 492.501 615.619 490.384 614.47 488.362 cv
cp
613.364 500.26 mo
613.218 500.05 613.062 499.862 612.901 499.687 cv
612.832 499.429 612.768 499.173 612.68 498.913 cv
612.31 497.766 611.687 496.756 610.912 495.881 cv
611.07 495.358 611.273 494.822 611.554 494.248 cv
611.834 493.677 612.2 493.154 612.574 492.637 cv
612.843 494.765 613.117 496.854 613.52 498.799 cv
613.27 496.508 613.29 494.08 613.312 491.597 cv
613.346 491.547 613.376 491.495 613.407 491.445 cv
614.303 493.154 614.961 495.112 615.395 497.057 cv
614.76 498.15 614.079 499.218 613.364 500.26 cv
cp
607.126 515.082 mo
607.054 515.806 606.877 516.52 606.621 517.221 cv
606.411 517.265 606.201 517.309 605.989 517.337 cv
606.226 519.127 603.612 522.163 601.241 524.607 cv
599.726 525.669 597.952 526.356 596.076 526.898 cv
600.105 523.333 603.877 519.449 607.126 515.082 cv
cp
544.611 531.685 mo
544.251 530.515 544.017 529.32 543.907 528.113 cv
543.985 527.899 544.078 527.687 544.193 527.476 cv
544.738 526.481 545.548 525.652 546.485 524.944 cv
546.257 525.393 546.103 525.88 546.055 526.408 cv
546.03 528.222 545.659 530.127 544.611 531.685 cv
cp
525.512 530.782 mo
525.54 530.638 525.569 530.493 525.598 530.349 cv
525.893 530.021 526.219 529.704 526.576 529.404 cv
526.221 529.863 525.865 530.322 525.512 530.782 cv
cp
524.451 532.16 mo
524.563 531.861 524.709 531.568 524.89 531.28 cv
524.875 531.403 524.86 531.526 524.845 531.648 cv
524.714 531.819 524.583 531.99 524.451 532.16 cv
cp
533.335 450.797 mo
533.557 450.315 533.795 449.846 534.053 449.39 cv
534.505 448.932 534.944 448.481 535.371 448.026 cv
535.667 450.32 536.094 452.577 536.625 454.795 cv
535.684 456.697 534.929 458.655 534.327 460.646 cv
533.568 457.421 533.07 453.971 533.335 450.797 cv
cp
515.732 491.962 mo
515.5 490.739 515.186 489.559 514.909 488.442 cv
514.311 485.802 513.494 483.354 513.648 480.976 cv
514.176 481.666 514.653 482.337 514.942 482.979 cv
516.131 485.608 516.679 489.116 515.732 491.962 cv
cp
516.694 462.796 mo
517.626 462.222 518.54 461.615 519.441 460.989 cv
519.254 461.866 519.074 462.744 518.895 463.624 cv
518.108 464.358 517.472 465.175 516.958 466.043 cv
516.745 466.145 516.533 466.248 516.332 466.362 cv
516.368 465.155 516.487 463.963 516.694 462.796 cv
cp
521.75 452.695 mo
520.979 454.708 520.407 456.773 519.916 458.865 cv
518.986 459.672 518.021 460.44 517.038 461.189 cv
517.851 457.99 519.381 455.055 521.75 452.695 cv
cp
522.406 437.354 mo
523.618 436.996 524.821 436.615 526.019 436.225 cv
525.317 436.556 524.616 436.885 523.916 437.211 cv
523.413 437.263 522.911 437.312 522.406 437.354 cv
cp
523.454 389.054 mo
525.205 386.772 529.144 385.379 532.305 384.187 cv
532.492 384.125 532.682 384.062 532.873 384 cv
532.688 387.116 533.554 390.213 530.949 393.045 cv
529.755 394.342 527.292 395.065 524.778 395.816 cv
523.454 393.333 522.278 390.741 523.454 389.054 cv
cp
522.184 455.002 mo
522.027 455.722 521.871 456.479 521.703 457.248 cv
521.511 457.43 521.309 457.603 521.114 457.781 cv
521.447 456.84 521.799 455.911 522.184 455.002 cv
cp
534.613 430.592 mo
534.467 430.48 li
534.844 430.201 535.217 429.9 535.577 429.567 cv
535.481 429.975 535.429 430.367 535.434 430.738 cv
534.785 430.303 li
534.729 430.399 534.669 430.494 534.613 430.592 cv
cp
520.187 462.591 mo
519.91 462.78 519.644 462.975 519.395 463.18 cv
519.671 462.258 519.948 461.339 520.234 460.429 cv
520.52 460.225 520.81 460.025 521.092 459.815 cv
520.833 460.786 520.537 461.727 520.187 462.591 cv
cp
537.117 446.026 mo
538.138 444.738 539.055 443.312 539.836 441.528 cv
540.778 439.381 541.385 437.227 541.915 435.049 cv
542.114 435.023 542.313 434.991 542.512 434.949 cv
542.532 437.88 541.648 440.806 541.317 443.711 cv
541.169 445.006 540.933 446.197 540.631 447.336 cv
540.135 448.227 539.612 449.121 539.096 450.026 cv
538.63 450.829 538.238 451.639 537.894 452.455 cv
537.591 452.966 537.305 453.481 537.031 454.001 cv
536.893 451.332 536.91 448.664 537.117 446.026 cv
cp
587.327 338.111 mo
586.661 340.042 585.496 341.774 584.44 343.732 cv
583.063 341.859 581.312 340.951 582.189 338.368 cv
583.256 335.227 587.148 333.882 585.263 330.089 cv
586.055 328.935 586.647 327.66 587.114 326.341 cv
587.67 330.616 589.18 334.49 587.327 338.111 cv
cp
588.639 357.855 mo
587.578 357.024 586.615 356.047 585.802 354.963 cv
586.214 354.343 586.632 353.725 586.906 353.158 cv
587.859 354.572 588.487 356.106 588.639 357.855 cv
cp
604.172 380.258 mo
603.93 379.976 603.705 379.727 603.524 379.512 cv
603.117 376.734 602.645 373.983 602.23 371.219 cv
603.157 372.713 603.878 374.21 603.991 376.032 cv
604.252 377.412 604.323 378.907 604.172 380.258 cv
cp
620.233 404.435 mo
621.015 404.877 621.772 405.463 622.408 406.176 cv
621.66 405.967 620.914 405.75 620.168 405.53 cv
619.03 404.821 617.776 404.292 616.511 403.78 cv
617.154 403.688 617.803 403.605 618.452 403.53 cv
619.054 403.804 619.651 404.095 620.233 404.435 cv
cp
623.394 407.581 mo
623.069 407.521 622.743 407.466 622.416 407.413 cv
622.407 407.403 622.398 407.393 622.39 407.383 cv
622.71 407.428 623.032 407.469 623.353 407.512 cv
623.366 407.536 623.381 407.557 623.394 407.581 cv
cp
629.433 437.758 mo
627.048 438.679 623.827 438.751 621.336 438.116 cv
619.677 437.294 618.21 436.057 616.709 434.857 cv
621.188 435.882 623.904 437.532 628.156 434.438 cv
628.67 434.063 629.101 433.649 629.472 433.207 cv
631.583 434.824 632.139 436.747 629.433 437.758 cv
cp
586.288 492.577 mo
586.411 492.603 586.53 492.62 586.652 492.645 cv
586.64 492.672 586.63 492.7 586.618 492.727 cv
586.269 492.626 585.92 492.522 585.573 492.417 cv
585.811 492.471 586.049 492.527 586.288 492.577 cv
cp
587.647 359.94 mo
587.567 359.772 587.487 359.606 587.408 359.44 cv
587.724 359.712 588.047 359.977 588.379 360.227 cv
588.133 360.13 587.888 360.035 587.647 359.94 cv
cp
611.12 400.957 mo
612.419 401.397 613.728 401.788 615.024 402.215 cv
614.415 402.24 613.807 402.274 613.197 402.319 cv
612.462 401.932 611.762 401.49 611.12 400.957 cv
cp
601.218 387.783 mo
601.333 387.782 601.45 387.78 601.563 387.77 cv
601.573 387.788 li
601.174 388.285 600.723 388.779 600.244 389.292 cv
600.169 389.193 600.096 389.096 600.018 388.999 cv
600.401 388.583 600.803 388.177 601.218 387.783 cv
cp
586.146 358.233 mo
586.274 358.648 586.405 359.062 586.538 359.475 cv
585.602 359.052 584.861 358.607 584.631 358.083 cv
584.454 357.681 584.562 357.184 584.807 356.641 cv
585.223 357.201 585.67 357.732 586.146 358.233 cv
cp
567.065 327.627 mo
567.353 327.846 567.646 328.06 567.954 328.267 cv
568.141 328.487 567.983 328.68 567.171 329.381 cv
567.078 328.798 567.042 328.214 567.065 327.627 cv
cp
669.152 503.364 mo
665.881 501.609 664.083 498.108 662.516 494.498 cv
661.653 492.697 660.852 490.507 659.551 488.558 cv
659.529 488.102 659.47 487.652 659.369 487.21 cv
664.018 492.515 668.136 498.775 674.548 501.604 cv
665.29 496.338 662.74 484.192 652.925 477.466 cv
652.756 477.281 652.589 477.096 652.416 476.914 cv
655.163 478.314 657.997 479.454 660.966 480.114 cv
656.518 478.542 652.609 475.959 648.835 473.03 cv
651.959 474.068 655.148 474.831 658.354 475.677 cv
655.317 474.471 652.285 473.33 649.41 471.974 cv
652.634 473.22 655.983 474.096 659.187 474.765 cv
651.642 472.393 643.866 468.611 639.405 462.517 cv
639.225 461.981 639.093 461.442 639.002 460.901 cv
644.018 463.802 649.14 466.559 654.462 468.598 cv
650.653 466.416 647.081 463.876 643.595 461.182 cv
647.783 463.48 652.287 465.174 656.648 466.792 cv
650.128 463.539 643.417 459.921 638.618 454.796 cv
638.463 453.33 638.105 451.875 637.202 450.447 cv
634.542 446.237 627.631 444.814 623.174 442.317 cv
621.649 441.463 620.188 439.995 618.715 438.364 cv
619.472 438.921 620.299 439.451 621.271 439.906 cv
624.784 440.538 627.538 440.767 631.023 439.356 cv
632.672 438.728 634.4 435.969 633.116 433.83 cv
632.348 432.512 631.433 431.766 630.686 431.088 cv
631.525 428.758 631.236 425.965 630.456 423.193 cv
630.784 421.804 631.404 419.932 629.928 417.763 cv
629.219 417.076 628.504 416.678 627.805 416.444 cv
627.4 415.594 627.004 414.798 626.649 414.084 cv
626.008 412.794 625.268 411.374 624.402 410.029 cv
624.404 409.935 624.41 409.84 624.406 409.744 cv
631.501 410.544 638.852 413.168 645.487 415.508 cv
639.794 412.81 633.964 410.248 627.764 408.561 cv
626.535 408.242 625.275 407.946 623.995 407.694 cv
623.981 407.661 623.969 407.626 623.956 407.593 cv
626.439 407.914 628.925 408.166 631.406 408.296 cv
628.703 407.792 626.032 407.153 623.376 406.436 cv
622.632 405.258 621.58 404.311 620.526 403.626 cv
620.378 403.529 620.224 403.445 620.073 403.351 cv
623.372 403.012 626.699 402.797 629.911 402.487 cv
625.999 402.431 621.984 402.157 617.94 402.158 cv
615.191 400.802 612.367 399.938 609.836 398.692 cv
609.529 398.552 609.227 398.388 608.926 398.222 cv
608.201 396.899 607.639 395.523 606.381 394.449 cv
606.365 394.436 606.349 394.427 606.334 394.415 cv
614.846 395.007 623.881 399.225 632.33 400.276 cv
626.246 398.93 620.464 396.116 614.309 394.055 cv
612.521 393.455 610.643 392.888 608.709 392.452 cv
612.186 391.977 616.179 392.066 619.556 392.125 cv
625.954 392.402 632.317 392.978 638.718 394.519 cv
632.36 392.416 625.943 391.257 619.399 390.427 cv
617.67 390.229 615.933 390.057 614.186 389.945 cv
621.039 389.396 628.252 389.952 634.981 390.462 cv
628.455 389.276 621.844 388.364 615.129 388.223 cv
614.535 388.221 613.938 388.224 613.339 388.23 cv
614.371 387.95 615.379 387.661 616.339 387.346 cv
615.163 387.535 613.972 387.689 612.77 387.835 cv
615.959 385.908 619.152 383.989 622.348 382.072 cv
617.647 384.162 612.945 386.255 608.253 388.377 cv
607.607 388.46 606.959 388.548 606.312 388.644 cv
605.947 388.689 605.583 388.744 605.219 388.8 cv
606.637 387.76 607.844 386.414 608.693 384.913 cv
612.32 382.956 616.074 381.146 619.807 379.345 cv
616.679 380.183 613.54 381.024 610.411 381.952 cv
610.586 381.689 610.754 381.425 610.908 381.155 cv
611.053 380.937 611.178 380.714 611.309 380.492 cv
612.903 379.523 614.511 378.579 616.087 377.624 cv
614.676 378.272 613.244 378.914 611.811 379.571 cv
612.127 378.947 612.402 378.313 612.638 377.669 cv
613.516 376.72 614.239 375.708 614.704 374.602 cv
614.243 375.395 613.64 376.117 612.941 376.79 cv
614.302 372.46 614.189 367.774 614.655 363.187 cv
613.63 368.681 613.319 374.225 610.646 378.645 cv
610.435 378.792 610.222 378.938 610.005 379.081 cv
609.971 375.258 608.976 371.651 608.399 367.87 cv
608.479 372.018 609.031 376.175 608.329 379.9 cv
608.315 379.989 608.294 380.073 608.278 380.16 cv
607.841 380.421 607.399 380.681 606.953 380.939 cv
607.105 378.826 606.835 376.803 606.311 374.856 cv
605.701 371.699 603.661 369.453 601.937 367.167 cv
601.925 364.537 601.93 361.915 601.709 359.348 cv
601.681 361.019 601.553 362.689 601.4 364.368 cv
601.348 363.719 601.299 363.069 601.265 362.416 cv
601.173 363.604 601.117 364.79 601.083 365.975 cv
600.434 365.008 599.89 364.008 599.58 362.904 cv
598.414 358.597 598.754 353.805 597.18 349.582 cv
595.762 345.26 592.101 342.42 588.324 340.111 cv
592.034 342.7 595.44 345.795 596.445 350.032 cv
597.688 354.272 596.922 358.82 598.094 363.811 cv
598.813 365.986 599.9 367.689 600.947 369.257 cv
600.755 371.509 600.62 373.796 600.701 376.147 cv
600.829 377.15 600.79 378.394 601.249 379.638 cv
601.271 381.259 601.27 382.869 601.222 384.47 cv
601.191 384.49 601.161 384.51 601.131 384.53 cv
600.849 384.54 600.555 384.522 600.232 384.441 cv
600.251 384.656 600.283 384.873 600.315 385.09 cv
599.527 385.646 598.754 386.252 598.018 386.949 cv
598.503 385.744 599.541 384.442 599.925 382.504 cv
600.688 378.671 597.516 377.738 595.021 375.832 cv
594.935 375.766 594.864 375.711 594.784 375.65 cv
594.629 375.204 594.467 374.763 594.302 374.325 cv
594.55 373.932 594.824 373.515 595.125 373.06 cv
596.578 370.251 597.042 367.431 596.271 364.296 cv
595.313 361.793 593.261 360.71 591.441 359.691 cv
591.351 358.94 591.243 358.181 591.077 357.42 cv
590.639 354.593 589.032 352.212 587.104 350.301 cv
586.786 348.468 585.947 346.379 585.187 344.943 cv
586.219 342.642 587.579 340.373 588.205 338.137 cv
589.834 334.112 587.971 330.235 587.242 325.976 cv
588.033 323.615 588.439 321.131 588.822 318.922 cv
588.307 320.473 587.701 322.078 586.986 323.601 cv
586.971 323.166 586.969 322.729 586.996 322.284 cv
586.949 322.765 586.936 323.24 586.935 323.711 cv
586.08 325.518 585.063 327.197 583.843 328.526 cv
582.129 327.342 579.586 326.565 579.112 325 cv
579.103 324.971 579.1 324.944 579.093 324.915 cv
579.971 324.065 580.909 323.076 581.47 321.935 cv
582.337 320.371 583.553 318.892 584.114 317.236 cv
584.662 315.585 584.481 313.818 584.319 312.083 cv
584.471 315.795 582.914 317.941 580.328 320.746 cv
580.294 319.905 580.057 319.277 579.697 318.154 cv
579.204 316.621 578.42 315.23 577.888 313.724 cv
578.238 312.974 578.675 312.2 579.105 311.342 cv
580.851 306.426 578.608 301.82 577.639 297.048 cv
578.149 301.869 579.613 307.165 577.532 310.717 cv
577.477 310.809 577.41 310.903 577.349 310.996 cv
577.315 309.48 577.638 307.915 577.327 306.461 cv
576.981 304.84 575.716 301.394 573.301 302.269 cv
569.963 303.479 571.468 308.795 571.231 310.753 cv
571.106 311.782 570.768 312.731 570.491 313.737 cv
570.025 312.704 569.491 311.738 569.042 310.678 cv
568.547 309.655 567.937 308.666 567.371 307.716 cv
566.761 306.783 567.787 305.686 568.098 304.674 cv
568.669 303.696 568.75 302.535 569.436 301.539 cv
570.116 300.589 571.021 299.862 571.684 299.008 cv
573.843 295.328 571.342 290.607 570.09 286.498 cv
571.162 290.627 573.208 295.983 570.916 298.61 cv
570.244 299.35 569.252 300.015 568.401 301.199 cv
567.549 302.694 567.496 303.289 566.823 304.42 cv
566.559 304.938 566.295 305.374 565.994 306.053 cv
565.47 306.824 565.979 308.517 566.265 308.763 cv
566.815 309.786 567.264 310.729 567.689 311.767 cv
568.414 313.655 569.694 316.51 569.413 317.334 cv
568.762 318.38 566.648 320.89 565.753 322.896 cv
565.747 322.907 565.741 322.92 565.735 322.931 cv
561.752 319.041 558.839 312.807 555.092 308.672 cv
558.671 313.606 560.013 320.42 564.69 325.47 cv
564.199 327.057 563.974 328.791 564.299 330.512 cv
564.322 330.63 564.353 330.741 564.378 330.857 cv
562.271 331.465 559.812 331.686 558.229 333.566 cv
556.699 335.385 556.409 337.792 557.356 339.871 cv
558.038 341.367 559.843 341.762 559.104 343.649 cv
558.327 345.632 554.488 345.84 552.98 347.222 cv
552.757 347.426 552.568 347.62 552.395 347.809 cv
551.758 345.89 552.161 343.52 553.893 341.834 cv
554.403 341.207 555.189 340.649 555.825 340.088 cv
555.832 340.096 li
555.744 340.745 555.772 340.54 555.836 340.077 cv
556.181 339.772 556.482 339.466 556.667 339.146 cv
556.461 338.943 556.254 338.743 556.047 338.542 cv
556.082 338.292 556.101 338.147 556.087 338.242 cv
556.08 338.246 li
556.066 338.255 li
556.004 338.294 555.94 338.337 555.877 338.377 cv
555.166 337.686 554.452 336.996 553.757 336.278 cv
551.845 334.345 550.042 332.096 549.118 329.245 cv
549.772 332.21 551.441 334.752 553.203 336.918 cv
554.533 338.54 li
554.919 339.001 li
554.116 339.538 553.306 340.125 552.539 340.832 cv
550.074 342.865 549.009 346.87 550.723 350.077 cv
550.892 350.297 551.058 350.5 551.223 350.696 cv
551.239 351.391 551.379 352.166 551.504 353.141 cv
551.87 355.991 552.251 355.867 550.069 357.616 cv
549.784 356.573 549.193 355.626 548.314 355 cv
546.691 353.817 544.747 354.128 543.771 353.063 cv
542.982 352.708 543.818 351.322 542.497 351.259 cv
542.273 351.314 542.053 351.391 541.838 351.476 cv
541.369 351.067 541.084 350.82 541.666 351.331 cv
541.667 351.343 li
541.676 351.544 li
541.676 351.551 li
541.163 351.776 540.685 352.079 540.299 352.468 cv
539.061 353.623 538.602 355.283 538.249 356.866 cv
537.489 360.034 537.694 363.602 535.201 366.746 cv
537.965 363.733 538.07 359.953 539.097 356.938 cv
539.554 355.4 540.23 354.022 541.254 353.314 cv
541.447 353.16 541.665 353.048 541.893 352.953 cv
542.044 353.488 542.376 354.054 542.806 354.494 cv
544.95 356.125 546.589 355.885 547.194 356.797 cv
547.774 357.487 548.022 358.411 547.778 359.385 cv
546.452 360.42 545.297 361.504 544.489 363.369 cv
543.601 365.416 543.535 367.06 543.934 369.167 cv
544.157 370.346 545.361 370.917 544.876 372.143 cv
544.299 373.604 540.272 374.394 538.998 375.239 cv
537.749 376.069 536.408 377.127 535.306 378.349 cv
535.192 377.805 535.111 377.235 535.059 376.655 cv
534.682 373.7 534.388 370.434 532.716 368.295 cv
533.885 370.74 533.543 373.704 533.385 376.79 cv
533.34 378.067 533.281 379.428 533.593 380.889 cv
533.521 381.048 533.438 381.205 533.377 381.368 cv
533.302 381.574 533.243 381.779 533.186 381.986 cv
532.593 382.23 531.995 382.473 531.4 382.736 cv
528.213 384.302 524.508 385.806 522.65 388.747 cv
521.645 391.162 523.092 393.57 524.594 395.871 cv
520.688 397.041 516.733 398.314 517.306 401.952 cv
517.858 405.462 523.07 407.248 525.679 408.944 cv
528.42 410.726 531.024 412.692 533.786 414.452 cv
535.662 415.647 537.935 416.883 540.051 418.307 cv
539.586 418.14 li
539.581 418.827 539.604 419.496 539.637 420.16 cv
538.798 419.595 li
538.072 420.838 537.191 422.013 536.207 423.135 cv
536.179 423.093 li
535.928 423.374 535.687 423.661 535.44 423.946 cv
535.11 424.152 534.783 424.361 534.444 424.55 cv
534.536 424.61 534.613 424.681 534.679 424.759 cv
533.341 426.092 531.877 427.352 530.369 428.565 cv
529.903 428.851 529.437 429.138 528.971 429.425 cv
529.115 429.394 529.259 429.364 529.404 429.334 cv
528.437 430.093 527.462 430.836 526.5 431.57 cv
528.123 430.75 529.777 429.934 531.416 429.054 cv
531.162 429.414 530.903 429.771 530.659 430.136 cv
531.458 429.598 532.277 429.088 533.104 428.589 cv
533.236 428.565 533.368 428.54 533.5 428.516 cv
530.064 431.416 526.109 433.952 522.499 436.469 cv
524.252 435.52 526.083 434.6 527.923 433.644 cv
527.437 434.003 526.95 434.356 526.468 434.708 cv
528.308 433.893 530.201 433.074 532.041 432.036 cv
531.901 432.237 531.767 432.442 531.623 432.642 cv
528.277 434.203 525.027 435.927 521.624 437.415 cv
518.913 437.623 516.191 437.737 513.535 437.936 cv
516.113 438.046 518.74 438.235 521.396 438.343 cv
519.333 439.233 517.22 440.035 514.956 440.607 cv
518.963 440.434 522.819 439.517 526.583 438.629 cv
525.852 439.396 525.106 440.15 524.347 440.889 cv
525.698 440.07 527.035 439.212 528.35 438.312 cv
528.656 438.289 528.962 438.267 529.27 438.24 cv
527.749 440.085 526.112 441.862 524.366 443.551 cv
526.264 442.316 528.104 440.986 529.875 439.563 cv
526.583 442.539 522.859 445.136 518.792 447.235 cv
520.695 446.589 522.563 445.826 524.389 444.966 cv
524.232 445.187 524.101 445.413 523.983 445.646 cv
521.425 447.213 518.713 448.604 516.117 449.91 cv
518.498 449.051 520.989 448.194 523.446 447.184 cv
523.413 447.331 523.386 447.479 523.36 447.627 cv
520.364 450.647 517.771 454.018 514.583 456.908 cv
516.208 455.733 517.802 454.426 519.387 453.105 cv
517.635 455.733 516.664 458.706 516.303 461.741 cv
512.549 464.507 508.439 466.85 504.031 468.654 cv
508.297 467.28 512.362 465.409 516.182 463.107 cv
516.115 464.222 516.124 465.336 516.205 466.44 cv
514.879 467.223 513.807 468.243 512.958 469.421 cv
512.296 469.882 511.629 470.348 510.961 470.818 cv
510.899 470.779 510.842 470.732 510.78 470.695 cv
510.748 470.806 510.71 470.912 510.677 471.02 cv
504.973 475.056 499.293 479.551 497.052 485.964 cv
499.799 480.592 504.719 477.227 510.073 474.254 cv
510.264 474.426 510.421 474.638 510.554 474.88 cv
510.141 476.57 509.946 478.272 509.903 479.809 cv
509.648 485.508 510.592 491.094 511.851 496.523 cv
511.234 491.781 510.895 486.949 511.303 482.26 cv
511.636 484.735 512.685 486.938 513.375 489.172 cv
514.322 491.88 515.406 494.685 514.942 497.709 cv
514.51 500.704 512.907 503.404 511.178 505.804 cv
513.136 503.536 515.068 500.957 515.791 497.72 cv
516.198 495.935 516.105 494.18 515.827 492.499 cv
519.593 488.282 515.066 482.439 513.925 478.025 cv
513.981 477.229 513.997 476.387 513.9 475.478 cv
513.889 475.374 513.864 475.272 513.848 475.17 cv
514.155 474.198 514.911 473.383 516.374 472.794 cv
520.545 471.114 520.336 479.164 520.502 482.403 cv
520.567 483.679 520.922 484.855 520.7 486.161 cv
520.587 486.822 519.174 489.08 519.558 489.69 cv
520.609 491.364 522.109 490.39 523.255 488.979 cv
523.681 494.494 522.18 500.221 518.791 504.87 cv
523.023 500.089 525.068 493.21 524.59 486.848 cv
524.703 486.603 524.791 486.38 524.845 486.195 cv
525.424 484.239 524.868 482.488 524.182 480.775 cv
524.175 477.952 524.349 475.096 524.228 472.142 cv
524.69 471.691 525.196 471.291 525.642 470.746 cv
526.39 469.832 526.907 469.065 527.277 468.296 cv
528.606 471.866 530.044 475.392 531.023 479.135 cv
530.378 474.406 529.051 469.792 528.108 465.261 cv
528.119 465.19 528.127 465.118 528.137 465.044 cv
528.437 466.649 529.111 468.119 530.4 469.34 cv
528.231 466.213 528.74 462.259 529.965 458.497 cv
530.169 457.613 530.49 456.695 530.823 455.74 cv
530.844 456.95 530.925 458.149 531.031 459.326 cv
531.27 457.646 531.594 455.975 532.041 454.371 cv
532.589 456.641 533.416 458.827 534.255 460.875 cv
532.904 465.438 532.348 470.171 532.203 474.823 cv
532.173 482.86 533.883 491.904 540.041 496.805 cv
534.22 491.387 533.303 482.404 533.905 474.521 cv
533.938 474.172 533.979 473.822 534.02 473.472 cv
534.317 476.962 535.251 480.177 537.079 482.425 cv
537.935 483.478 539.068 484.465 540.348 485.374 cv
540.583 486.907 540.964 488.398 541.468 489.837 cv
542.448 493.697 544.839 496.673 546.319 500.394 cv
548.965 507.05 541.958 509.728 537.009 512.344 cv
535.005 513.403 533.153 514.404 531.537 515.907 cv
524.171 520.009 517.62 525.334 514.455 532.752 cv
517.633 526.942 522.877 522.792 528.848 519.649 cv
528.338 520.947 528.192 522.203 527.82 523.577 cv
527.664 523.707 527.513 523.842 527.367 523.98 cv
527.231 524.098 527.088 524.204 526.954 524.323 cv
522.161 528.534 518.473 534.681 519.441 540.755 cv
519.156 535.782 521.771 531.296 525.378 527.846 cv
525.355 527.959 525.336 528.076 525.316 528.192 cv
524.323 529.551 523.522 530.896 523.957 532.792 cv
522.703 534.401 521.422 535.995 520.041 537.52 cv
521.448 536.231 522.805 534.834 524.139 533.409 cv
524.17 533.499 524.191 533.586 524.229 533.679 cv
524.215 533.556 524.228 533.434 524.23 533.311 cv
524.386 533.144 524.542 532.976 524.697 532.808 cv
524.454 534.591 524.11 536.392 523.361 538.131 cv
524.336 536.268 524.825 534.22 525.224 532.238 cv
526.719 530.616 528.194 528.988 529.688 527.466 cv
530.842 526.938 531.973 526.602 532.845 526.545 cv
532.136 527.636 531.785 528.798 531.701 529.977 cv
530.328 531.438 529.193 533.087 528.742 534.971 cv
528.028 537.803 529.096 540.621 530.489 543.062 cv
529.302 540.449 528.624 537.563 529.582 535.103 cv
530.031 533.872 530.813 532.783 531.781 531.794 cv
532.189 534.462 533.809 537.063 535.815 538.953 cv
538.328 537.322 533.001 527.267 539.032 528.759 cv
539.306 528.826 542.486 532.038 542.885 532.353 cv
543.275 531.619 543.384 530.837 543.494 530.04 cv
543.714 530.758 543.977 531.461 544.281 532.143 cv
544.07 532.406 543.841 532.66 543.583 532.896 cv
540.246 535.887 534.476 538.492 537.606 542.581 cv
534.877 538.252 540.541 536.574 544.345 533.333 cv
544.472 533.233 544.576 533.111 544.691 533 cv
545.204 534.002 545.803 534.956 546.495 535.842 cv
545.877 534.84 545.374 533.798 544.971 532.732 cv
546.656 530.902 547.158 528.05 547.359 526.363 cv
547.396 526.185 547.457 526.015 547.531 525.85 cv
548.21 528.569 549.125 531.218 549.755 534.006 cv
549.456 530.818 548.781 527.646 548.519 524.612 cv
548.944 524.261 549.457 523.957 550.021 523.703 cv
550.543 525.602 551.351 527.348 552.736 528.705 cv
551.673 526.961 551.277 525.158 551.195 523.265 cv
551.394 523.204 551.596 523.146 551.8 523.095 cv
552.531 522.928 553.386 522.682 554.249 522.327 cv
555.679 527.006 557.816 531.353 558.679 536.307 cv
558.46 531.099 556.904 526.092 556.203 521.29 cv
557.128 520.66 557.944 519.849 558.475 518.798 cv
558.795 518.251 559.029 517.678 559.197 517.092 cv
560.533 515.355 561.265 513.207 560.848 510.516 cv
560.36 507.357 556.932 503.793 555.058 501.057 cv
553.727 499.112 551.923 497.344 550.898 495.216 cv
550.034 493.421 549.879 491.654 550.142 489.918 cv
550.986 490.146 551.804 490.329 552.567 490.451 cv
554.227 490.718 555.886 490.808 557.543 490.806 cv
558.804 494.063 560.483 497.011 563.63 498.554 cv
560.931 496.573 559.813 493.853 559.111 490.775 cv
560.896 490.713 562.679 490.564 564.459 490.407 cv
565.272 490.995 566.116 491.534 567.003 491.996 cv
570.84 494.037 575.071 494.68 579.204 494.794 cv
574.742 494.313 570.764 492.679 567.432 490.159 cv
569.151 490.031 570.868 489.951 572.581 489.987 cv
577.021 491.764 581.611 492.939 586.226 493.636 cv
584.761 496.948 582.727 500.066 580.749 503.113 cv
583.248 500.229 585.828 497.298 587.874 493.862 cv
589.753 494.099 591.633 494.263 593.505 494.353 cv
591.748 494.027 590.004 493.638 588.279 493.185 cv
588.326 493.104 588.373 493.022 588.419 492.939 cv
590.233 493.192 591.983 493.289 593.76 493.33 cv
593.457 494.836 592.956 496.346 592.313 497.78 cv
590.481 502.025 587.75 505.927 585.214 509.793 cv
588.229 506.206 591.447 502.641 593.899 498.371 cv
594.787 496.875 595.575 495.171 596.111 493.364 cv
596.447 493.367 596.786 493.374 597.128 493.379 cv
596.846 494.258 596.517 495.111 596.159 495.896 cv
594.14 500.651 591.392 505.119 588.303 509.387 cv
591.879 505.406 595.136 501.188 597.771 496.429 cv
598.281 495.457 598.773 494.461 599.206 493.427 cv
599.387 493.433 599.575 493.437 599.751 493.443 cv
599.747 493.47 599.741 493.499 599.738 493.523 cv
599.302 496.868 600.52 501.49 601.979 504.539 cv
603.131 506.944 605.221 508.787 606.38 511.188 cv
603.408 516.938 599.36 522.306 594.826 527.238 cv
591.052 528.206 587.022 528.811 583.96 530.824 cv
581.633 532.355 581.592 532.565 581.405 535.194 cv
581.116 539.263 583.378 538.854 585.201 541.599 cv
586.253 534.983 588.966 542.665 591.285 543.341 cv
591.994 542.569 592.694 541.638 593.247 540.74 cv
593.781 541.901 594.295 543.222 595.619 543.37 cv
596.43 541.048 595.065 538.545 596.824 536.373 cv
598.029 534.886 600.043 534.085 602.122 533.503 cv
601.827 533.957 601.521 534.406 601.193 534.845 cv
601.713 534.372 602.211 533.87 602.688 533.35 cv
604.104 532.979 605.514 532.688 606.696 532.334 cv
605.366 533.91 603.942 535.438 602.853 537.137 cv
600.377 540.225 602.167 543.621 605.118 545.387 cv
602.211 543.184 601.099 540.155 603.632 537.489 cv
605.226 535.4 607.445 533.667 609.353 531.384 cv
610.072 531.084 610.769 530.754 611.438 530.393 cv
610.83 533.758 610.395 537.137 611.712 540.135 cv
610.802 536.343 612.364 532.811 613.758 528.913 cv
614.984 527.988 616.063 526.908 616.945 525.642 cv
619.02 527.972 621.35 530.17 623.986 530.509 cv
621.39 529.467 619.549 526.908 617.954 524.292 cv
617.92 524.235 617.887 524.178 617.853 524.12 cv
618.42 523.018 618.864 521.803 619.147 520.447 cv
619.259 519.908 619.325 519.386 619.358 518.877 cv
620.116 519.07 620.887 519.221 621.654 519.334 cv
620.879 519.142 620.109 518.906 619.369 518.627 cv
619.57 513.559 616.038 509.91 613.415 505.852 cv
613.418 505.739 613.42 505.623 613.423 505.511 cv
613.546 505.274 613.699 505.032 613.896 504.784 cv
614.236 503.38 614.246 501.968 613.447 500.406 cv
614.163 499.498 614.853 498.563 615.509 497.599 cv
615.575 497.923 615.635 498.245 615.689 498.566 cv
617.217 504.929 617.326 512.206 620.517 517.567 cv
617.816 511.897 618.349 504.709 617.29 497.973 cv
617.166 497.146 617.035 496.312 616.881 495.474 cv
619.957 490.404 622.076 484.701 622.352 478.667 cv
622.576 474.234 622.421 469.988 621.456 465.561 cv
621.279 464.806 621.054 464.032 620.763 463.269 cv
620.459 461.244 620.032 459.542 619.458 457.993 cv
624.683 465.175 627.089 474.99 624.604 484.117 cv
627.384 477.007 626.507 469.106 623.881 462.208 cv
621.758 456.854 618.393 451.66 613.524 448.144 cv
613.392 447.89 613.265 447.628 613.146 447.354 cv
617.468 449.076 621.837 450.68 625.168 453.042 cv
625.13 453.459 625.092 453.875 625.03 454.286 cv
626.005 454.326 626.855 454.785 627.598 455.507 cv
626.834 456.029 li
628.721 459.747 630.087 464.058 631.546 468.37 cv
631.407 468.437 631.266 468.495 631.127 468.563 cv
631.433 469.063 631.755 469.524 632.089 469.958 cv
634.196 476.044 636.642 481.983 641.146 486.099 cv
641.92 487.015 642.797 487.938 643.726 489.082 cv
642.511 489.908 633.891 492.997 634.989 495.456 cv
630.196 498.146 625.781 501.659 623.653 506.535 cv
626.379 501.683 631.141 498.719 636.295 496.478 cv
637.011 496.562 638.007 496.002 639.042 495.331 cv
640.611 494.683 642.203 494.025 643.783 493.293 cv
644.748 493.304 645.59 493.53 646.725 493.776 cv
646.494 494.117 646.357 494.505 646.241 494.909 cv
641.534 497.636 636.214 500.435 634.492 506.165 cv
631.634 513.369 631.303 520.999 629.996 528.569 cv
631.382 522.961 632.267 517.201 633.997 511.887 cv
635.563 516.1 638.56 507.065 639.602 505.688 cv
641.006 503.831 642.954 502.451 645.043 501.379 cv
643.8 503.369 642.971 505.575 642.663 507.791 cv
641.904 512.461 642.563 517.056 643.396 521.561 cv
642.75 515.307 643.266 508.384 646.477 503.564 cv
646.125 505.667 646.468 507.695 648.137 509.501 cv
646.43 506.925 646.961 504.01 648.373 501.283 cv
649.375 500.323 650.55 499.512 651.911 498.885 cv
651.71 499.555 651.496 500.224 651.274 500.888 cv
650.258 503.97 649.078 507.21 649.387 510.408 cv
649.781 513.604 651.963 516.067 654.597 517.731 cv
652.072 515.796 650.224 513.158 650.228 510.221 cv
650.231 507.261 651.657 504.267 652.951 501.203 cv
652.979 501.14 653.005 501.073 653.031 501.009 cv
653.812 502.451 654.952 503.654 656.462 504.371 cv
659.545 506.044 663.209 507.561 665.533 510.85 cv
664.611 509.302 663.347 508.067 661.977 507.009 cv
659.375 504.499 658.24 500.625 657.247 496.857 cv
657.084 496.386 656.942 495.888 656.806 495.373 cv
657.606 494.481 658.31 493.387 658.909 491.977 cv
661.867 496.132 664.254 501.878 669.152 503.364 cv
cp
f
1040.95 768.075 mo
1040.84 767.898 1040.73 767.723 1040.62 767.547 cv
1040.11 766.718 1039.12 765.498 1038.48 764.304 cv
1039.09 763.093 1039.43 761.54 1039.44 759.531 cv
1039.45 755.408 1039.77 751.294 1040.18 747.193 cv
1040.27 746.322 1040.43 745.384 1040.6 744.412 cv
1044.67 747.553 1046.45 751.338 1045.94 757.028 cv
1045.5 761.861 1043.29 764.729 1040.95 768.075 cv
cp
1019.22 736.533 mo
1018.94 737.051 1018.73 737.561 1018.63 738.045 cv
1017.53 738.877 1014.66 739.671 1013.63 740.32 cv
1011.68 741.561 1009.97 743.08 1008.17 744.53 cv
1005.76 746.479 1003.11 748.063 1000.75 750.139 cv
999.688 751.076 998.537 752.204 997.524 753.438 cv
991.443 743.702 1009.75 734.245 1019.22 736.533 cv
cp
973.025 816.869 mo
975.159 819.25 980.114 820.393 982.965 821.641 cv
978.911 818.877 978.207 814.141 976.539 809.862 cv
977.721 804.531 982.546 799.285 986.661 794.89 cv
987.298 795.122 987.9 795.332 988.419 795.519 cv
989.136 795.776 989.88 795.874 990.629 795.929 cv
991.011 796.222 991.456 796.475 991.988 796.675 cv
993.721 797.33 996.509 797.034 998.365 797.459 cv
1003.26 798.582 1008.5 798.302 1013.56 798.9 cv
1014.91 799.06 1016.49 799.714 1018.04 799.808 cv
1019.1 799.87 1019.63 798.834 1020.4 798.913 cv
1021.09 798.986 1022.25 799.926 1022.94 800.087 cv
1022.7 800.029 1024.38 799.451 1024.54 799.448 cv
1025.05 799.439 1025.61 800.347 1026.28 800.306 cv
1026.68 800.281 1027.6 799.744 1027.85 799.76 cv
1027.52 799.739 1029.99 799.667 1029.53 799.773 cv
1031.51 799.317 1032.71 798.893 1034.67 797.548 cv
1034.96 798.025 1035.83 798.464 1036.09 799.046 cv
1036.58 798.059 1037.11 797.114 1037.67 796.185 cv
1038.63 795.918 1039.57 795.617 1040.49 795.252 cv
1041.8 800.369 1040.57 805.73 1040.23 811.154 cv
1040.18 811.977 1040.14 812.732 1040.2 813.389 cv
1039.26 815.452 1038.91 816.388 1040.33 818.262 cv
1041.32 819.554 1044.27 821.997 1045.7 822.836 cv
1048.45 824.446 1055.38 824.75 1058.21 823.316 cv
1055.74 822.481 1052.37 821.76 1050.03 820.184 cv
1047.42 818.425 1045.77 815.556 1043.49 813.46 cv
1042.84 807.006 1046.01 800.521 1047.09 794.044 cv
1047.11 794.028 1047.13 794.013 1047.14 793.995 cv
1047.54 794.122 1047.9 794.301 1048.21 794.542 cv
1049.4 789.585 1047.8 783.7 1046.31 778.953 cv
1045.35 775.92 1043.97 773.199 1042.41 770.52 cv
1044.17 766.163 1047.13 762.984 1047.43 757.911 cv
1047.82 751.162 1045.04 746.279 1041.09 741.65 cv
1041.41 739.663 1041.62 737.674 1041.33 735.961 cv
1041.24 735.387 1041.07 734.844 1040.85 734.328 cv
1041.03 733.098 1041.47 731.926 1042.21 730.95 cv
1043.79 732.237 1044.93 733.479 1046.58 735.391 cv
1048.21 737.287 1052.04 740.805 1054.43 737.709 cv
1056.63 734.864 1047.67 726.226 1052.54 724.591 cv
1052.37 724.368 li
1054.66 723.509 1059.63 727.481 1059.32 724.005 cv
1059.26 723.293 1056.97 721.155 1056.58 720.269 cv
1053.93 714.225 1057.72 705.321 1065.05 705.798 cv
1068.45 706.019 1075.37 707.205 1074.42 701.491 cv
1074.35 701.022 1073.25 698.757 1073.05 698.398 cv
1071.92 696.397 1071.86 695.848 1069.1 695.488 cv
1072.33 691.927 1067.42 686.672 1063.42 686.152 cv
1062.02 685.972 1060.67 686.759 1059.3 686.571 cv
1057.93 686.386 1056.97 685.428 1055.47 685.329 cv
1053.27 685.184 1049.32 686.248 1051.45 689.022 cv
1048.41 687.999 1044.52 686.346 1041.34 688.232 cv
1038.66 689.829 1039.02 692.997 1041.08 695.087 cv
1039.4 695.381 1036.57 696.01 1036.34 698.11 cv
1036.14 700.019 1038.71 700.795 1039.68 701.963 cv
1035.21 705.2 1044.3 707.607 1042.19 711.163 cv
1042 710.922 li
1034.85 713.664 1033.29 720.055 1036.46 725.354 cv
1035.89 725.868 1035.29 726.367 1034.71 726.857 cv
1033.63 727.338 1032.65 727.953 1031.99 728.673 cv
1030.95 728.582 1029.92 728.632 1028.97 728.84 cv
1027.09 729.253 1023.87 731.293 1021.51 733.642 cv
1016.92 734.611 1012.65 734.694 1007.83 735.472 cv
1003.31 736.2 998.931 737.85 996.437 741.894 cv
994.225 745.483 993.566 751.412 996.869 754.286 cv
995.23 756.523 994.178 759.032 994.929 761.369 cv
988.105 767.797 981.564 774.482 981.312 783.857 cv
980.667 785.536 979.323 786.801 979.706 789.085 cv
979.933 790.431 980.152 790.979 980.91 791.75 cv
978.402 795.762 975.828 799.918 974.198 804.043 cv
973.912 804.766 973.729 805.348 973.632 805.83 cv
971.138 808.83 969.981 813.476 973.025 816.869 cv
cp
f
805.869 414.182 mo
808.22 400.77 807.044 387.319 801.257 374.909 cv
801.473 365.48 795.196 352.937 787.192 347.334 cv
788.691 346.493 790.421 345.68 791.187 344.816 cv
792.92 342.863 794.667 339.636 792.251 337.408 cv
788.104 333.588 779.08 338.579 776.313 343.657 cv
772.264 343.348 768.063 343.958 764.141 345.266 cv
762.805 338.719 750.813 338.658 749.836 345.056 cv
749.579 346.738 750.934 350.851 752.991 351.68 cv
748.746 355.806 745.279 362.663 745.323 368.83 cv
744.122 369.97 742.918 371.58 742.059 372.505 cv
740.295 374.405 738.421 376.308 736.794 378.318 cv
732.646 376.444 724.827 376.596 724.705 383.108 cv
724.602 388.655 731.575 392.469 736.18 389.817 cv
738.538 388.458 737.957 387.292 738.878 385.412 cv
739.465 384.215 740.471 383.751 741.906 382.945 cv
744.605 381.431 747.252 379.76 750.024 378.385 cv
751.735 377.538 752.014 377.988 753.179 377.894 cv
753.661 377.854 754.04 378.611 754.741 378.435 cv
757.081 377.85 756.258 372.926 759.805 373.985 cv
759.175 373.796 756.983 377.089 756.903 377.7 cv
756.683 379.41 757.822 380.335 759.159 381.092 cv
760.308 391.754 752.165 402.717 746.237 410.853 cv
741.914 416.787 731.277 424.639 726.75 433.086 cv
725.598 432.002 724.62 430.711 723.213 429.914 cv
721.226 428.791 718.361 428.133 716.122 427.883 cv
714.772 427.73 711.404 427.221 710.95 428.73 cv
710.73 429.465 711.402 430.664 712.144 431.707 cv
711.015 430.309 709.656 428.959 707.925 429.258 cv
703.646 429.994 703.993 435.588 707.032 437.373 cv
706.396 436.998 705.505 436.949 704.841 436.713 cv
705.146 442.168 712.548 446.967 717.172 448.113 cv
721.245 449.123 725.265 449.125 729.267 448.578 cv
732.338 450.492 736.372 451.486 739.381 452.314 cv
746.499 454.275 754.459 455.063 762.183 454.518 cv
764.262 456.51 767.725 457.719 769.952 458.141 cv
772.725 458.668 776.316 458.441 778.514 456.432 cv
780.18 454.91 780.842 452.543 780.529 450.383 cv
787.312 447.797 792.44 444.494 796.378 439.35 cv
796.129 445.852 797.354 451.379 803.353 453.277 cv
823.247 459.576 813.026 430.584 805.869 414.182 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.0
%%For: (www.PHILka.RU) (WareZ Provider)
%%Title: (shutterstock_12722383 [Converted] РєРѕРїРёСЏ.eps)
%%CreationDate: 7/28/2009 12:06 AM
%AI9_DataStream
%Gb!9skuJbFdOoorpKH@)!&K8KR]EY%B#Y#`#(s_o=Fb3t#%:*i^&.cu?2GF67$^ePW[a9g54:\9]4i^Z@q9,oOZ>/$<dT;.\UFCd
%<r:3@.4?bb-,]6MP&D3_In`W'g`BH7nLA*+YQM5=TZW"_/B:/,YO![$g8K%".1ZkHC=gcBe]6f\]lm[u1tHI:[<c>^[/P:2Z*[m6
%8\\4skLKJ,g:p9rpQb&+C:!cf\_Od0YAVnU&!^bK0.SY3bfdEWg\[K7cOX+-qGPE@HnMl\\^Q`HogTt^ZS$b)G^]U>;a$q*X#Fr=
%kk>;]ia),Aj(bnlX.e59'%cm(GLrH+c.W9o6)FFMkq@gW7\`S>WS^\t^Wl!!5?8ktmOQO36c05#Z;\&'<OVh@9mdBhd$hJMiRqdH
%3EF6UXg2e(1l*pBZKY8LBD?&mE=C[#%DM,BDQEeD,+)Zn4uR29?aAt7gM78'eU$i^p4!>LL(U@>ohb3rU[7jr9$ZPGo6n#qnp&ob
%"j<,3l!qJO;nZNfRI-$CmOJ9qidVC8J,2[epfONqX>UA.CA6'!gY1[ca]IG>Zo`W"^T6!s;\*p<<.4[H46>][=<8WCZ>@b//ZH&A
%3WoX_Q$gn.)*X,AdO4ujG!M<$h*(U$:Z3-3,M=7-k!At>kO%;-3(r^\]7,+UhI7DSQTr-SZ6/lq#li?eVWBb+e]/t!.O![FI_-u(
%b593rFn>-8^%R!4!Er4!<G?hIoD@6;rG29<s$g9V5O!<0_<(P425'?4N^s(p0>I=LL\K-ej*&-0r:K^Q7r@=jl.)9W<OHpNC&Xho
%;LQ2lb`o!>>))e%EicI1Xlr"G^I/$FS<EeX4'sR@l2T4^N_?!]C:AEaYH%#e>e,9Okq_JC3Y:^ll/:iNot!`^F[>oRnagV(>,82d
%5dgT9n0e[D5<"%V51XKCe5`T%r^j];O7fBWq6([3<B4mrqXM>0oC^9)rU%pWjltCaF^"eo^UFEiBNo$"j(jBqI)I!5G"h_k)Y>,$
%/noFIIm@p>^&tK7a]9]/M7W'oli6Vq@WR%S52K*L5&<>;dqJK8$1PHlLa/OKSC.qVY(VYaYt:V;X[o?YJ@&2P5s./ZH<e&Wpoit2
%mA\elDj=9CDb?WOoqt,<nFsh#mJaQad-<Sode[4E.jEpEaE72-rVm-%?\jNn<urmb'*"&S#.?$h)"Oj/dFG0,iWoLV[g:aKaS(9K
%_%c^L6@>Fh2s6A!8!H4h/9KtnrNlml2[Br=^[E<f/abgRrr'pq8kT;L0=9u/kPODNRF:*lb!WQn:N_\98bT-l.]Lhsrl@<JpimL%
%2bL^W(^^jfJ)f9FqXg9"r`ug&qkYt'<9\"JI\TBjp1H<@!lLf*EoaFP,#&%ZGdauraBZ>1qQP!9N4URG3P:LUdY'[*Xb#R\A\CGD
%YR]:=A$pXL%C1>iNFiTfSI:T1I;YjSj@;3Xkj&2$jj[G=1i!4Wktp[#W&-#(I^p:2@'fCrp)7sYV>dqV38<>;:K"!9Ri]>leHofI
%RrsMte,O^'J#!tjq"%$i1]ok/\4j*qYKHfb=<f4G^86Bj^Gl1A$@cAeXk,)fds.fL.lXhe@EcUPHPVS_s8HAs_#5j!?N6ATn?Q?c
%qA1Stp$-$h.u?BNWl,\=[o^mM9QsflS'P9cEUC;c?"K;n^NaaTRK';DrqodS=HM*><jj4-5H7cPZR9Vh0C25F&SYJ@n(X>oYO:^4
%%+d/%b&dP4(T8.4[_BMgY>#ELp4)2Hr_?hNJ%Dh@brsp5jeDa<^8S)9ZWVY-X8ZdiBqPH,Q58(C)#l6n?KXB3]=1C5l&e`7=TPN`
%4o*a?,R3uuU[%k?m.<@<!J(.+ln'\`EKS\R,k9/.[:D)%09u5\O$B6e5=qWK4[FGR#*r0Gd3Ts>FR\(5H>]%/.Lf9CDuZ_e\WkhA
%]^Rm?Yt"Uj;HCCeBh^-,<U.i0>,?[H\qZ?P4``VmW:<i4,42^Vqs\u?M0./H*Coir*JOH:+ZeFAh3O8F\+*F5-HE0Km[,PPW&3p/
%!4h&dT.2cYD9/op/Zh2qCTV`g0`T=Fp#buD+Td76O[G5=1"rWu.mC%9)qAQbI1#)pLAZChPerL3s"mB<2n.&Sea<<P1Sim1j&f&'
%Ue/+r=)WssrE6>4d*aXce'G157f)LU2;3!#8R/[F7+[I&3_9\D2=$OJ`Y7V2O4Sm1i3tXu=0::V1%9pQWH:d;=(t^7b:<BHnn[,G
%eunIVFDQD`=eK9b<9ZngMk@j<XSo2'ItEgu@\9><V`3>*c7$-jYNg7o(4&ukY<6-hiCC9"p&47k5mGL,IqX%T&fPq$H(kVIi;WGT
%>&#n[[C^2$g.fH&eu>=+Ea>a'<,Y[[CME<eXVq.%7Rm`YRto%\m<[mV(/T^=817,oQGdI&@@$+*mU7S!JYEl$N\7GEYQE)/F6(.E
%9JMPV)!XB(lXLl?7[."rSIUltfAMcQ.R_=>)P+cfgP$Do>ASAJ`M]==G@fDf)RUYOas(OF%Tg%6og>-Z<P<6(U&pn:,Kdmqk&VPT
%_7.GiV=b`I]pmI$_=l9Vkn3;FH+^g;"rNNM`4/V9g5k"cUp?;boK_f]U%3Q3hp`V,b2Zt`a\k2MrHNe(c6rHK_u/\s*"eOc`h46X
%Vjlje2&]ct\?=r/L2)6<KZqn:Y7d`nBd5bub1F&AB'lirV5mhY@<a'HleGSA<P?`Ck/Uu<gj$PJ,gT>ncHUcJgJoRe&s9BSFC9BF
%qG@Aj>qTl!'4,m`_`d-]qH^]W^bm2`?lg>A-G@_0%#6j.Y3S%.-HQ`Lk*C=6W)D[PqQZ0l9W@Z+J,OR4kYS<\s&o>&O\3CZL:aY`
%E1?s?/dLe?l)A!$.3WnMW"mk_]*sY`;7hg)PQO,bVl4(KE.SW%AS+r%:*FcOWQm@+/*&9"A5hQN>4Yh'?EEGb_r%.eg_OQbaC8t)
%,Ae;b4gcQ_B]KTI2+b!I"*2kELt*Q'2`=*Jaess+C.*#L*hQL+B?,;(<(>Da8(H+s5KV'[XIEse*g!<;&R^cEIoUBdokKg7mg[?j
%Q!B1M.fOtsDKI$VNUgTP-g>7Caof'`iMZO5>$GGb+;cq>'XL'dqs'5ShRSW0lt2J!GH2_P3eP(4q7*HSF((,eOMM5b.n+.G'5?^?
%O$>tFXidN)3SU%g%g[Qr:aS"D]%FZ4hA;u^Z;a$?&QpW*rp^Yk:$LmZhH-9UYQS5d>bI4.&qgism]3H2]2f>e9Tsg"l`&IFmBU6#
%7U,BSX&f7m:dXl].b<l]*4d9o=BnK^]L)*lQc^KEH`Asp&/!-JqlDVBS1%:Een)m+'sG!b-+E#2[;l*80`ce5DYo>%+d'V/>e+7U
%(mj>$\9.R6<GrHR(`*JLfs3G*8;)7g]2>;'`<[2Nj*dkN,Hg'9B=ZF&f15Z$.?CI&T'j*oYs@2G)<0=te/DSb'elRiO5&H2k9LL?
%$<SPj+\uIHh;;::)iiS'?FHqNLb)X;CR:\Q(Y#.bclM.HRba!"SJ7ZAUPf'93NG[#`ng"q;1uu;6&a,8+V+me5LW^0Y',N7QKT7#
%[O"]',K.%$GUeHG[7nJ:gqn%NZQF>@>DHp-?(7^O@]$+K``$uAB/,AuK2!OY<tVd2A1rP8%C??-TqKdl-p?/8VS^dK,9-<kQ.l,h
%M2m^kQpejs5U`<GYRlLQNr6;@+/21ho@;mo[r6\-UPe*M4jP]A)gD"u_=qM`1O8nQ^FfaQ07LB[Yh"3FG<`\MT3j0thl:so/9MV?
%[W>SWYLf+J?Yt6qWuerWCsHo$hiARSWQMgXlL]H+_lWcN>0c@.b^o`X_id$hEdG-leBA;-)="lKraYikkj$"'a-3W,S+^drF`D<&
%;6QIKb37XDl$&nDgOGMZVf,O[FQ%K+FEG?+:o!WsIX`>C=?F"Bip64#kV++FL-:$>:M[u:lIXRnFn*ZpUYhq,bc0^/NC9'&@`.(]
%=2oG:kj.q*08(]B_s"YECn0(khYXp"d6=/aTd0O4gCn5NRh*useC&T#/H,7(qlB^5IJ-Cgg@Ls"QFB@3m=s<HDi\YbNfG2mDk[?C
%7_PaM]DQfA1$\)ncC`c;Pre2aqtVp#C5;p.G\?sRC@QBAW38\*1r`>;&(=&In9ShpC&Q5eZr-!m?JDYsR#L,f^LgiSf_ap.g?3*`
%9?ln&N]OUkj1b#CB&:!eV.&'[X0%GT2DRaEa!V@X=')^trN<TL5G+a4]"RTfL7*@7<Ba%Zo%2b6=-%Ye23lftlXf\eL.<Ps]\8>5
%lZrGuq<gC8S`*GNRcr=g^Y#aafB6gH]@MO0(U(8&7s451`gU&*Jr%o0-7;RC"33me\oo0n>UssH`p,K5CXaB:p>rs<*gMe!"JNi4
%)cPU(4`/^Fo64\RApWR^\$T#q?G/JD>,s_[_i4V@rp6I7f095/[WZ!uVQP&XlQMY"hf!m5)c^b*DVqil`SSN<T%lQ/DJ+r4<SJV8
%5GpmDr?jIB[s33mUO#^m;/)E;eFmGZjR\)i`2LtR]Ak+RFn=qT<c$:3bA-K_?t%R<Nj\<1rUK6^'q7^i@?SgiHh^I_*7`s(]XZ*&
%og0\S*uq2<MUd[Q:4:tNPMVP4>]m\tH'tGqD;2[G`i*6\p$qG>%$);^K'76!T:<lJgL%VC;,:3`2KRB/eb>!:dRM3dTn2+$du13e
%F<L#U;lA*>moNCWrNpN)R5sQ1e`iF\4=Uf(ZJ8[WH2dJ*qP`l?<e$0:cVCBuqX&$65Aa@rBFK9tF?fFN"3=hNeA]D,SNc>Tgt:(,
%;>\j?^KY@"4=]rlcK1(W?d(."O8<U5ZsMWN]Yg[h*J`gnHo!_D^Ug:>Qi=?^`@suZSrLch^"g5-2DOKh9CJS"UQPa6]b=W9bi.>T
%Xgs9ck<"aka2Nmfg\iA<!]Q<])Th)Y^40%,eE4nYJhBfs(RK/eb\tb&GB#t>6#CM2Cgkh6HW1EKl/KYF<-?nVVbsppPB??fikd&\
%FiE!=8;oV'n_H\Y'\:FKhHimqC-IZHlcj42D!YZ^Z.r:DlgM0>=0jaK]?ql7W7Nuk68!W[OSEtJ%,UtSr#0(nUXo+mL!8\#bHG^U
%3PQV1eh_fpC,TGTb_HpnPFPhD^"N2ord*9an+Vi+?KV03oDQ7[cm]_'8+1q>2rD)OPd>j&GeX'Gpba\W*1mF$G4Xa$Rqp]lIQXVN
%AGuq)esnZd7^mg&8LmTL5N/eQs)e28F8\,rf2"%0?UTF1;Si;mS^VuLf1,J;T:IWVM-o:.qfXoHOPThDg-3^Up#eb$o2ecPg"#3G
%bR0)Q\kpNJol^)N8bT?'JSjQNc$7!>eZtYdr)n?6q<QJi;sc=NBVUc4lV:R@ZCX270D:b$_I'L0<,g>d)\;IGT@sVj$W*XoJ`7Z'
%e7a>p.kEp0]Qtc*[K!2):uu@bJ,9.^V563=]`,E\B<89g^AG8l?@@%1YqgP$d9d`]I&9]oLSTf&60-ZZqmpq!<q3,LnYt)i+'P;V
%(N3Yfc-Sq?D%_D,3Jp\MqNs;9qJ_#;`Hk?kXiobUPc.IJ*gkGD'fp8sho1$DEJcU&ZY-KW+PDfWBql;`?SXB,AN_FoVd\M&<-K=^
%d'ns2cbF(P8lG,APo,d@M$sem.!&AO5sN7a\*p)e^)EQ!NbTZNLdLm`1#m<.c/dr1"N\q!>,,9+;4V(@%IV\8[:d3"7\sO&bH7!b
%7qLL!@oQ>D8N6F91$\S2W43_g*SZ&%Ard;T+Ce@`(J)oOZq&)M@KR_6!;ZT]C%eJ:1ueE/!l*%PV\fcjT4_LaAlaoBZdr--HKtCo
%dV><)A6!1aXA(``kcl?ZUt?!F@K<f136T/3ft'2OU>BY,`Y/'T>;"6?c:@l80?gT.FSZMk_g:hRAOl,d7<!B]k14:,pG*'OZiTL0
%B"0c+1.>,$3M`jB&E'-m_\#:%eg!S[F#`t0<me@c2??eGS;@ROK@So[b>6SG+13rM*OQD4eYfC\q'/nV&^8h%f+rj92^\$,S,q+T
%l1Mt=VBK-\QOT_\@VVeE_^P/DQT$;aTDAFhf/[\*&p%f]5WGlcA,aE6a.G"^qb5dqaFIWchV@3B3Dem'Q*UpZ!],[%[T@.UGe(H<
%D2%bK]8$g%_l9mBgPCLY.B<!8X:TDhg)a^jK%npaTrS*pSed#]9Tr6?X`=*7>Ao47^;_Yj\&S+qnEXXG'D17oklLXIp"iK+B$q^h
%qQXB+dP&6G<+tmhnuP<32Bgdj';>thISW%G5$r6G0XO3F@BcaQQ7#+'lNH)l2"%h5e%'jt,!*J'+/R?5)<c7KBmtD8gJ''TWQ.pG
%GcAaTHm*r$qc_dtdYIeF`Nd94a(].KO&HgiT3@"%DdD,0P8XU637#JBm5Mdt/.B6<W-_B`%hE.TZ'iP&UWfi<5E)l=DKse?R#$;q
%_kqR\;Af/^ZppY=qhsF]`<)82Aom?\n;b-/r2.Nk&dPWr[QPEkI9VQW-`3U:%cEWJSA1PO\)U-Qr.g$S,`u@P.3u/RFubksX77d4
%O=cHZY@@j4;.-GW,Y!--UT2S&`V/*Z`3-20N/?qkM.O+!.&sNHX#B^`;``+T((h[!gTm@qMBKMCaej\%j\__@D.@bVpJs>El4bNJ
%"_,njV#HqBbSLmQ!1C+0,-#!4kAmSs6Ig7BC:Dh00J.t0Cm5`K9T/%4*Qso#S(;\EF%UEfo<`OK]n<*2i@V?j/EfM[Jkg#)=!NOh
%@5*hYLTGh<gI@Y2ksD!ZOmmVZhQeH$T(!+n/Og:tnD;YkJS#<*B]ef7Ado#&c)ES3c$*p35BkW%<+Rl.f(tZ%c*amIHjV('/e]0b
%@d3'L\M@>jnOYs:5Bf.&pAU+cF6,hl9P[Es",L7*W;p[.'NG>Mduf_(RF1*2!)h@ij[hXiNX?[rTeTfsj^Oi<M/Z6aVRRD/3Kqr+
%*"'0/_30m@$dL"EEaUY'DlS.qXLXn=Y]e[]h8U7j!r;]Q>Y=ol(bdh\;5_>2AN_g%DiLC6DT7pZ#[-;Nhf!j>^pTFPrLeORr5n$s
%^!.uO2M71pOrgnhFc6YA+U-ble!%JK0\%fFqlR8HqJj9[jWb`0^Uc5c,k@g'qH1X>Fq*T;&59[n2Q@itJ'NAEHph!/\5GkqT\6(d
%1'_-/d`O9M]WRE@brkFI!O'FM2r6D)LY[7g4?[mij2RkL1WpF+n1K1BHS[_Hkq#QDB^)*+1FfDG]LrV+RDtJID))LT*o=jF\V1h9
%@g'/&Hb);KEt'9'muj2%MJ;mpO=8Bnn"/QSB9=K_$Fb[SJ#n=;h6W7-*W([,CooqSr)fEe>guk)1bHVX!s#aR4#m:U'8;fFU+Ktm
%-GA%\Bg;!n-1+#DA;Jpib/rF`[r^"=Hr%@7VQl4918YdoNCt@jMP*BR?]:VHQ'8%1ccspVS0_>F)7grE=ui!)H:R_>LRfd*gVF9p
%>#KqWAm,H28\ri1d5_$h64,]n+rrRZ!SDK1F*F&D'gh+N@P7RanVE8;;MNYel,E&K!.lKBjY+:n%d"A?FkS>BcQMR-.]T8QV+,YG
%G-TJM?+k+c:8-!oo3E=BHu08##ot"TQbirR6[\-P1sNNhWm?\<ib1q;,'%eoW%UA*_AgH7otUrVr#FKlgrl'2Eb+hY2lOW(4IqR%
%;-$FR5r"),W1=@1WLha<T'hHlB"P=fUo,meR^+lmO(eU=FdhJk\'nN4\qT+<_\"P@7T(7XS]6nAlIHQG;2i)_)t22/?30/a#^)ma
%%S$a?T[$:>:q%WJJ9Gg,lIJ:QKIO#Fl:/Ht;7D4$YWt^rnD\IYEU"<\h0`ltK$rb5pnkIkm-$,8[o1]XR4c*67?>[eRCQ'qs6MQg
%U8qX&me6HT!G,J3+@hm>Y'(tP"Xn8H$;bY4f5"/;Isb]sXYQac'W*jZ?b_WqFK/:,BtS`]R&PPU_eE??Ddutc*Ml8+,^Rl3[+p\U
%jpR\JVB_JZ>?FhdGs'?YHf`2DjmpHqIlaEU.a):]]UE1%,LNm;+Xi'16rVD%3Ef;?f6TMDUDp'FifBA0X"MF`@p2'jI-O<"cXpt"
%Gsd\md7X[bm#A,E8):$A,&@]/%4M2@?=M,U7#l`lj/6-DFG)[>OSAnTE?U$#SeV\k"OOaMa3/c=IuMBYAZn=mhdC>'ekX6?U<m_K
%bUhMg3fSGCg.db`I*S_#?Nh;%7#MZ<Soa2amR?#&QO]Z'3UB0Kd*$ap\9A=5bE-n5VTUtXn'5mc>QZ]V/*F9_5@bq,C8WT/3U>a*
%=,l1;EEE[LS_</K,,'#HM5?ULgEtH[kH'@jkJI_qV;?7K5=Kub_?eMXZ+Dq'>eXqe[6nRd(8;)J?=#/sl-!@pgl\:%,=!DV%u?oJ
%TfF:e522`81b;ZL%rB7WQ`55J;YRgG?[d5=T=7RVh^g\;p,;4QY:g9ZoB#0+7@Ed5l$RQ_\U9>;_art6(ffbiNC9t;(aPY*5F6;a
%S[pd_3aZFIP[(r$$p@EJ?[aWb81\n'J98O'>e[^pFb"SJr*6su=R+lGl$W<;Hl?[NVt9$%"42dccBk0HQg=D4-(Q\P=s],VDF`Pr
%-R6<RlE4biV7i*e,csXV@$p<_e*8uloi0a3Wj%Q)k^@X2<hoCcfaNXHLOlrsW%nM9%;,W[2c8J*3mNdre&8*hW+p>7T+]2Q?d$Ya
%Mg>^hfI8O/<eXgJ4ko3EMFEZ$eh)D+>[b-$H.2VYT=A'8:?!UhXE=spbQ3*-:>H@b3R^UBhs2_:Ns2J6Ge<eED.\Z#(HZ%n.D4:a
%&7SNc$N#3Z[%Mu[]=F=FG?uD]8JW,-Tp%KOBqg#OnKl8eRnErjp6g)*.))L8JJ`*FI9F!f>;cGFY7VJ(9c#CX`MC*r.d4"-.brEO
%L][*GMV1bHU9`<DFY?@\[sCr4o/,LM<[-cc@>*tjmhIj:IgW&Oc:=X/ZYTUEY8kT-&OY;O>_Y^-9nu1!cEHsp@q7R4BPD,4[aE<H
%[$2fISL07@Jh25i.I7\oge1CNcmA\r(d))3:-aA487e,ea4r\7k=+7:GHb1M<SZkB/C-',R'N9iH?RGfL%g\2T&$3f*dZ#AW'ST.
%4nP&4U6Eu)WdC"WlOqG!bJ[eP*?NRJ_@68@>*mt^\cOJBfk`;@8Z(sXSR(=>$tRPF#tE9HIP,s5e'D\shHhD#X'6ZO/j3@M4ZkOq
%:\R9$[Bi*nkId`W\C3>@O(@(le!@&`7C8WRKOVBZj`W$C.[QCe/s<N,Og3>WQ^/RN3UC`O-^+l[frc8/kQ]J"4G&#)dNr*NcL9o$
%2$,>.gPMQI'NX8Rj[)Me@M7hl[rD_\RjsktCD7*t"VA7<$<3?[4b8+$MjkkpY"WbGoD"p=Zu=3G!f=>hcMlRo.k"Cm.gE$9gf+fk
%g9,#+6R.5c2d9*rNa<nBZKnkQkEKnu&T+Z6[!K%7j<sitB"]X\Sl`kW'a%IkH=OVomM=j6Rs/StRs[oQ8e?<R1fi8EO\MMkh@7SQ
%6RQQQTTu:aonF5p9][q189!"p]7I(C1^rs6$:UP1bD49GhWWK(bD5E@HIMFVF0=Goef+V/.2G>.4[J:;LZPmYTLsf--W4H@%\(Si
%fThYWdG,=3"mNHGU5eM4+3"Q)Lu!a[-S5=qYTEAB>P-XU!_dq)_t:a&j1Q<a0Tac9nq/+>ELko`r!(;We].LBU+s78;Z&::N-Ye-
%"DeDkY[lKLirJWSaR`'C!`"MKBA=k]gasMM)!=P&jsB?q4[bJ-PaN<tP8UefSBO*TC!#GK@;"`q((ArAAmR50<[[&>k'Q=9bfbqc
%*,]@pQDd".bWHoqf/8n2^s'Fs,Nq3bUd/PK8<7tloU2,6]f/='bSpjeYW>*3]4^7@EZhRWD9O6BaBRuu?.*-fh8Kb4_=\mr)2h;>
%]bLgdm$`0b&FM?F?Ffl07$$I;"^H4BQ040R^O@E8(T?!6+S*6.l7V%VFA4/N7g%YPg(&l!4MP\7>4E0i0Y[D]WI5U._bflBc=9J2
%`(91T=^CX2HM-uD)^22iTnGbA1;/E]*m^JLQ0i%T3]R"a:ZjG[F`Dm"o>nV@jIN)8GB`MSB8sN%<9K;<'`:nAK(h0pZ-l9`EJ*sa
%b'h=O1u%oV/T7ano[rlh5Jp'U29*44q9i3)X>*aH].B*jCQ-r'Y-MN0nrmT7A(:W`5@'I`57Jo1p=$7/A3UMR8bUV0P%5k,Z04X.
%h(2t"SJPQZgoCV,2A51-je?O$KUnpa\G+A,^68&-f\/$CnjL"$l=06%3%6Kf[)0qo]dMq'!c<0RH,-d2Wr@N?H#:Nq^npu--fnnD
%=nJ,HQQ\)DFC]fD>a!nBmIq0Xbrj$=mjW_]dR,;<Z?se2HL(%5N>/ESB@7O*PHds,RTI]P<Ic\HHm&)+UNT_4Pp>b[@:Vafpje7k
%MQ#ONe&oCpUG/lb+(MsYa&nlFRA0FA?<[@h](#LREch<Q@WQX"e[cT'GSb1VP(L$#:Zq<(3rO=[3d4kY2`e]n[#R@qF#8-hg=")<
%bH:aX91>m?N/?bFK(1B@Hd#_%d^.h;ND4GZ<7EN3:V/,17.DT^lJ*o]kD,!nh=:$!Vu&.#aaWEFo@!&Uk9^$(G^l5DlD3t<np2QC
%g$^9VJ[`&IaJas&]CB7Y2L2Z-hC8Boih<d8AD5jbk,8FAf@e8pC+E-L7l$;,h!l1N&*?;]!aKWK?c,Wt3YHq?E;o`Kk,<M^pK(C)
%@l\JW]rANM(11smEO%]q3U5gtD[RXsqcXHGnbJC*M4+%_2\/IoaJaFTr:&@HSicr7@e8q/Xkj=J+P<j^r*feF0iK>]I9g\_WR2CW
%ICf#n`i\EM)RX;d\)$(kj2.pCR:7eG0,p=Q;f2+nd6sSDWN?RR<VdYJfkT$'NM8F/h<#DDa$h5aH?`aL9e]%sa,lqF9=%&U!arT(
%Y?)97.?U!G`S'1G\Ci^8/1YnJb?K5)^9![S'oVA5!k+#i0`+#$W+6QEAG-AB]WR>NVbTSqVUaeiM;iR`%F0TuS!RDfOeFdpF?Y./
%BOY?&'Jiu+K-^/E"%KWn7T(9o)_eNM9bIskD2=$sBo<YVpJ;P#])+XGP1\AD&T]pgIJGh;$n\_;9fL0`ke7`-;?Vd.e?J8T')Pl0
%(!5_[agr.ks2;WFF8'VeqpITF8MBKC')Q-86TV8$iPcg,@UE;>?Uneui/)kr4$4.tO;q/-?Q,JP+4$W,p8)?n[>,W'@UGSR037b>
%-MF;'@7l@8TS\)2?&_7D6QB!5?Z46L^(^Cl]&MYDi?n7-%qrM1I6@\7^Vmk1W1i/sp-m;/R+2u\K?HCN)1?UROK[J+AuJ`0M1*K5
%Ni]s4)(U+\p8)We8Gp>`@3kQCFYKP.n/l+K?Q+SfrYg)l?g$,;\Pn:koTn-r#*+he[5gTHm*!rc##"<@ccJbJ;_0FCFdM)KUA:p2
%<K?C$D[Y>\2=ahm6^""hpGgk/mHG03gSlIIRpD)'F:5CHInRuD8gkauGf?l<[j&Dui`@gZDK@9FF5&XP18TseRaqWQIMK,$Us1?f
%&TiN<YP=V3V`IdsqZTu$W??I\>L'TR%sC`i&n6K-mFbinVOqjnl#edrA4Ks-=2/B&ZWX!Bs13qgnb[e<LLB<gM_=Juoape`rqKj(
%<fT?cs%ArQo_8B31Yecgrmt46FRP:jV)XCb3oBu'b6Su6r%HNd;D>\Yi8]:nm[7QRlKduTU3GAZ-4LB3--o:2q+]a,*nJJjQ^s4"
%'$4H3+Hc-d)/^EaBNj<;&99Hd_]/K/m\Z!43NjkX!/@-5)u.D&Q'2M%aZ]NS9m1&W`_3U?[t#XdE>U-!Te$1q3Rs8B<4V@I&]H`e
%feF!nkQ(g$%5ZLkH5g=le_rlfcel_CD@?Qpeg4t9i)sYP/Z5As6&>[;1=qe5(@5]u^R(7UW,"o&ca=JsAr?hQTslZECqXBVcEnHt
%`#EjmEG3rC;HIkK04sG53T9(06,Jq4?m@0_OChr;H7C?&gPgt(D1le<;0:YQNP*''Hm`>=@prTOh*.qMb[nTY;HKEnEYM4kD;5kP
%K=Be!NfCY;YEj<Xg$j6&A13;%>uN.@MS-<<15MP^U3goN"(,QR]qe<r*?jt/43E"b/3>C@?1G_E]i:D7HLE9sLk4iMej*R"H9M`F
%VGQK#s$d4:pFQ+-hh]!;ZcdV6o\I9E=OL*idsle9a-:fJq@M3SH1rsLW%\#>hZ1\Fo'Tjh^Zi5&65oShJHl=5nEunq2VCn+($_pe
%]72'alZ'hap8s8oV-`0/,>J'bVson1BqL-HmJA?ofn4`QS$.;K`(tN`%`87X0M&Wj/(=nH%3aIB]jushm0M^'*VFWk<e>Ek7lbeJ
%(!F=0Dd&JuaPO8l0C,0c<)hF0N7kIgL!CpFlV$@t36?@O$fk2;9b6ks>/I(-.im3q#O&1ah.HekkT0*@>64+Tcdis=RQE@^P;`'?
%\0d\2`6QdjDfhB'nnp1[_Vp2c2c4JLmFp7h68J!f)=EV70oCjX.5Y?g#(?t:b,!@=q&&8Jfj-?u[mNn@Sp-[:i&U7,Xd2sM1[fMS
%XB@f^.jir>%k[8DWfcED8u*sOaLb_20D>#TAs]!NBNi;u$o@T611GP')CYc'R1Q>qUU.Qc%8Ia.MW+*hr8l2DdFjS]/j:<@4N#uJ
%7kL=gH(#>YY2(CS(A_V%)-kYDR<eejU5FOZrqPC#MqV)RU+>poh=T6UUUuK/]U@Pfpb&kY&4$K.f%bm+bDk]+4^'KlZgn,ME^nk+
%FkWT_]KlDn^[:lCCXhFoFQ7l+kHA#KEnQk+1ebgen0\"K@Q[.umcFDhqi"CC?aFZ7bs#_#"%KR-[3cnicMORr7o`dNG*;*ND$Wqm
%/Y6:FNCq)ri(Dl'IqgERe9^0<]CF*B8&((r-P;D0'$0ZiM26't'*s:J]"m@tV_BFhq5+f/d]4FJ=,V/\G49f7^E/=_OrAXl(O^6-
%$h"Ws_\5_gkGK!;1f(kI3#[Y/02NoZ'+]UV,hts3#1l/4FaNC&)C^eu'[m?_I^gO(N?1hA"7&H</t+5X?e+i?mG\Z**):[&Tq^aN
%3eD($]u7ElJncbs^hon!oXN\lXWGsOjp&Z%GZW;+))U$LCCF<3n]7,!3IcbYF,C6"Qr^IGYjQR))OL=c2gI,c#:GoMCa;R'q>=`c
%F:DWI:8k\co;P=9]i]/2dqEkj\1R%T]\)Sm#qcLSV'_ffN"*K\-ijG)e'@-K$CJZ@g=)-3=%'[G?]kgRY_NM[Lj?JqZH,lO2M9dL
%fn%LG3FQ;a+#7crn[@ktMlO9k_n#!"3^69o,1O(K^"&;U=j,/pAn:!%A`%]:ggHeWl<CfCrti4!.;jU&CI]X<'_\$`Y4(Wi9ka,s
%?Si6uhZ[o'LdVt*/Y$)[g4Z>7jX%q63.kdgp%51TcCC=Rn$9H.&Q(]_QP^tIKjPcmMh/GI?48EpoPl)6_WsE>Ys=o-Ltp0NYdZ72
%5\El/,^HZJG),%!TOi<A4U:8S5W2IM]lijqp'A#X*me5Z=`*:$XWr`a>N7<$O4_QmH:ga[RZEhZ4F9Ujba:dg5%9tZhEsnEd<rlM
%G3CP-M+."J'*4GJ,iBE[8(<Z_rMChUbt!]s_"<bP=>]\!-[`9l8n-1q`8[5-<lfBVI)KJH]ZcU./["Sb3nMmtWc[Uc6:.hY*qEfp
%71m+(Q<(K8$Bo)6J*=/S(pWo"*\.p^W]s>Qn5s,%-9]#^$:j^j)oKb+b^$:o*R!u65$"&:j7*XB<gY7"'a7U/>V4FhI]HJr#7pE+
%iK<b*J9l_7Y`kqR?TZJl9^2)`_gGBUBHYSbM?P%`//$YuKEi%Z?TW)#.h):4@GtFm#(,hnOrQK8>HKY&4Nn=i8Inegj2&WLBcaGu
%15-dhK81miBb<h%@+%1aPk>S$WPu]i+$@cFI3Wb=d,5EUjp-MQZupPAn?CR*-NcSX(a]6[)hE>DL<Y#5YfD.;INL[G*om$2LNs0]
%dt<GOY8rY!,VA]^i*lV&k3+b;4a<?0LfbIH*l<PbiPa/O47"]g3r?b2?8-5H#7inBM.HjgTg2rq*p33[*RWEtK82J#/5:UHi:JMm
%i*h(LE1:qZpu#T47*OZDC3^=2k!pkB3qE/qn1Xs5qR+3b%`q$J*mWl]FuYYS[+*!GLVl]E)_g/+,'=Chi*lV#L](,%NX$*d7=u"+
%WqQ`/1OJ@?gC<f5iLm.qeRB%1G#'E`G!("/5fuOlCPNKq)skDYFqS4er_l.ul2ST;I(aAB.m7cPq;:bs@?35sqn^2JlUQhe-$4S)
%Y_RE0#="8PY9!>:iatB!R,:OD>O1ao_mE`2Cc8si;4-]%j^Qsc&n?66n1\5:*bet91"_,6L!nucJ+0\-Od<"N[Ldc3#7pD@eT>:n
%*tKEi:km&,LM`$Dhi8$]^IARC;`K$%^4)u!#S/!=Vs6)4*6*Vdq5O3Fa_$V>&+e%RBg1dq*^%YuVS%)>c.728]ZPZi:h/5;%j'kK
%pDM#XpBM58JQ=J_ZIjebq0ILFmb.&]LHU>>pAa&ZL;^#t4%p.5pOe7Cc&KJ](jG$W%,d%11OS[G59"Yh]KE6AG2494\t))*No>79
%rn:eX2lbI7&%d._L@a>3IZj+i/$3p/#7oj98tnbu_qrGo\=FEeY>a-#Ua7c7"8,+nEOVE?B2jaWpe.23o\_!Z3]iuQbG3!'`-H8I
%/7@d@PLoPcq\T?a-l:PUD26Y\R#/Ujff?.A6(3VI5Si4:^G%_E]_Q:/djUJ%5NsYaeb+7e[CN_no'LgNFQ1]SBpd;I-+,Tk><Dg<
%C+^Oqcb6tu>+8`F?%4YSZMSE0D8(M*e5igL7W!SN[\L:oT9%Kn\+W8XIJJ8mp1G=UFo6:&;9,"RC[1!TeVuV\HMjU7pP_?%o]b0>
%okENF"-pVAh!M+[c17:6I(SmH^<[ipW:-oBB'T'`$WH`<l8Q3/W(k".5;+n/1rc0=I[$rts&l7gri@+m]2PL%-YjBm2dMiO*fckA
%rj_mcZ+d_*C"epBVnO6+q)$=Ja*6,CF!%k$Vj9Q[Wk*8R]Ype?lIX8aDf>2*D9L]M'(?Z+laPae-Ot%gO'!8j+TTo;f9tCj@!(hn
%#-j#uObr6Zm@!RV=0EC*;W5S+T`n5ln,(QUo%,qso%KtLC5#+LXcK*_eFn.SYhnk6h/I[U.p_i.h!;o_I][Zb1*ee;IkT@l?Y_;l
%2P-#mjg;CUdIQV$M>1YA/7W?Dm9U@sl(e;hp=n.S*Y1DtpI49>5Fmd/03#rQp\PGM?K05W_pO1WaU:?DX20.Y?h)c^J-iXjp8#bh
%e`IgCpM9Gq[b"X;rUf>`DI\.TH#%`hm9A"9+22Vuc@"<AUODPq%!_k_6V@1KnHDdlQCY2gOTi`@2+_t7VHTUhn[RO@$qIZ!3\0I9
%`5:^-F^BQ'0:24:ghO8W[s<;.KB[ck<_f:<eo*'s#'8+%Hb))bDsCq\HAR-H+-pNn58]k+9<Z2ShTWHY+F^f/*<*0BNr8D6q;P+Z
%Qp'"!XZZiq\@j_O[E_0qhL794#%)K9mB)*9%kMKpg"p0gqI+C@5iG2E3U9-'d%mim-9@bF'%782+,B0'W%q.u]LVhpFs/+^c]UI\
%AUA!k_@QIhf-:IqD:"mohODL%1[3Lpq=n'XD4GlKSmg/H/Y9`=%AdLaNL+t@o7Je/A$,Qms0?r*o4.`c]61?$muR>XZtq%DZ@7G_
%i[Si_Mb<ph/b[\4U=3/)77Y*?Wnjk*np5"uojmXTp[qnMmaLIAe]1I5^<Eu<ZPS5?1Y69KDdMjked:.r=tOjnc?i:'BK08a[?7@R
%VmZFfAOg=ICE=on1\.M#G.PJ]BFBi5jjVprCBk"#S5AP%gE]GA9KJ?Z]CVT%3[=l%I?9&KpReAJlq\3BG[BCQ!-UipB3(\01GsuP
%Jeq!V^i3S,I6Pm]6Ao'=Au#_DjmeP;;YbrYa)b,i%ddu<fUTt?]gRt$eu$"HCBB#/lK[gf&l*U^A4(i?rSasPkIeeg,c1.XkVq?1
%:k<oC;&N\u[qEskW84rS963cu8LE5?(QYn:fhlG?hX:f[[/T!=',nlcA%1gL7*("NV<-<MOg<-^>GC`4lb&?"dC&]DA0n#dD\n[[
%[0ple9*1&r]!MD7DY5>B)1[>9fKP?m`A[p]gF(H6mG-$?K](:PGYCRQ0uiJg93c^(5Z8moNQ;rp^Nh&,(/`U:B/(adE:JV[IcH'l
%R<[M[qXqCt@)dW-=uhW8nb29r\_RL3o];:[=f=bZ9tYXt'"^VA&&\[kit3_Lo!A-E,&dk7I!*g(j$TOO.XR1uYVWi=QLOs=edK\q
%Le0:JDrM[%6H]+p3IE<caqe2mZt]-PIt4Zoc0Mu+JPstYc\WkhG:?4u)Z:^`arp.0j7Vll9bq(B;=&/r_'m@b>(5$=9<r2L]*(\W
%nlYTTj&dmN?&jXM6BdKB^X/Z#6OV;:]cfE#AoTI%[HI%19Y$a'broaroC+&TVo<I_8RLc6eO]"TJaZ6$D!(Z.>ft8(c[9e7">K$7
%q\uRfirNJo(oE/\d-@AP4+1n&9dFZum&S*Xl<)(gflR&P`6?,5o;Hs_BUG4PPqV#M2WN&'T:6GallJ#%U#hH#<Z`t:N`pk$jn6IH
%W'Z[J6DsSJ[CnNt9nI:,diE*>]&u9085^Fr=A;:-^G9tc-5!A(pb`.e$"Q02r$04G!aSi2e*#?GFZm.?qs#k9Y;Vj#+''$W<?C!:
%f#Ls(4[d<Dfg!63eiWn8CXnVs%8id@jiWc&T:7?Pi$e#4,^1i?7tgVd6uo26'#ON1,.[#J,/X4A,.U?I6r\F27jN9jeYC"Y59dYI
%q+W8+Ue1"Q#jnnrdc@cb5[L?sU748UGocf0P"IKLcglk4FgJ.JPa4Q;pCD$X2pUjR_@q,ZH[%JM?G%:?S.npG\YC;\aJ)V!g[Ni.
%8mgs'@FEF0:%\rfQKAV(&!l=q[8^UMFK4ES_=!'1lSA@uNU;YpB/t\1Y)")5L+'Jm>*Io`]@5!aNHt3l4bWI1*.)1EIH%8,2Qt;!
%%%R:PEeNf's*VMina9COnMpa!6D<(geCn7+j,-7;m(As-.0I)Vl0E(P9!8,B"F&/uglh+E7bRP#e)JdHIC4N#^\rHT=<_eZEoaFC
%e[L9Qnp"*fW`Q5CX8cmOe?5DcWfPEQ;JC.DGl@#6hq=r7f5@Ubq9\WZ@:]ktYR"9YFrro_>55g3o0-=B-L-1m=aBi9e`Nd;lHu*?
%k3PS,rHMaNKMn1Z;LCW$^=CF8?Q&.A^A_X>lfdWM`Q+1E=.ApPR/#F7N6ZjC-7s-4cgp;lN@KuA*3Ylm0),e].c8:oKsbuk27;X%
%D/8@(3OLuXOgZl*o+c1YBsM@)2#TY:4T2h+^04dr1j@eQg&ATB5>FDV?eo_:^Rkn(f8.Q%$=4_.XFGRU^9db#`P\:XG!<AQWib="
%1q#WRZ8`lXjTm_,W'4s\5J(,R06_<r=c8M3nu_G?cXN=:L+peS3>iLt0T7o`:N/Jd&`Kq\o:`S5f1.)73H#\olaK?K$0.9Cimk*u
%>.qRno93$R:gc4CeHF#bIYd$4jG+E/VY*=9"T4&cUE[H)]Qj<(D"N0G:=8dl=J]"U(Hj#[jm1J.$dg&fQ>lWV0=Cs<SG.oK#@kg1
%K=^V[Y5L/Z/gabmJ!cEL=&0%MpC@W`J`6jlb;?@kpe[8+fBt\Gq4NiK<&^t(%cgYTkC`3sqXYLJA3jF@Mu1P=&C!EH@5)?LV&!l2
%Q6V3(hB,O0c3H-ADdKHm(K%ORm7Gf9O\@h67G>LI>qYj#AQjR.IjM[*dGqbshKUo%o!7[9T@iU6]l,jYEiN_8+-1.n56#*#fZa(J
%P*n,P2g=6/5;BEWm@1Yko,@8l;d#d#nbK:(#gA:o""g3`gn0u1e+8n6p0F&T1R6.Dm*h>)=j@I-b:NeB3hF:sJ7H?g:TrWg=_p4&
%0GW5bXrJK:!T;E;UKEucZq--&!5\eor!<`VE!Vf3N4n6r3u:pXrI[c/b1N$EL]H.<DSg*rZ>kh;@>;+hY=U6`]NI8lQ*Fhg4,8%U
%:WQ2d/FZA`\2]@Ji;@:PZibTW`!Q(rAEcb<e*oaF^1p&MrP9#ar7!B5ik%"o,9A[M`nHEDf(m!>S>tBKbo8=KC6T&V7SH9)K"Lof
%qm"2D,Wu,7M@YW$6J:-rpbKl&WjXC2]AL%=`ia<<g(+@f40jR(-R6WQhF)35:2MLiZl'lg?QEp_>\<$'dr*X%M=rZR]:%kmDZ.Ps
%B%t%1:']r_gqL-O2R^98%mFYG<GaX&UM>a)D,"Qp\[_"mlu7)/m,3%Jk//F_M:iSdBnW+^Ge%3V^AMFO<c-'5kXmB-QU/nH9A-eo
%V8_(*RQ)si1".]pJLlFD>Ii(bGt\sWH/oi*jrPc4E3>YQGG94=13)ei7*Q7GCD@dTAEIqN1J\jU]Qt1'*rLb*-aku!,Bh+AL#%RW
%6[=7Em1rglPF8kM1V\`LT1Eh^S^@)$`+CP1\/@)"gDe@n&_gMeF5fk/>]V6S#W9R/>:F1/?7)p2\6X3RLcI*tRdCZ@0P6ua&"5n.
%XSIIh3$//0%?oOXC\i-B]VCnhWRp914X5<2=JiOBkMjb!fcEf5?!io0],n#^3#e:7U\413SC<*.U&^)W`+\$bKVPb`2*?.iRutkn
%Ye3`K["Rdq:gT1mo+0"0/Wo(cQ.J<<+L;$bo"'im99l]9.'H/&[!tnY(HLm3r(uKtF3dK]D-KK7!W9#&S?0#b_>LA<S?/F5Ih4h[
%!@M["`)kI7\dIcN9:1Om)TLn$j%\#[7)]g=FBiZH5B.G$Eio30p2R;,GEn9+.*4]2rkVqp-lJmh1*).a3%3Up)Yn1FW:Gj-Rjm`U
%]O*:oesdVff?N((A#90KBo1$Yp@h>=DNpGZXi`:idki:l8[[fL)7E+B@\/o2J#UjGrg`q6jKH6S4YN6NcY?m^lU22R+\e:%NQuV:
%WqogLR0=t\[4feA1S&s64>u^%!.TIWO%bB[r/GX`kgOH"qfg.7m?bP7;l,rqqMk,q_sklj@!OSGb:6_njcpn(;W"m\e1TL1iKgEu
%5$@O"ZeVkR>60V_EaT$W?HXkR[-2:CC6]6>Tu3P)gq]h6DG^%#e)PbG@G*("b9lNLALh_rTkfuHgS7r\.\"TM:s19AY4#;O;g(9m
%McAA2$:R86<T0TMC3r-ekSRmOED9ChBm:Rc<nXsI77@^2!sLNC@iEeDn]T(M?W$*VQ@WdWfej1r><4YoKo0Qg[Y#d1ll.EjldA0'
%/p(A&+?<1WE2:FWGR7@/#(alb[c'9DF`'e:nNEl8/)QGGZ;qmo#^kIZZ7RN"lF%b!VJk2PdA>q-]J+)0)Fhgn31(c)S,bhgYc5\n
%X2))a>?1BEbN.*eFL\G&.gH&#pcGp8eH3+<6<cs;\1Nsa[RCJ[\cMsd17\D^Z(6d,q?.0F;[E_(9YEYK+UA+EjEX3T#Sd!QVId9E
%;]andiELi(D)"p"VU:(hN,>=`"4F->=*=WM@%ee%or4dK%u_6V8$9_fo4bO*=q.qeF<d#>7I&95YZS7QVB9c>D&PZ.Ma*oV.@[K3
%YU*6<>lpVWL1]-1#hY^ZlnC"DU2PM6ZX&R,Q7<P3;/&:?CO0*Zl'7P$JgA_5EW@3qfG>*<",@ADdS3GociaT68i>a-O\u0s5a.kE
%-o/smk!16"',m2G_J5DI/ffkU10lHQTWTm$V]qo&H9Rc9WpEola$l:co9ZmF2muAU"?4MIUn[DdLODVDD-NBaU2;dt[.O`0*E/h/
%?PFN3P&H_!b;TDH.P`U1VBWl5QWJ`6(1Dr9&<>0c8m;CEm\(=Vj+E^qO_n<99B[*MH7B&FPDY/id$\R,lOu!$d6?$d(ibdGG't1_
%!HVO_NhT,8!45&!!,ee<!gQL$ko7!d(6D)gPU9,JB:':ZF"N#V_$dT/5T`(>/g!R?0^+J+JKD`$$n64aXq;YU5e.:(_tEZLU%p^"
%-NFRZEE)!1Glh4Vbg_au7BSr'ohf"Ka%cX=\LdhY&5Q`[Q>A2tZ7/5FAbq>g2AX$0a&Nm')(isRHleWCfEQ;ZBX)T'>_6Hn#XZ+E
%2V/gG1t)HfQiIhfKM,94-]fc,rT9L*!.^YN3]7N,\5!<A,%UdtNQL\$WJIe(@]TX:89Y1nRql.`'43[UkQoQ?qLFX'\/p3cqA2]u
%T[5+H;sZ$/.s>]P$&9PA@49SZFJPYQfLI@V#J@T8R8)-B'K,R*V)(kO+>=X*?/?#O",+1CO![CDAjXGT`Z[fUg1B4E7(nF`HPTD3
%fc_/W.c<`T[a.Zb3H\H*lNO/'9'jE:I>3W3NM7W69L=4]nsGXl?W1*D2f4E-L(mIU?n@N^9CnQ+d/MDCoD3<-^FL#9_-mfIa!3oF
%V)CW`Q@3jl6<bd8L4IRu,SaO]*)ANd1i'np).oNl#*or8g\%A`ZQ(Dl7c7sE,!r=]MlA2R9T;pq92J'?)MkVb-/K!$l(\Kn>'dSE
%B,Nt+7jnP'JUs^=hdq7&Pm,6V]MXOT,A]ui3j'WRMeO0K*Gh2>)r\%L0Xe7.i.An?4IIqSA+E0tN4.;["D`^BOH^<dJLNi2%M+:f
%KEEE+$W8%52t:EIMpqufAITGL/VK\C>WN-oqa73g.@aH'KBDJS>`X-$&6gGK&"Jro<`<$c)\Up/:dcHYTdq1-RfR9X6Dpf6^mM)e
%a:*l%98=cI=IO#M$l7PFQMH(-Y&,nd(n0&b;jMH;*B"431'Z3SXInDb8<Jt>%m\eN*'N>4H=V#RQoGDA1'gI%-5Vg"L"-fm,uE6!
%6uo!%#oo($g0g5#!fPAG-kUN*g)ui[=ZY0!?^Kcnfp5T:No@=gBQul>+hU(#ZC*[5/Q-7C*^iaAg=BoSpJ!)V/R.\G+:uI:cO:=5
%OY"<aU,GVhJh8mc4W[WK!>-.g#DdX4_Q0=];(S>_'f1$\+Vg-T7oSQH&bfg0VX='XAHJjqLZH[S7=#NT$.4,>4/iLNR$XOV5^X25
%L0t9T?cNN.;VuTC*+"G6n@/U+.feP;+XKD#<VV]S6GaRr=Fi_p((e".@%2gf-#Mn6pk8UEkh9]BJiODbRsQCE;\O'cWduOl^*+5J
%-?pg#nnuO2pLmM:FN(*pq2V9p74a-ihSufY>to4)Les4JnDOIh#jd*)At+7=!h0C%DZs>B#F-[YdUGYcVmA#Jggs_;n^/Uk,-.Qn
%poL\r7E]4U_UI#(PpA^t6/-&J;TikE&G9]c;4WLs@pD:7ois*n&HJ&L:6Y)U:p`'XkQG!/OG]i?'$IL=-ndL"!tD!V9,M;,RXbaC
%+N2G5dC^/DG!tO/'3rmB`XJ&kV_#aI):4mJL_V)785OL4*.8H.IAi%9?4/<Ne2u@q8A*Ra@W3A)&W#3XS:0-X.3Y7DD`[S;:2i??
%6*;11;CQE'5QN8V>LsU(OT\G(epORD,QdASZ#W8)`0;#$Od\H^O[NGF%&DO@p,%ac#pf%=-4p4[$%d`,]F^A(-pWZF:k$Qh/Wi7p
%b&iul&=j2]6)^Hf#l0++l^<;Ha1<&K!a:5l.q!3mKm3po#00$JB]=h15LUgNZEEG&!,gUBh:&2Gj(^8/^c7cE29./>STedN12S6U
%RW-n5=^-Rolp<4T<b/JL!_Jk?eA?$L4`)Y`p!%R]&?L$$$)bnl\HuC&0XZ#^Jfi^TSi%3$#Ri=R%#=$Vc^H3HR[2l5_"=1D[MZ"[
%a<ITa4DF)E#bn(e9iKOcgZ=X:[+-f-9+U&M^-lZHM#LqC.)Y4>$iiOt&.5@o+c9Z!"s5p9MN28j>_k!N>XV-KkikC9B8_HWRN2Y9
%oL\Zt,B;H<.U$A/U_\Qs5f'8pn0'^\\54RsFW5K0;A5o:U=q4+4+K>40!*8B;VNg8!)fEi;ui8P'-23r7q%(%VG''GJfF%.8d$a(
%A_ZuF"H[f_BBTR)CBZUkFEjH@`_.MeXIeG(&U^t&BEQ(:VJ3?3,[40/&Y0\H30<LS)ppi!;OS_dG"a*Yj'[-uBIpB<:*dE5*(,U8
%k1*Q>p8q?)Vl_##Bj_b]iE"]:fL?$-&1m$EgN+nbM^&?N@E-Y@,<AO?@Bh<rF=kbbJaOYgle70U"9DOs.&OKuHF!YR+DEU.'Tk<A
%nSXLr@V^T+ST:@%4E1lf*1!ft81i59?gLnrS#L)m=kOMLPng#4"LPt.$$n/3>=o#10omc"04C5BKL!#C^%R_]9Nj#LKS1!EWAT')
%8k`-@Bt59.V]-*RK-$Bfe6J-hW/*D9<J2h8=P<o@ZZJZIcOO(hK1Z0f+bU&]-3+hu=RM=t'NhH`3]Q[gkSTj3UCAY1\=oM_Z,m#Y
%5#>sSPudu-NQ162'P]]d?b*n:`sE%lT+@9D1BgpLp,c)CRjH`1ipg/nm$:q?m7..*TcdD^iCT%_m>K0-TFQ#k[J^+Fl37o+LkVEk
%N$L<;X].T/@&]GQG"c7Z)8n*YY%S.+JY=:g96Epi,u%HTnn\DL+Gqn2(na#IKOnh$Npou'OA9I(!0)a[#hD(im>"ZXL).jIQ=;mE
%gF^KT6Qn?SH]b/D()!>uFe^7E;It[Rj]K5T7^,Gr&sUq0[S<^Ek`<*">H4*#FsUV;>pV`]n=)QYq<OIK,rSm1"#%J38u)YFj>-!:
%7G)^0B7glAW,t)r4%(iO%nu+:g]gY"N3>XYWKMi?AY?gppoEj#r4>Ip7+tHP3n`9mN";I-=9HpT6bD//]60]/*@$.DD8H@-.V03g
%`7FgiE"ho=aT:84,Ah-B>hDpC4#:=i:k=/6JE0&T0gQW_b`Fhmj+FJ[J/go[^a1m'C3'a+;%U?q=;%a3XbJHA'!8E$`W:H7nWt-t
%U2eSNBagG_;hE@*X.K]n)JjN(4r^kBiiI6R?s+lE)C(BA.5DTU0:d"?#XkkP1,.6K!Ke>0j:dRLU;,(W8V!W]g2KKT8Vph@]bh/E
%'B6Vq@\'e17o@0fUMRfE8OoIBp^7'f1PQp,^7*\*'?V2/R8gue"4dT</0NLOAA\E&9(@Yj9&Vi4?F`1=i/6/4A[92Sbj.Y.QsE#0
%+sMp%IF:PWi%I^He`bV.Bt5q>.tTkjLf*_ebRGJhLMrK^JoGJC,GbU$QVtjO3=5pjfE_[fmN^-e7Q^;J3*_5\4<E+,_1rBu;pdSK
%crpFp7u*#c`?oj[@.qjGoqd2@Sfn5aj[g=k+d&2u2+d-;4C"6YTKrsKU'M<?.iL?sp;Gj*-dW$']0Hlng98h65V!Q$,g^U`VoNpf
%n3fS#$C9,FE]q9MfL$)*Q_sto_+m-(#\SuU!U?dN&12aQ82:2n0r[[[=i*c4TE>Ll:5EU6_%<j/5^8S$Z3QfOJ>,@8J5-C#,r(%C
%4>[a'UEl%i>Xt#A5":PJnDK/.EK1HP\ssD?8JCt.[Y#%_/[5@d.#=9f8>2EfEb:L,&GRC"Q>Ec3)'$%I[+8&$ac^`eRsX^W%WoEf
%152\:G]0lY8a?bW#RM"rM9!.lJH4hT_I!tP`%GJ"@I(bGGNgsCG?4WdIO8u]&0e/hLXns4XasRi]@!:8_9?Qhi<4Fe=asm1#.KW[
%8jdbmOBb:Kp0$j\o;9hI(o&NL<DnBrK<+gbH,P/AJi5U4!9"L\"Q*XGZUF^<l:#AP=qMo=]D%Q:'G)'=dpbSsctEUS&Y$47^"G%9
%GOU6P>#E:i"t1]AHe7`jQmdX4'88VEJu@]21+$tseJ#?4$,P.&1"$9[_O&3T3RcPg';Ss#Z5?/!g/tus#6Z-aWnC\[l=AO6NoB'Y
%r?=[qj;LR\YQ7"VB:e%>P6MXVMo>l1-$j.I!5Doc_<WdP#=J\GS?O,d+pU(E0JOJ"4uj1b86TO[.8"8[&-p$Q!\nl6aR-ds$*bBq
%CXQlQOO4g4'cpG3N[clTOCgkS,RMEPG3i0O%L"@;gJ*M[5]e/-l1sNLmL"3nGX1K.['7=]8c\9O+rVIOO>66"%i,R7PMeAl)[kT8
%"f;k90Z/K__L)RE6Y;W"OIdTQZCs[Z$&R@\4G+FfF<BcsHTFFO9nU-TZj_lg*pMtD*Wj(V+W"@C#kM`,7$VEr4n08nI2^s6>P=@`
%"ZfA"_1pu;Yq!uO":9kqCnT"^n1k#;#i+@'0)WtIGAY0+4]NKT@l]8(53eT`gOW-Vn3jdl2!9GKd=\*&Bs,8^?iI2N)<6&TBM$;Y
%1oE)FlB\9ROcg)7;[O5k]Ia?XYSFeZkQtuc%gD6NYp&(M9Mje#`CGQ6#`,u;6pOQW>$!s2Le<"^>40ae@a#'_(8"^Le._/Cc(j0a
%jhgua@%sMEAAgr&!`8rUOI1lqD$Z':nk@CTU3j=%Y"B)!,*3Q7k<Y(Ype8M=6$J"&nOTh%\A[Mm$dp/?aatrILh1lV[]h^H'Btg*
%<J+F;b<ZoVX[K^M+=o<jn5Co=FYMV][[b@L'+@(Ms&0&RU^YWo@`5&R/Q3r`Pn%4L+mc!16V1u@<MJai]/g)$V!o.dmQ-$91^UES
%LeJ)B#t\)`+>0d>LpIDU(O2rfO+@Fo3#oe[?l7:%6;U$[*X`B?5_#AeG!:\a#U#E^?4TA+^aq`0(0h[sHHrp3<!d-76X@j]WM4-/
%LK^"jh>$UkiLOq[!)-LJZCpH-\eUSJBbD`ORXlliW5EB^$QL)$`QtG:T_b4dj]W>4,QUN!W(oBC'T)J4TJSf1_A/oA\AI@n_Xs[4
%4&c\\'/`1U$3k6AmlOVYNpoR<g!sQ&.jB[Aau<uLA-#_j?pH"$].>*4pGG5t!gi".EBD'i.]0h<Z9=Ft_ABa9/Aq\k%A8fgV#r\o
%_.:JX5%'PgSh_talRKX::)KA,,Ld91/,2%E7/C?JdX[^CJOt-?;)jXtJJSr)K;%/_i>gPS&\!pW=H<Q.^W9L!Kl.1%k_Co12B9&2
%(pWE36F37A[JU1s5=\'(IY,0]Th(u(L^P$1^'EX+"q<Ya"1+9UML?!]V?[^_K)rcLL3ts(-BOU(gTZTu?=CX;!umFmq!5MIB7RtX
%KDc1tFOq0@+$:Tj21j.Z\9FY'@gX!AH*1dN-jn(Ce.D=P:JZN\!eXm'UCY'F!=PbX"2'9O/"CFn;p;.E?\E%8drbcq@B<rjK8k6u
%)&<Pf&?fo:mA>V_g0*Rd`su][;'TJ"$91urg^A9LgD)dTCeg[=cF.8M4cOQX?&5Mr,act>\;spE0T61hJa,>NV=/AZTapdKYXE,j
%7!qAVdGR('C$+U_p8JCui`J=Q(:b"%A@><\3eS#"2V;`F`(]?E/+@fQl^J(pMPuG(6;,<S=VrHmdXgW)G!!dG/H!?g+%S8Ta^'qR
%dd_lHEDCUdE^s5pp1cs1<=#sQ[)3?9[0cAZm;*jA9C-:%oL_4tCE(uNaZJM)%U,OW*'hRaO7@#jJM!mhDQ#)r@":JcP3u&6_-i-!
%a#7H5:*nBj7pQq$BiSY3RnL\pCk2Y-"^b^k=Uj@ke0j4ZZnf-+^o515c[lknBq$)]$2mH-&00i4ir0-P`eGu1r&53r^eBO\ES7#+
%RgsRq7roslaC$.-;Ml+<FL8;QROJj;J]'YO@J.tm=P^bj3$=.SW:3OdP-;d_5as<3i++SdK)sL2j#Va50X;V2J=HK_Hl-\elum1O
%]TN7d?fF1rVDu"9Y"ci"YfOT^C0X4nL2Clsd!nj.?n>OX\cb2)+pf`(+1*lWPs$49=$fE;&+Ccha`4-pN=nc]-!W4\NfKLEeSGO9
%&QKPME+h?F$W4bQM^[OFldF.ci5%]Y%BH"\XZ9G3#LG#!K4.D@JJ!PCKFA#<qmQ:?"Rto@JH!A,_"7dL0(GQg\-oNNL`5?/E6iPl
%RAh\p*gCX!)T"PK5bD9Q(AJ(Mnhe].<L8GkN(?ct#on()2O^@C*XDqd64pV_&pEPdUuV_fZV:&EObH&u5Y(+U[dRWC#Xj;/#9(Xf
%L$6ZW9F;e7RXAu:kD$F`rLn^1;hp"!d(Ka))gj&M7(aYrMk`VAAO$ljC^pR.0O0i59G$8ji17]]%ZVnE,\i\cK"_hGF"eM#Cm8n'
%,f1<WL^m]&rco,CC,gZ%+u*q5@N^5nJ:p]GJqNXrhpcIo@i[R5<OI"fKs(n^Q9p!s%440$E!R.MT\UhnO&`l/IA2,5!]Cd,8oTQk
%ECrRo5h/sBng+d2j)d#KA\gdm8k>o(JcnI\p-22=cuMZ%VWg]\.hij2fS.7qoe7;jD*^GiPCQ,dS[+j>00"24i1OUbJhn"JB*D_V
%.7-87)5&nOfO^3J%#G5?;4k(@!@n8^6:2!I+n@1aESL\P:3l=a@:t#YmcaEqFDckR,oe/0UB`*T8@*=0;IIbl'CD/[!,uhrejrRD
%"-/^6G_R^\V7t'FH(eFOrX[`q[\MKs.:J#V-;['l0+c8TTiTeI*mkUMP]"Pd.gg-O_`nPq-"&k@ZbRd,J_;$WBLu;b9opUIE**[(
%)$DuY$-/=m<OB%_+U<QAg(^8e?(kh'CfmTI8qZ&]&rjtX#Y^0ghFI`GIkG"!+Jm#c#ua!l2PQHA?a"C+d>BBK<f<n3#G=n)'Dq+3
%"GX].?`Ve_6GoCR7Z7@)3tJt79Ftd@Vf_&09sg=<"K\Nb$&[](]/F44&3IZDHm,F>!0B=bDI"e95d#dIED36S#%KF,AAgE)3?&ud
%QBj+_eE7*_!JCo#-Q!@7C'W+kTd$-EMu9e33)#JIMQZa$5Vn/mK'@69[)%Wt.uViQA5g.]=LSeWI>A`aOV-.JRiG$k1pD[<)-fML
%`d&?6-,bNWH<S0qTHVApmK$a;^d(7+Y:XXJ:d;:/B\6c('XB%Y[qtpQ/pra@6gU>EjFXhH,/_G?Q?HU@^8Q,ZG'=@c4CGDng^r3^
%8iTXC+)d!UL%E]R\.R`k#[?e(/ZYQqc]mf+m8-oo+inREE3hr&?YBH,"K*:DXP!+;=dDIc!#c+Uo+4a>R6E64/pr\iAOYEB1^;M3
%29-<V!W`QdQ,r=MQp*q96!d%].PMi3:M.0D1_jcmE.X.m7EdM,9qkM#XpFMEKG5W^`,d5(eqQa#`u^qfT^4R92\u8m&M6QF%9t4=
%=J-r!_Xb[n"(fE%_$+9Q/CB8N<9t<1[_Q<7D"X,$1)i^H"q^m%F)b[55\*t-#(K^kr)b&=2BIVm8Lft&(eYDHAFi'&mNnYVjHV\n
%%ToNt_Ei-\cG74<7)527\cq).32@C$6?Ik$#*+VH/CFG/\A2_W]3o]UNlf"If9Cq)k\dhRd\%YcBSu]o`!SiY+cSj`MJP#]Yp%Ku
%$5sP)!;Y7*TUe?F"0!5*_?eefM*'?>bhM5-9Z_7)actV"P-\Z7'#eH5(GI!U$\h[l>9LJ8e,tQCL855&3.(qOB-E[JZ"E<;MlnLB
%a_eCMN;-e54*H>F\HloIF6c.%`cesrS/&7LXk>PXR"=<I/b>@N&VKfE",onc*JiCqd<u/8Xu"92:j8l3/8HE/djLQ6"=bEZappu=
%0)@K[)";JXoUnOV:'Vr35jbjl`d0J$kZD**[OW5PD2%2p#<1]-Yjm:o)\:R&$Q?lsi8B9hnsXiV&!Ncq_L[>"L.J][2:jd@`Rl6Y
%)+IB+NRJ@dfK!5NH4W&`=1fY.<%0LH&2Kad,2?WE!7jIqJb]:(@0BY`4Wn2SbA[MXS=pBm@P;.9G+JF2+rXa>&I)iYE#8c_/E':(
%&X2B=3l-_C.TX,4?3RBhFT+[56o>HXK;qJ2P0*3u?+ZrRq]H(q:]g1A:dlBKG%/uf(m3d''"<HUj]HKQ=FIk/fN/o5fRSS3BT-VG
%%L$k_**?hnD,+FSisu4PA?)^RHYg$M4V9mqX?V(h5UNo!).#(b9hEjLadN@N%p2R,/<LmFZHsj67t!a?=h[WHK6>:)*i8t(M3o?c
%Lj,`F^ieHCEe88p.NteX2LM/Q2Br=E9G)DqjFOQ>7\;ajE1CVI$OM-thEm92l\@&(9IpSpi/CjU##Ap.<Fm1:"kJ_jb,iDl5/8p(
%k8V4E#:0koB$Q;+5co/oPVOPNM%`J5JP)m$_nsa$au70aD)"&JF2?uQArD\&c%9(Q\U[Liq)So#Z5>+P&@l\41pNs3/P;n+P9.Y(
%_V9X/4AH8?+jN]QR1dsR8o1H'*1Uk+iZKpp8icp:pYH<dj+ec`?;)2L9HX(IJZ2@+'&`o:0+?lR)N>Bp=NhmGin@5'%4o5H,[ifK
%Q8#'V9>H3rb4Ije7`(J,d@H*??j@=[+.>Ymlo'I/3R7maJ#6%kL;$;sW.ZWE*-u',%@aUS&,Zg@3C8E$:Q&ZhJ3q0W-U"]#f+Z12
%#_s^oQNjF,-.BbO7'It!M%NMaBp)I9;7"57"ldP=4A/XA4A60"Z=3m-XHF4U7\Zo-JIXC(T\UHd$#qpKH=GP6a]<6U66Lm%"Y_S:
%#<$!%p/mrp-(tGf/9J2g#Q$&E3'[JDZ/l92iHPNZJ>8eC_?r9tE!(.sR-t>H3C1gJYXqt?:)M_ui7<\OAocn1L('!llk3k,#3olJ
%L2&b&&D:$)&fC@*G+9LZOo]c<P'4cbB60&%):pW4d72]($$0`>%Ebs_AX'\:_%pdiJb3/`l46h4;97uT..M.>!`A/Pq`tMiG#?%Q
%-c=Gq(`shPGq`ioZaaC\5h$-3KaANNS-P:_'bUTmlNfnu8"9dBF!duYnAkDOZ7-1Fm[E.Hnh#Ni#g"u-..RqrU\!@#VI7Jb6SMdZ
%,bFU%3J(Fd:)s$sYo_@1Pil4hS>%%P##W1XoGGpJ_KM7+]:g"`[>;C=&96kel/9/\GiEni?ALQT:6P>`pkr*U%UMG1PRifd#7uG'
%6OcK9Ud42^(F98-<:^4eSnsGB'o90hLCuheDBW3d$9UCP3-`L*64[OU1k`EZA7m/(YRLmB/.utbUr3=^L+he0nFAj*7PHf7qneh8
%ZH^bEM7>IZAW+n<!t2^GfP:Z)DFtZs*.r3RZ0@nP3>!]WK#WE-+s3#9P8n;n-r(sDjJDoV;t-9_8HOb\6E*XRNCBYV&mk_\F.=p+
%=sO\BA[&n0"?W7$!^(E7Dp1PCfP_<ejg4I[JiNlbiU[FZ0f2;Y6]$Jr_ZkWBa_Pl*P*.8XO9O@4Ne*(uLr20R0IVooQBEdu^kK.b
%JB7n+?D/WP*sK#caO:c0k)2CKYf5:G65KLO<eCf$J=V=i?qXoP`*;9t6:2`49V]ff=V#X@Bm^Clj,c6,+HD`*PB(hZck=[P4UXsA
%_JBnF==K"=s5E5&!A/^KK*OD:kn,'HEXJ`q=9^#`SHhjGi34_J%`Dk5=diE%_uT>p*\4*-M\To(2dBUt=94W;_MTR8GT*NVGtP*.
%U9c.3>cdXM,P,5,8&M'`<8iY^R0u//#WdsE2d\rSkbF.e4UHQ[mDK`TY/t+eL.%Y,quWW*a7ge\N3NS\0ee!jguqB4-;`<'mF1Pn
%2?r#Y?3n1.R&9qtfm\M9!(0[HWocXIL<0q2+UTb:/i`Y!3W?im&n'a?Js:uupcKatJ6X'!ahc&#+nF]r&>TLAQi6J9>S.Hpc66-_
%:ntu!E5FTN^lT0A[TtM"6,jT'_!MO?q?1*5V*s=%/Os.W_U_1Tj*.H#.uF;Ee;:JW]O[$;5mc>h.%kG,>A2/R,tMHa>f=-S86J9R
%JO1CcfS:2fjUc`o<8_n5./Fbf@;Y0?:0-Bf7lQ+3;+cGE*F$oS:cnH&JKYMnBHGVsS4q3N_u^OQj9?c8LoK'jrr>Im-^k2B6VFu*
%Fr,04&j:V<oPpBJ$ZVKb<H^4Wm!)'rEESZQELL^#ob0dI$/9_@X!,2N%utkZRt?+*Lk68*93BM\Ps4q[=c'/6"?1>[>H[1+I)]$9
%06pu;<',(Zh@cDX(E',Q*XkH<;hMb-i!U.u*I=hb3A%DV+sp8\bCGfWV]fm.0%(SBAreXi_3tp+T$arbJ&bu!\KqRdJl#22=+E^`
%Q_91#F+a5B&*Z5OM_2WHMK$uIM_do4ET-+ib3D9/J9`7KcDH:pFr?tolSg5C\X(^?!,3$_%A1ZKD[^%l(&C/8*G^Lrfr"'cYqVi(
%ZT:&W^^r:;$9\Yf`1Fs'J=\=#'#:@EP/0I>S5q7t=F+0C,NrV)*.6\f4P9eZ2A9.bagN8sC=lQH*3<_SSiP!8C_1S3H5,TG^>guK
%Yg&=M_);G.TrXrP+9o,QMj7YFTQ$^:B5'M4U1-j\_&cVY=j.TdE5j0)!K>F?P'eqHj3#br%P&q%S6-:Eqng59(`K65<XurIYpC^S
%PG_u#<\G:6i$o;YTuVd)=ZGS`(7MCj"HKVCk\14VdrI<,iqu%oiQs:P+$aE3i;8[1;cnhH@B0AlTEg_6>S)^Mcfu\?Gd+L,^5hms
%Zj-pEKYF;U8kuW\:*talYhf@S#?3Ic.&)f:[EmN,KH(cRbJ@1!80h[Q/ln`g$/lWNB9o*aQDCO#6lCU]E9F#WS+Qu&ScD9V_rHCZ
%D;Wt@irSJ<SiG&)l"*9e)Za!`OX++b_89I@UUIl;"+ZIi70k3JL)"?7+sr""oe]4Ya:*V^i93B-\HS-lVj23/*7!J!6T.fFMlJBL
%*c[XQIrdtK*sRHe8\epDp^gu2ZVctBWIn_Q7Lf!c3B&]uJI[&:$e.t^!$/cKE'iM1&^F,UC3#+R>MtK+P-I'-&aNo)#c!jtKB]mM
%EaU"T0GEWQ+iG4Fh8(BlSu!))3<[Fb/7t*(^f*O*N'O+pfSe^GC@4E'n-j^IQA:h7;X$H>34[P(r$7V"5)46c+%)4aBaia[$jOur
%AHqBc8)XSl"=6;sEtR&W1O?/:=P<Z7L,$Gj-^4eoN.Yu78Aa@/"C"R'JJm<QV<!LN:_kqrF(^A)gb*6P\WSiiK^i/:B>5[QT3Vl`
%*upli3RBs!0pr)6S2c[>E=iD2U1]6aRW'V4iX;!V4ch=^i';cg'H8u\E2#G76ZHM$X4uXr';g#IO:L1&_#.=A#IFo1Et8K(JeB$2
%i;>n1%n\j+F\e>24+l:Zo>OSFHE,.s0M:5RTQ!,`lPQ`h)Wg3+@dKJa`(@s7T.]+2(#SrKR3Kne#i'NE&ch>b@.TS?itqpSdMI(^
%[S2s2($lkDl53X'/-Glf5SQPs+j2`&lkmE-+u(fWiJ&,'jCi2!Di,(WKlR=3ng+iDD-WmBR";%$e:?!Vh7Hi-PBnc2i,UN3<Di,U
%6`q%97n<8LM0mZ>\qh=%fg+j7fAW/ZjX)_r';1X!B9_2NJb-gr(#cYB-g,MZZ<R[r$[m+/8\i&^O:6e,\ruV6G$hs1_#Uf/OtXkO
%Th*V)%&?G`Ea`Ftbm/tPknSfA:k_W&$Je%OVa@I2G0Fnn_3)?;gd$`VW,#]%KX*5p,+"Ru)I`A),RYD+*X68Oief2[@pS:>Q8V`a
%*YEa2'T7"'gn,=sM=)iT]EM!n6gcF!oE]AaYosgT,&j,,JOB&0h"`R%OFXZi;$6p:6-a#.PJX.9-6N#')$NY-N[ZT3==cnf]2@WT
%V$`]$qHSgqNc\pB$pde&'om%o>-O6uR_n=I"Kl!U,S^otm3'S@a\3[/GWF-b<Ts'D+:ZgO#M6jB)+=@?0o2[eSi0rg:&oe\KM;P?
%@:H0[9Gs,0aU]*C=+MM`THGYfCqG*=:r"6J0RG:GDs"<M*t;A\>g.i)Ci#.I7VKXfc)O":<aYZ9QkHD%VSWWNS;QZ!2$2dBoi6a#
%*l08I*[SOLJl<Xc`#^YI.tLep^b+5A-nQ`l(*i=>LR\Fj5oVFhni;j\bsI`>M'H%\?X"m"aOO9OM4<=TfEmDcAq3,uG<e#n8A<Y_
%JiV6;)eL'!@(m`(n\[U:aV#tik.n[mKb/ua(HNJ^<<S-AUV`<Ha3e.P.14u!5i`ha=%uXSi.L0B;U9)TG8>BBp*[I=.jZDAbSNQ^
%6@.T6F`?XK[_G8e63"Hh_)K8Vg1fmB/NSn=g[(q+O_nbUT\,88\CdB@)Deqb]J9^H]b4'#M'()1GaQqR<A@WF%(ua<j*O[bWKG*?
%o6bm)!9!'5[SfDLcn\[B3(T=<io2?slik%`J^QJ&GrE-c"[-NT8%qt*D<8c&k*MAaJEJU;U"_2\W`kN/m)Hu0+_Hf6E4?10:Tq[h
%O1)b>LTe"'30LfeAHK+S)&C:<P=sY<"bY$O[N)co7@`b$U=N$LI#egi-OrIWq+`IEKaj14%^)d]H^O7qi`dTH#WPk0"e'(="EG).
%bE5i,;'Ftg[988<!Xcjel0npVhoNjl2=d*lgp[$5,ZeX1!,FaV.t$Ra2V3**QZo1+j`;lA,rh4cC*>M83KA8\;3<Nb#nHTV^NC]!
%+>+]$OM7$:?*'&4T]aLQYR6J#+<Fat"O'K.7h3T+b)JlA#jaN%Cj4oJ=g1/RNUT;QMtn6BaV&EG7Bkt4JQ84]3Z07uDdsu]_^J7H
%&93sp7i3e':q:!:/]6VdZ'&N_<tb(?Z!d(G:I5n;-`V+MbFnWZ*QQ`!j'&p'7de'Lb1Agb@2r-qMK2!0d"785kcQN!E$BlUE%1,F
%E\CDm&0pJk1Gt,Z@%kZma\3*j:<%7SQET/!8;Euh$Wh?cJtU>D*D<F519<'N#m\>4/#RoZ)o`9+$43Th0G#48M_EQK>69t(/P'lS
%Dbi/3QIr:_1"6fuLM/<pA`IrYO&R6>BU"YsCIglPkG$&VCG`O,7gVU(!OAl_neI*Ap-h!Q+pX1X;/G&:kK=lb2Y%F]2\aJ`@DF;A
%LQCo\UbO-2?Jd0OpLDp)kHGa\[3[cbk.>LJaFTK^12Wq3[2UW]1b',Lgb?/L.AH<2g-BmE]U=[2Za&3Wa%+ufEhfH?AP%/acGK+:
%2H#R#Lm!d;4r^1h(>f7N9J:WYCg5fLFKOXjf(!Q\8,:?aUe(HlJb3uT15$HO[EZb910UCZgJ6-@O[q'0nC9DG9Hq)NBOHM"/WQ_:
%YGa4pX_#C`DoiHAJae,XogQS$L\'FT"r5Hp?#+'oY.F[)$0=m\ViWBc4U[KFVOk`"fc5D.q5q(FF,*X0q#[Zk\Ic$lW+K5l'e?fX
%ecqc>jn^Q-%^Z\O$3GuMl,Vg(;td$k,6"gJ"Up`E1H>SmYnZ/LTu)GhAK)eJ-oF^jS@?GHC9qWqe[Ja+W!Xj;j-QX'jEG*9^7SB^
%Jjm_uAj_n;!3*4`<o29I"&dc[GIG=PD&+Hm:JA,`BZ)=;7I28*@G;1YW\f./c.ehQgJPKeZBQqG7iHE(JW9Q>6a=b_d>'XC4G[)U
%Lm8u.eDSdb):=)c*IFR*LigaA"Ld>^i3$<DM5[#s-43Kj7`e-DORIta)RLl!NZ(F])+Ngr[Va=Jj'/Xm)j"h=HEFV6le=u/@BIn\
%[)Llkqutu("GN/8`0Y+l'"fM3IiIN9bL6&/o?e7N03]e`KaaHi;Tu^1GH`H^0ur7?;A`BKP&3VH3hb41SoQp*O@eRB4$R7?-l$^f
%E,V7^jP]GbcH]n*$bV7TV(Xh<f?-t0i+K2*@uMikG:[YMg_R%tA7[a1<6"OH41gXLJBMCaIJ4mld*6iL%P5mhhe!=WSn2uWV:Ud`
%pPo(H*!FRV/Vnf-!q&'fpms<37CECCZk%It&DelGT,dtbnC4;)0tp0ZL0=\IaKjL5>b0rE[KP0_CG\L7+pp?dR4j-O3)UHQE3"mj
%^+^(qaNt`8@LQMdLjH5Zr+5+s"^D0m^rdfC@IoM9X1=5Zr]"-!]2?uJ=_5Q`&9;K8,7Z&,/5O(#<HZXtf<m2gA!9cPI6J(<^fN9+
%\N0c5&M,VG"I<u&D89"@Cu'&5'*Yd5cAHCH,Ak-MS=&P]Jnkp(4K!+cK*at^8jGm_2_6lr+6a9>K>#=UMrd#^fmjci=0hqLGR+]*
%\)E+5fjZEd]oX^1BgPcK7^`&D$I7+Oa,2)Z`!Y^d8BZ`"`8V%H_n(bV<lBLlg:@U+3ZKQo`/[Qbd$l/$3Itd4LgYlu$?_C3Y2kQD
%W;TQdWC)*#>TaBS-W.h;el@kX$+8MgVS99pBS+8<1&1%HUa^LNE_dPl[J3'.;LdXrH-ffeolCA*V+f9](_%J?Doqg:I![5/-O2TG
%[,_d*?bXRdR)hjh5m;\&Yg_OBS>#IUS.om3e-F8l_C;rRHe4LO5M6t;i,J7HQOmU#g.;P.#hh3hU)dT7@,Zbf1VEMsj8kQOhpOIP
%M?X6!j+d"`!-TQ#HP1DE[O&q0BO?FjJQQ+rLG_"HJu>gf^oiU(ng"A'M29EF#emX!(onie'q/;WM>_Yn%T9,l;8-An_)6+jLf0]-
%3U"s$0=^.KZuMQ9li4&Z5b%rjY]0hnTLCKIgtbFbTalq<V=OR6/--"7/apPnHl^M*`AJ=W`rFB9RqkTU@o9\L;I<7Y`'cq82<A/F
%AX?&<hu@N]F((22figAPBZ:&UmVmnB-+;U+iqsIU]]0\KX=LO4]N%G5&dsbu6C'a*),A4+f2"Y[VcYsSb0g7^caiiJ78J@O'2?=T
%nGTi+'#5pC7,J!^`L`hr^3ASC_&Ge-!W!Ej"*`rBJgU[i*Jq^TE;r0bhjbE5*(I4RZV*>0eLrHs7V4[->Yff=E^h,!,kehRiI\k>
%3((4/8uc%5>I%Lf=(,@I,bW4r:pUVtpIUc]Z?*Z'57";V'K`E#p;CU>2`6^"+CU$UT)$[kFe0Kh).Ad`.BeH(op&c2[6QL>A6qDC
%;Eo^eYKr/K:qe59%WG&FXAU_bI?;d2r>q$S.37rqFs(:bQ9?_'^JO[#Ea6^!L"gXBl`kn*g^eRhALs%8KU=/hk3l]pJ1eHl<(#!'
%Q@K,ME,r3o0stnuHH'%*im103e-#.jQkVr)_TT]AWDqf?YX=GA^`t0;f1Mdj<7kJ)?:<S)4p'3"fYiXd411EoM"F,RN,f7@;;N^3
%&?\VNTS=)S';GWCMA<a"A]4$F,i<uAnrQ3"UtSDq@h<Q&@$sb(Bu-&`m_^-9p@R0BhP^n/V]\[O]dB6_iWu1p:DFWNX7Oq5Kuf]0
%+!]Nr[-bY/-cD9QX)KjP?@FFs"_nL=7+QT6\c?7Y&#ZX!r;=eM.^R5,Qs3)u_%OZJ.C"sH<PKjtohi'?"%VXU0'l3gU:O(P2<m`r
%?hfPT,$FHjWAV>bPK\go-jmHshg?38Nc)\rq>d"lN;<$!nrP.17V:Bu_Gar8L$C1,PG&G0'JQf!BA,WC/1;\mA&r;'7s,lP13Gcm
%/cSht&XaCk$Kb*mPNc`S`?rAQNEP+8-%Taq=OpnUG1H01=(U=k7C79ai/5kdJRXom)Tt$['h%ciC<%U,T?J!51QFX$Rsjll%+UgB
%-H3?JSEU+E#r*UTc77r!KOPTh*U;g&aH6s-7oj0><GRn+_k+(6d8Y52@,!_&$!gq-pKNkEE5DFNG^OsILLH.ek-Af&LJQ#_U_<$]
%n,1i5Z=M^(h#SDW_Z&$(BJ"J_?%)XILg1Xe]O/UI?rZCa+0@B2?S[cE<:do=qBl9,\!21%<Ob(7AX6'sX`(GY,M6FBX<KL9dVteb
%>-@W#]e-Mj4H;pd-W-A>q9DD)S0?7MA\QWVq?b/HeRDubIE20%9]Q"?SmTutUgH56(OhD(6WZei!(rX!,a(5G!0U-De7nkqUVkZV
%+7Q`_+7ua"P)`Z\rs;C*/fS/.o`u`m3*4sR6!puQe:)g9\lh$c+0$dC',qh!\6%O:(OEqqfJcb/Pi+lA3%S,6C20A&aMjfDaMLLA
%:=O!oRn2_fdO]-CeoH`XQlu;)=t&9#58MP0U@t(>=b'o55a4O-C&b,Con7e4:Y?qrXIU['4<cZa1!m(%46u?'(E8[]F?qO8;!+EN
%`$lMoo+0D-drL^U5HhKBOe3J!N;pu"Gpra_>;f4NC4J8W-56>j^\;n%PAlbYZ@'qhg\\uD#*,Ved6HN2^##k3bh"IM@=H?NNO9$K
%msM,W9rn_UPnQ8p0Y>8=q>H//hHuk]XZFI$0&Y[i7%,Vt3oQG4!rMp2p'*La[8Uel$H56-HhKq:$8e&'q8##h9$<^l6tDpC'3m<c
%Ddo<Nim^iY-V1o-OJ_5f:tK@(/RW9d^]58p:_e=O"@WKWS62J2NSZ3&o.?JO^N-rcLJUm;Xe`6_7QoXCWoi`J%uf4I1GF8%5'nl`
%F@1L>b(e%AG@1q%(D(1;_#>e6,d]i]e\^[(1BDh[2<&YaUZVNc..F"@h=%p'%:+k,M[9iRL,I5[V.s_.%e(,p\W1aU[+dfmE?GhP
%Qo!+kTG1FU&qo27f1<H6aSi&Y8^cu920qK8`T)mXrG+gdQkbiJ^^o^=C&<uQgb[Al(@k$W6k8mPVTmJ!-%uT(QL*>#"A3opnE'sA
%'^]?4N\"RuYf/gcK$>#ZDi:'CJL5,40V=_^N?SX+ja1U(+i-^3*AJn"dlUDi$q&#(">?%[7*GXfO$NaTfi]f6W<$Bk_kh:KL[Nd&
%_iOcWAGLA1s,]SS*]RRs$InV<Wk.+1k/7O2_jlftMjj<7._PDY<\K"tfaZp2Xm[:l4dN;Y8V%Rt";dao&Ec\:\#Ai8i581ZPN'cS
%-^T6-gAk!$9Pp'l9#$!5C-7N%aChEPO2uO)E;A,i)rPpHjnMNGLEu(#kW%,b'Y9"c0f<f6r(-#eQc::0C66?KWX61DQ11`+anpqd
%c]:/uMrd'!IEH`<HPp!PciH19>.K5/Af[B"ipfaG/Ss4,kSXq;&B0FFHE<UZYCp*FrOh[sS8HoAm!/hokt[<Daj.kdH_,g:-DKjb
%.r;UhZl-+LOoOd_=.'\(ZKUhSi<H9:TGTfA0lGq`q1VIJ+=XrT(@)/U[;(NT-+=5,dqPn9Qo-)_c99KPY5V4Gn?-Ej>*+>2g)VM2
%0u%b>\,qf`4KnN]=Jha9@4>a@Z?W-8c@LlDn=lP7`,Z?gqfk`nfb<J+H2lL=oa.%^0TsJ2ScrQ?cun>F*X(sqrII\S:fL#4CObAY
%HeCbgmH$-]<[^aqWjKFNcU-K\;H-4iq#V/om'G3(JDC9?l-I?(?qjj$ODdA/Vb_WK1.H6!4%JT'!/,::m,es3kt^C/-_C55#e5;R
%^t>qW0hOraS#p&`:Qubp8=8WK+h*D\Ue[u-kWZ6TP)]'."bHdOjrK_hG+F%O?^_I'JH%H[DQM&._n^Rd9$&F`(j#/;3'f5fhs+3*
%E;I'<(Ouf)gO3%FQA9RMJTWX_/1%*NhDkQU7UeO+-k'?*4T_X&`&4'+l;:V^XSIs_$St6\%G.T'9589RagX3"LKCO5S2.psY[rlu
%gh.r!6lkUO>DSS/&$lMNjH"_T_>^<Ei7qfhFe<e++S<2BU0TsI9&?d4;U]ra9Q`4?##MI@4+BX'?r3_b5`bpIPekbMDb!!)PbAld
%5'>&!g'5C;)[G$A4lp1@$I(Me7hS//\;k>)<=;ZroV2">U1tiGSX+6C>M>L3mI^9ObG:+ObrJU[AeTDc$mR*%;7s?ha[rm=<'j\#
%Yg[8Kba5qAb@=AX'?irL7X:8j=0\Q>,6sMTZj8'hor&CEE-G>jBY+g;G163V#3p-2_-MIC4uR`>BAIC)7CC9+Y/:U\ar1\%&DLGK
%&:]_Uf#?CFN.^t1:\PmB'2e\'p1;8fK<;Koq.3(3,:Wl*HQBVr=2A-Q(,E&q\C2!"K8EI=;@`%mgH19;V&k4VRA":!YH-QVMYs+"
%#Kr%e8m+R1i=9(m*MpkE<d#r+MYX@56nffbL5Mib[,+G#car:3>HLQg7$-[c5N>LO:.9rIH@Us%mu=H+r1H/u`=sYs`N-(2Jf5uH
%5a)9X]2p!,>[+GG\=o.:ApDl1(/\hVi^Go;kUB<S^hoMJi1KQgSld#^k%<^r"hN2r`H,'`95D&<jiC)6N1*n6'bph-rueno"L5`/
%ZR@'JDRE1N[Mbj?Y2^s:3D_/,"H9C5\9`tFj`eY.;7_s-`p9*uK=2]Mlta,r)2^*.rEYQ9Hc[Rh^aoH9a)D<)Y$*NA4N4>ZE`I^D
%VLu]Bb`]f?!`)Yd<UCc+pD@'ReAlGJ(*b93Mf]jt:_?*FZ&:"MeCcB7.5+5]6*e9%K;Q4I0Rc*ki1!@,e9=u2rfO7L.!b^6LXPqG
%/F&$4.4tkfK?24eao9"cAX8oOUJp0iT2*[H2gH1bSYEkP/i8l/bGAK!7Q?YklDf0G?%-hL._/>T<hD2d1h(#F*WBA@=B\.69.!U'
%$4mTDGg)bP<P`>*gTCS'og^J6oab#H-D&@@hG=7;/\R_=IJ,MSV^?_t!NmoFd56^Gnp2PF80"0nI]hHM&jJB!e`X170d=OiIG9!b
%D#c#67109([mAuQ#L@GUNkjA,!,LFh>?0*,m'LG!2ghCH9<1,/:^i>pXHF^$3MK]e0/f<g:f=dt.$&BZ3sh-k!2&G>B#K.ag:^5Y
%b7u1=DQ!\$dS$rNG[:M+b#i)A?nG^fEaGS""/,J7Ei/"7a,0$.M+ERC$GlpSpBdA15m,gZCGC!,3f%q*aK*.Tlr2mg+k^fsAUWNW
%D\OS@F$$A/SjUHc:Ve;r:Q`OiYcK)6Du+dsA,rVX:tTmSBQpQ[:])gD]D)'s2_gauW)AkFRs#"IVXl8;)15A714l;CAdO?`'_Z_Z
%(kDO/PV$T6`-.lr0jT.n3L?SEs8&]:c[turhQ'nZF5h6F9(hTt!G8P%ZP9>Ucs%\p88fj,PtB)P6"7\/ERA3fR4j>Ri:<"8q2SDV
%hs81*bG@Ipfc#r!_We>O3`'S1\iQpO8^.pc`^9t;I7:OC?MRep'0il3BF'_)E\lJ"h#^[L!WV1Tr;>C'CU=-o.A>L,Q47&a1Fb]A
%L'HS%3s%\9Eg,a5s0YV9&ipI^p#sGu_I<pJDR;H*nHm1C[g_K!U"fYi&XZ$.7gD$9P[GFo-G#a<dR=%(%FH@F#@\XU-11TL31;h:
%"=52q0MobRMC6WK.T(_qG0.+-NtS"@oRtX\KU,XpOf&c9m*A[C"/uY/YTDHI9IYc>,:kZdIa"^MRh78R150f4XHllY$\^UFN`VGb
%j.Dq.^AIl20PQBr%<2nNbE7[``!#)P(jX<_Eo>jS[[d8sQrfZ6C)_-R4&RhEcA\:cWmeMjP\e%M2!n)D[e47)GOcZO3@NjVLo[/:
%)1u\'G&bNJh6U&mN*03@XK2Z&)+QTb@/0Wl8!l`06n(Nc5Za!M>P>Zq.1bd5CjaIbSWQZE;ph2kR&uSSPlJ9]#W0#=eE,?A4>?>>
%5mrd7gWV[rM&"`E=m>E1Ff:^3injT%eKGR=/;)'c+jtr^.8^b4R\(gifjLG6(qWnCQ??+Nl?:D%US()GMMkX)eo>s?&+,1A;29s8
%.]feKq+(4ik1ReCqOSEC:Fu`m*.EnG@mp)>AKn-\bZTUq1k=ooZFFKHS"D;.1\)U'8(,'u^SdGb=%L;$X+LaXVp>,G'a/I^qlRc!
%179B.]j4(n@RMXreeQau;iTIjSp2S$&ag<0FnKZ4bErH9._n\hPR*#lMg'?^%Q'?1+#7nrp](MtdF&BD:G0%Ai[$@[atV`WFX:Jr
%C*5;_)1No%C%>>3>l'uI-!7,IG:R#qOP*ZAJ.ja0=]^b@1b$P5^+Jm!=@K,TQ(np$FCH`iKi"-cCNaY!?0-[DVtUWQft;G1[E2o'
%G5.r=7:'D!('VbN%ObFN#W@D]BtcqJ:eF!W&F56cB0&mccBEq9VN#VS(=]jAobV8:@p&#\1I_G=6pk+,5OiShFAV'C(IY,AEY70-
%JNPCcK>l?R;UlZm5XXZRjiGA!_*!,jb4g/hKC=AKXO_Wu^F_ZOlTQCpBY(C8ShqP:AXTl@WEZ[`G9ei8,+G&WnrUVd30<`\@OWS#
%[ssHKmQtWZmRb3]<PE_,]OBlpZAcrF)j1e[R92YmAD3!SE:Ag6U5%c#8?XjahU:,R'2EB\DR;%(6_Qq0mc8LK9C<heRZ\:nI=H6'
%[TA13Fp[%:OnYN?L>jI.8oUD#:ZLd><n%HX;[0eL,=61`^'\/FG-hX[aI[CA3M&t\lj_YC=$1&rF:^1Z?:N<"Qqe9ULf6[X7C^g&
%R*K>p!.\AbPm,e/gW8I$&+1i(_<n_!52(''riRY:&s/=gG7WKe*#S_;-P^e+SpQgW\f'(T4)e8'<adf1[&#U5>/?^)g(g83H9j`9
%6S;sLdGJ;n/E4T9i$asX6o\A8HZe$")]4uER:VVa$Y*6(=m8.*l1T_'%Z%3ZU$;TsGR;n"0m3Lp@k(0tni6.cGa7Jt3?Lc.:S2p%
%cFY8fH^5mQ^?V\9]%?uR<V`P$&'=[+F:!!(^+B;`5uq2>-f'H)X%lAB85t0tcl%sSiH@FG.Pft1N%UJB$;X6D!t4UZT?C@h=a_K>
%7VW/-TeAm4EsIrt-HJaAelTigbAoN33(.H3Y(kX]Zo%<L'"1aD?r!f(,g=jg0S*d&;N#T-X?Gcj.J$2-N:<8tXXlt!Ki(\CXhN\`
%6A6g-\qH10L%uJgILFuWaTLk#JU">h7N<-Kg$ATs,);V^<tCod!,baRG=$P'`d=h>aTM:)lL@f14I-6Qj92JMQs&.G!-$_+5\I$Y
%_SBIJ4$#nclSlVG#d[RCU#Nakdrj''-iM!%$Q5pjZ63K8R]%(Q*T<Tdn!0d#P`b47JTKIfgi9.X!2mBW)+,/`@ZQPsbFhUJd:HC#
%KTQbZd#ic':([+n>3C'E7.J9Q>NkfZ+DQ[VBBP^'KiP+M1WnY=P=&=]0sZ`HC6=GX^.9d<.#5Is[QSd)GiJ$6>T27R]H<*m'lak-
%W/;IA>pCiciX*5Le7)W9LKcp/2i2OYMH>2USaX<R:>*luZ@u5o98ekXkC*ORR?,";U&DMC]doj:R^3JPrj$AX4(&W?r/<%oA(+P@
%J>`W',Ip;Z)>5!=.UMT-&T4ZP5LJP6L&J*f9C.QDcA6_+G6]1a+;c:[>**^]HIVC+^p\(h=Qks&`bXeW).h53dgd@R8Hd!L]A_q%
%#9>NI+2MSDck$9XNd0>">b`4Ne8M7>oXCQ=@91Z$REhSf:eZ&0P.p4_?g5H^E]m4Jnk=#b>Xo;'$K%?q,dLHchp=l+^X!(X8I0hL
%o*bh@o5%F-o5d/PB84@2`$o@]n8;+=,PiZt3KW<OEng_0b923t^DkR#P5q$k;klT!T.Jbp1@?q80Z="u"upOJ?]S2HQ=[5;pK^"d
%#jHRMaN^;T\7[)0Fj#70%LbqdpU._(&r=iB3^A3DQ:>YroY;?-]to5^b`@tI$"@$@CVEI2;b[Gs.3/-"fG1^IX&u)=L3+oRe)ts(
%H!iW65&+I-q%ba6nl.tV=gHAB,?EfQC=WG<IoKM(WrQUI^0gSmO=ceZD4>=3K1)m?hf:*3lF,5Z0Ok\=XdR!$6b_L/&WFrS?3oo1
%?Cu1JqF18sktK\#bkgV2lBG8Xhe(Q4/5il*P^P*]5N*0Z8RF7j2obD(Ei#pn8$q$3A\%*B@Qop7s/nEbY=g;?%RXQZ5lT0!Pg<@m
%rq'SU4n+K)aC@Hh$S)(N,:pc"pYO?)QM+[`C,/E/]7C+XT"^?*r-When83TJS9^cM4N#AK\Ym*.b:Z;E+RRFA6MEj";^BVU1u;k1
%4\iFi6,lEZb7*f6/C*9Fd(aLV3%UUHA-j),c;OEO$:B#0?\W2`YGp*)Ka\BBDLd?9f1Q#0R7FI>.GL!ACQdsb3HCe,,u]*Ea"p`K
%=3ck53Nl0^WKc6?Gb?U9+nA0R,o/%8li^KJT:MFo/h'0a+6%M^bQ]FO\YQ>:],>>3)bT%1jj#PnG/<)a<,jM".r00Ea;&/pjlsEk
%&a.np*I'a?D(D%[%#Sb_J>2QDQ09+:dG?Ip?Vd`cEsmGhcD*%scc-Q#l#r@1W<]K3D70X`T]7ME<UL29gUHdQ\Cgi-5a]Bq=3Nep
%O\ZiD1*EpEO$%@;-8DC\9ZJ/*Ftq279FbRj]rTNp6\JI=]>r0LA/lEa+"ILj:/nYEhednc`Jc2@ec@mI:NL.dneYGB*SK;N.SZo[
%hp7^ne?tmO>(TG-a95j$!=\2e6Aa_dO$Y.Pg1faoE2&nh=uIs5f3;-F7+kl)lLu!\p1"5tpQNme>7X.RAuX9]pU(k>"UAb64H\di
%IdFoQiE:k$Z3ps$SaV"0I%(>2,MT*`Ou7=J,I7XL=P5kanLc>th@.f-ljYPlfo.A&7qc?=S)^Y2/4RC-U4jJhd";Zs>NtB9g=Al\
%iYhBA4oq.*)Y'++I:V/Mj6TkM/!MJr2Hp8.6U9uFe3Pn,&Z@Q/bIlq)g#+SX271?ri?<O*,Hdip>QBEN\@4#UU1c<p>7@7bi*`4i
%])o$YYf2hYi_[1;,5']6b!leCEq[<:"jLR)[YbB[k4mZcfIVbWT_AmU4Z?ir<dp.O.8!*O:XPK<Skgk&3:"Q"'YcAd8,'O;X(QSq
%6JQdU1O\Q\JHrDsEU"ep#REFV'GK$uVkikY4\?j."mEQslr+)=4Te9VaRACbKb<MU]9GT]lQ7^BGn#(VCd#-$_=K1a4Kksb/VB1=
%Sso/*f=j'QjI<r<47YN,h%:/'Wgd2:1gDQ$[uQDK,Ua[X7h.>Yp:(i>3#?8LoN/b#"[MN*AVb'\b>M'2pYs=sS;QYnroBf-0q)A>
%bUqVCC"GL?CrkMGs)#-c*nNR(]3LaHe)kXQ%r9Rc%^!!CL%5Uirq6Z<VP^Q<6N(LG-[k<oW!654?u%"_.0qG&L-;C3.I[^F@"4kH
%m\7]O*OID_/p85^"dR!.H@aag<A8<7!]NUl">Y#HZ"(_dV^#bf+pupQTuDV@`AF8"!b,5rI!#*Jb],bQ5d^aR%,NP+65Rk_DL%7<
%TWlX-%m7$FK2r"Ea[oJLM:2qBRST?6g%$!o1Co_>PVLGoEcAD7Xko3nddGPQmDo9HVH+ksgb([[:gD8^]N&De<p%*;IJRc=NFj'6
%70aW"N!fk8U9fS;o.0QQ_;(nOB12oP(.hfKn?jcNG!d/hQ@cY)II5T[;V2)QX@7&W$_%U;2RC)"i=ct*5*:"oV>obWhQ,8d$@YOW
%ZO3puPk[Ppq]6c37uieAO\\CLj=S>B&pKsQ'SE!Qkr.,+6;#O,(!jfV>[\nr`Au3$Pb4d\fSj4?#MoJkn88"Z0Tqn/J9A&g<"pQe
%7-!5e:g1D&krV4:cutC-h!-Od*4Gp(ZfA/DNDG4>a[a`)Kb#2A"*fPD`&==T099EghE,$=I0msr33cBdM!g=G#At7opQJ4;O!dL1
%X_!TYOL\2"1-CJ@%&LkIHM]nB?J_cE.[37>N;U_Y/0WS"<$I#lY/?#_i#6iaM&M(LIT1rH]f^)&(_sP>Ga<7^i+U<2UlPQXM5VHO
%/M(RIe'i$,np?eqJ0&'mD[Pk#f>sBE(FoR0Lqn!Kp\GJnlg)->^0-<r=ti>$G"(3<&X$L;9LNE:?tmjFQ8)FdJJJkX;"J)_N="\3
%@SnrK27]-(m(*'3b5faQ`'F)NJPLao?E/3<QZNeW]`&o-$%BoJf8U?K7sUsq6$@6Ib]TL^TXafqH39*C%umA-Y9WW$4RgIii4$g6
%!B`\fat5I\)"O&L"'-d4DFG)X)m=kBF26Sl4T0H=Kpf+[3pL]Mgn/toP?rfAq?0K;@)6]>`,5:Z50m0j8c1;Q7C.X8^Z1`u*T#O,
%\.Uj:8*,F,RJ1)-?`D9o`CaOn4+f2apo>tJA-K[*JPQh?HK<GO*p21#mM.gLQnW9Vg8<r(Q/8C)LV==b*Xr1=ffZCA$H'mF*A9,O
%?\CXNe$'])1F^b2-s6f5bT[eA5&8(u@As"7o54%s:b)<H?'$R7QI/3s1uO)3;($YnA>NG3m%^SZlL[`sbnHXd/:r$7iS@e)m_,Vj
%.+L6!&0?qP;O4GD7"nTFeX3a[]ZMe9]m3k>CRsENf:I"RJ\a&74>UhMNNkum&C*d]*`0Fkb>].=m)Y^g9^Q@b<IGVk-FV#?bm:WE
%oB%C]'Qm8;ke)o$j^TS"=cB@P[[u)](mqGRl>UKZHQPn>eTdq454iB89-m;FZRZOE(;YBbXt'b&.UDjZ](+#_"3mNZ=5m>OCD'hG
%+s857]&r9P&r)BdVrP.kR:6]4JhS`4,YXP]:d5cV2tgm2J!BeDoWj$;aii\YHY#i`>q6GhED#V:^kK\E8uH?rE0l/9FuN&)IV:#h
%e+10KaSP[^,id*UKZ]'0l'CO[#&hPLh7Q5bJr2%sQHamWA;?A)l#EhT[fC\+[LU(V]KLL0)\l$E[;nnf-k\o>P:^pE&e[_3*\r>8
%Kd5S2fnI5G-J%VBj"q,E5H"56W;G8+1$j]V'dHe0cZ)!KfkYb^A5dEdC+\RmNd.VG.JBAscD]UVN43*Z<PHT:E2Z&d1U9cWE<Y8=
%e'o#&;/;A6Qg="5Yo7BF&VUmiZaCFWjNY^t!)#Z[&[UD09g<K5#7'>Vckl[3ap&^5Ado(H.jB2h];A_5RR*H2XG%A'!e*W[:FA9Q
%&mj4!Q]gbq>PQ\ApH[UgndCJQhC,>$Q!O_t/<nu'UkDV#_0OK=gXfHsZ+WF;-nk"$/FJs""Pi5U"\5K<%kMfl?@uVE(-9#ofA75m
%!niDF]u?02Y4dAO>`/lH(s:;W1hjU\Jc(^V;*?*7&QaLZB;pO]_m1mp'60eWjfEAGAdN,km]IeQ[CF<c57@$(KlVlolS393W-?$$
%PSjq40:be:jQ6aG&F_t@VLB1L)i]B8=]E^=O!OHD!FSAUOM'Gt"L+(f8X(ePDO`EXlOHH)%0GK<N2.E/X&m&+7M\%tTrFF9]8UG1
%oH+Spo-p->.mQ:Jcd!GJ8fH>%fC`A3<L(2=j[goeVcVIC`jo\!0[;(64dbl8;]hem=W8\5isiTb2i3,/6@F6?M.K@iAtTaq>?&]"
%1-Z858:t8*eWm#"Hs/%EKO*@MP9]\*]Ca/pUIiqu0(=]Xc@#1_mje:Pi778gFj;2WfoK0&ZSliGq`rRnM*XW!.$Z8/jSdXMD$@u\
%])_YTl:OiC!,h.s!$^W>"BhX_U'JF&QIM_"#0KY\I:..n-g)MbD#4(1bpmDag!UaKEW.IWmaS*WmQkH^8?9?R,>./r.X3@W>m9u/
%-IP5]@8JA(7Eq;ipi94AV.B=JotJ=NV?6M&.C#h/hu]10WRoZ6,9+gX(4C^gcp4PpUnVL,1jCdVNg<bJC$\fI@Zn^D)MLH?<@cuS
%Vtu:$0;*S4`FJl6Zp!i'iU!nX"FK,LXhRclRei\YH<u]Z"HlZl=Of'mp"#s!_ja-S1:CdFSIIVORcmnc^[je@DphTk^s?:LD"6Mo
%9UP4'ZFsM&`:%GH=TicLV+q70^9?2I#d</b,%&-J%FPh-^Um1YhPt]9K"W&.1sa6L1L=U`]'2T*FI7b?E_nsr/_8m!"2K._#/Djc
%5[4:]^=q`X-8(QTY?2s+<a?c(`K*bp3uXgCF-F&@<+_QGgV19"br>Ht10ebn(l@#ATlQ2[h#%c#!,f&o4;>CrM,UKDS40_%WDTO`
%1fY?GnA#JfPF'4j*T[Yt,X<:h4r<hAXs7g?P1B>0,QG^h_m#C-UR<[;-B[TdVN_,n]CVTY[7t!SH'XEmGT]U5mMHF8j1p8JK3,bL
%:#\_u=N'ru0[&dT+:QKFl\TP3r3U2Wb.[lIFa3l4i_WjIP2^357@kun5T;*s_d@gA^Zh?+$+UE5K5)E`*85af>>bMB@YU-(;YIT/
%d&h&(XQ*S_qWS\BF#3LBh-klfp/\_>*K^rB#osLFm$,"9p<)#YD/;UBE_#'R;YHY6LqRRJaIq"`EaSh(:5RHF/Faoks%.eddb\&`
%#cuTUcG@!RAd\<<E>q`_>`=2m"2HcFm'PcqA932=.:=$H2FY>*\nrq-U$e\D/-k%.aWs7unnV;aR[;NgFO^-9$t">c:/U_[6CU6T
%c#n8$fEf^dfXh59AIAc6aMfQp&oiSQ<?%e/?0Y4>/b%UH&CjC,mVq?>%B;d'';%&JqO1;5GtW_0m2ZKU+#q;t-&YfbeP('krJ-I;
%-p#"i184lX.c?olVHh,>[Mk02@9?fg>aXpjipd0%E;^6[0G7'4aZS-=X+IKd6p#oD<Ohp"#!q\tLafKFT/k.2djXnFeXlnNp^c`Q
%mluo.\B[KJX,2(^,8PR-l7Q-ET0[:be?(c0F<tpRV]#Pp^ma\PMQsW)G6bNm7r7R6jC(/!LsAHs=:X3'=+*tu3plsM/Veqd[ND;N
%^QIB5AW"nIo8ZFp57@LifYnU-ZjjT4VF.#5TGg27^&#!3s&#F(L^N>>=FH$]PLH5k*$:fN*r]E2GZcjkK`%SFYEJ,gnYQqo"2`n8
%?H]$/]sft1rg*&PeD%Th9G,NlkQbSl7hjD?0PJL,)S[=c^^/%k>U<XK*kJ3%Ta;0@U3Zem".Z3g#Qs@c>N1CNY[8^=9u3+uL\`od
%>I%sV50U3LGi<AI/SYs`hd\[Q;aS7L3["4Pd\:&_dm'Z:l_Ne=%6h,bY8WteToQ;#?6qDN.H^Na=\ALiNQJ.<?b;a>mICjgKlRP@
%G^"nN$LYbR<qk6"3L5#'0=S"VTt[S.GpsSpk7//r9o[mdO,o\LUnnblfbG+E':?Vo:qEGD)@1@$@IJKujmBkd(Dl'FBOMWTeub`a
%;!X>qmufc_BBp=$hFkZr7:P#?o($+@B$'^KkTlA!,5#:9'W<fmFN-,)j]''.gIJaX8CklT>E6k"GIfGHlCW)7o,>6@Sa3H1/=KKn
%rW@GD?MW2Y/Yc;i`JWdIL?;L`?O1:C?>b$"\]%>Y+'BPI4c7<A+^0)L<Rr,."fgq;TtW#0Z]%jEcUfQY#g8OQ3qMpnFNH$.h-KO\
%(W1AlC"F+[bfU/rYV8L7oAPG#/I<:.nb5R:ha]CR:9Z41"7i=MXEAV;(Jl9!$5_I+r"'mVLP&1)"_H:hqqG5tb#raUb]on1=/%\l
%V*m/PM9>DmB*ENS@s]SD:PRIms4.d/D[DUgc!U6!g)0>9d]nYr(iUMT][&-ec=^Ir(7B1g."kgEglE'nO(WJteOrpKZl?`NWG#@o
%D5G#)3BP"1Kg%7!E,382:*VkD'<5Tk4di"&b?GUDSP!);WJ7pS-ef*&bIA)um4<P8/]8rK(ZDTn\OkB@V]K+'3W[%ogTb/bq]5Q4
%"eHGPm4?-QBQl*@K:O(,gQ,n?$N.VR"Wq*H-Z=Gu7M>6WU"Io?qMs=QWOR"%lHAER[F*+XM4+#2.<UEg\h$?pNE&$VFD_2*!C\oe
%9Ri;_OP?8iS+HPie@rEuGm[^Z2)M@]'"sV8O$6Oub1#I0)\<<ST(Z0U3I0FN/VYlR$V1Z".]3#+[6.;Y@o.[$QlL\(@RqG\]lmM]
%M$p9Sq./^6>[Kst:N`gb:HH6CKs'L*hP!Zt47YmSGs>k+@58F(&W$'cEBSV#-*<oMiI,g">-:AMj\XqV`JhF)=qj-:/h..)W4+m3
%Mg=h!Vn/VMcMtV:>mOhOBqb]]"hBdKmcN0ToV)@QXLocSe;=IYQ#B],*I&>E;PWO-TpPoORV*snrNkt*M2ceM]OSHO"G4k8rnNsR
%a`c'TVIrk.Y.H<l6UUE7+\/kcFi/so!m0Wh06VQF**R@qSKa?)3ZMpSh>*5.CO[sT;jk=ig3'0hhma[_gQfXc=Ei8P\_aM.(:PWf
%(0sNYkNC![^Y];g[;_U[!Al8&76'R,AZ9HDk_i1.aa!?UQi8d_LKrJnn1;8ocY2RAi]uhnAfldCN\.EDp:ZAgX"A3>Z)X?p0BTqA
%S):S\W40#]puk*+D[UZt5s=oSNM*65@o$D5L?)B]c]j^2oiXD,*m@p8e&U_rGI$\)&k>H[8$J$ho;NCMX@.BCQ[1SVK;rFTMfU5`
%Rp<O-5M]s=4:t0E7iopAeA/(_p2W?\p!O/dF1[L>-h;^_gAM=@I$iEXVArKYr%`]9AK7F^.H(%gRDYIua1RAB_tF:>j^H9W!cc+2
%q`:J8(S))$0q,dAFCH)MKATX1)&[ECDbhgNs44B&XjWibHOTP..71FUpnG*L`kQs$]C<;%p\`2#@o,_<B;gO+gK)jp5=6T@q.7U>
%pCa,gE3dJd&HUCdd'Zk_^+L\f-)_1:Dhf7W@M5<Cqs&)"?O_UE#,p.`dTjarhLm^9iX5CLfYiL0ZbElp>hUSn-5U->(`Lj"V;CGb
%c('Md7ai+g_+p")Nk3_KHg9^-F]g_fc05nQ[MD^N2[#?)LAUQUZagZt%u6/\(*?Lt\kt2)%aRc2;.kaPb[i3ETiX7-j]C=Rqc/Kp
%c8!Xk9L:UH&(mWVN:2?(jPSZ;_&hCG'H0+aVPB%#n[5s8MeDd<n,'dmc]Jmi_0f93Tam'pi4UlkD=:L,F5>_j?!d\E<LUZ0JH3oK
%Fq<Ch!Sq,CCV"udb^ZD@*]5$Fi]]^Sl=[R`+TinsoqGm'ia.#@ab69?-FR=fi%]`cEQE=rf2*#iI"VN4D9hdTfr=q?.SK3]"M4?/
%GMFWZFF#%28u5q*/3%1?(L;>Go0dgt1*`_.YkA2R;/=*$rP3cFXJ1n2>%9]"nW'PJX(+Mhj#\D0o+R%s;pW[1"cULtQhqnE'2&]h
%iXOdZaAho.oX&&@Wo#an'H$kg-r!uuV.;'@Sr*;BqM&]SW7[c'OB9Deb.YiLicmhj^Wf\a-!4[q6eGZW$A5RlUmQQ9lYD$aC]/t\
%jo[=D]mE`3G%*(-gkP$.`<Q+HiaF&uQ/M(NB=<DGbg]>SRtV&geLm$dW[HL_Oe<SZ`&`9](UD?IU8pkXj&V6*3]VDLG&@<tRQ.X)
%1N3)tU$('.=Y;pcSa_?\SZchS<M`JsU7UYPVs*3+GUf<2Oe^JiNdXhQ;%_U8/$aR_'oNj=O#]UkX#g_`hH%*VM]*;_DR[^JAYXj>
%pJ$&tLX)jQUO/9tA4T@#<i.:uh#aMLQ;&1iQuLHbn&fS=`bD>?idq#g8mX*HG1t(8Nng`LDDB?$K?/ng%dNA2KrBQ@T10dBT'\&4
%mNhXIimM%>rp+rn1.7n)P#;u+H7&dd$($5_28r[Z;d2o*$aVI`o6X4Q[5f>mrAT;S\B`K=5k7`#!ilVVC-HS,)i)GP.eG,VHq`np
%g6>YAo,KK_FeLV(r%eI#o/`e.P):0BXA@)=-8E8%SBk3lb^/L'g_oiXoC#koD8ofZJEQ3>-P">KT&hJ\-dZM.4/IcL"oMs7a,(5.
%OP.uaC!^%:YTMbK%!ba=-q43%M(8>(&t,ON+\Q)[/fFRd6tXEG2m^Lj#aLURfDqWkY9Zq:FRm2Ck>\@oVF[<jKK!tJ\IY/r(GA[5
%p01Yn6N3/S!I<dJP$*aPK\=^:e+_umFEWbI`*[DX!+)lf?K2AR`SbT0.&/[bf6ous&F*rVH(B\nd:".F9P'3X!'rYL.rT.Kqa!m&
%a;9YE1Se$b9>MA;0k*sF@b1)4DVmu_fdt)`HkF%!mI1+r,s*;6"5g>Ske[0tfW5>qW/$K\_3tih1Y0-C9FkrjDWdXm4Z_AS%ZHRq
%/JI>Zr18gH-=s/[4jU<p"I?c^KcF#WMRlHgb2e+k"nZQE<Gcaa<#,+!WQU?^/R%9sHGcuX==n7cq>ej(@`]^/g;clnW=4bR.H-cD
%d-n^:LrB<oWYqOj8YOSeUeNsHL@Tq$VmpO&\fF<+X,%cQ\19,Xg0I*5`I_/oRfZ1N>L/Elj1FZe5!p"a5ZCS6^,*!G/JrI<3U*Y8
%)"djse=Y(ue*#]2X*\Z]\b@$Fl5Vkm3\%V_JF3D3)2]pW6bY:kCRpQ>f'\VfdJi4'ma<5rXMpWoL)*SBpf)>Q<J__)R\2ppBVFkp
%e[g\3AMIFXfTSqPafNGf"+4l=)n3p?6LY=Jd%O\]>/g6'hqnk\S\!%Vle93a(FGLSFJlXFR+:_Eici52TZ=I33b/$qd"'PMaGBm*
%;_iKDIl(+d[%:>?#3^G26s=Bu)Nt#PY_$ZVam,XC0WM=Dg'&s5O'8f*e9u9.WBWr`F;Y<f.=O$(FOoGa9g"ec(6mlJNDmL"n*E')
%EP'O)C9YNNH)$QRmG&:lqKJ3tJB5F)qLsl[mZY/Ih)$C97,&]8TX1d=SFX29\iW9]H_f5(9e75C;3".aPT2]V<-e]R31;'^])iP?
%\#G:Dc(&aEk%ESMVtF4a4sSCGca>`:Mj4F&$W:JacaXeBa*OE<pBlP'c,+OI=Z>l^J0:h@I71qV<Q69E@:\9P"@^Vhl08J;<94Fn
%NqTFuoT^8#B%_/"oFd#>fEgPE?$u)#fbJhc_8n:/qtt`"J!j^#WQB3:;%Mds?2K?Al9]5C5rr/P*U:,VOEJ$-Q?MM9%S!FI;]tK#
%4SD@crML^+.Ta>;?8-hDJ=)mhqV:Tad7d"Hf=;'/]uf2q+-RWMP##K,<>4XD*Xh8do]Vfbpp"Y=(3,GQPJ'^!I8id+'g\k=mkL[-
%r=8p1*3_Xg,al*R5D_jcY9IEG[jtHj$^n@bl?&j2#rk^b\0!17<7h,Of'Xf\I*fFe9ZbRFD8\R0d\l(2h:7[5Nd^nSd/S:13b0L,
%B2/0H_upY/MkK;nH=n<W;-F]u>tQ.=@(X:U/@<NopUA/NE@_]25@"Is[4`c$O`L+SPkUd7cqh>T_*nDaaeRD4pPK#AF\ZakO*mM/
%jf&Vkl/Wf@'^\>-7*EHo1$.ja,@,;*bZrGFP[=5DSg[^A9q]^"Xd9'R_rnPT):QY1=9IMb0_o(`G)LY,UpV([%r'a^XV#t7C<V7N
%;^9rT/DVWNm*?g;Q9ElI"n!RO&[8\ep:bOCqm0iJRI+^S32g#a)Y-1,o:e.[O;4[c'YK\rQ.sRDUM0U_"eopIeT1*cFsYMK.F2qF
%+]sMiU:@$jP[n?9JmKG*._J'oU0'Ao&.2Se^/"m2S%*IhM^Wml^Ymcj;tT_0(pR<q_1EtV.s-2'71G4El/=ml)+,FC^pP^br#<)K
%m9VP:bFa]C)OmUM.N\=0RULP#^tRGUb?u>j#NiXh?&lR5Sfc22kJp&?N8fpDf,<PmZ,*WUNa%:aHj:h!6!ZU\LH%:3$*#%B$0:14
%5_1LBPGrg&<JFN'F(nEg,qW-A>H.>G-&Nu1gD#=c7JH:#oKmn_VoBKc$,tpo<!M$JeD/`-hk%Q>j8><oqlR[!3P)nHTPso9p".Rk
%clIK\9\=::Gqrj8^TOdt"j=p-&Tq<;0\[IjoA.I\b<&7skW+?A:8*AZ!.\S&=_nD+O2&sMV^YKB3.h)cnP@q',Q7Y#$VIDC]=LqM
%fJ;!E8(>%NOS1_:6Z$<:9Y"0P=V8QZs0N;b%`)CCr#:1__ih?MHA/__5[-@.(#P-\gAoR@8!!`E)`IUGE2&6`7QHA]*FZ_d@11A2
%0-">0fjm;t;Hg]>1-KG#6%?*/^\#O=S,)>ra^'D=(_$8p_>3Gq)PISn!8;>tn%L+omrlWkPHR$L((RF0^QUeVMhGId%LX$(cOoTt
%:Q"95igW'RO"p6oOY8C&^C$'cO'6b#CEsJic&=Ke6`=0N+t'8_N(VOj9XYZD33,=(dj0<u<8`k=&OjV-e;(!2EU#40dYrkJR)*bH
%1"c<*&QH+m+rg34VjP4)Kgcs(Siqn_&3J+J4NWs[/phOR5HD,idtV;AjWM!65qshU'u"E*IWcO*1=]*5M.>'mSb=F<o5SC:bX0Gi
%-kO)DOb;3gZu4-'=]Aal!YsjAB]+9^Km*VZ8,5RtArBa3T&hQ@&*hoda(1+C_XVU`L!N()*VF7/Hk3<94O8!*-aQZ[,07m-r7jS.
%A-!p5*=Rj9/D<ci=eL3W#pN<dL63^A9[*&"EU`UiSB[X/hf^YjGn7"bE7&2P]K8W?/n;(`dd#g-:\<]oLOT2))ssId1nh+!S*1B%
%1!_HqM8/=.%hS?^6qHY^kn.Z[@Qi"-2HmQJSoPlr=cA*B;2ncBTiYAiBj'4b./rm/3TY=Y]PO5D?UNPn$d"1fWB,1Dm#_a*O2oT<
%.`6`,Ytt(GN(u4B6-sIT5[Xo`216+9rsp?S*ERELi8ELmBfhq"0PPtN8%KWOGa#1G4O$jX7b.pt_hJ[[B%.NR3-f!"KDeQFo@Yu[
%&Yg3ZFdel%JI8=]?nYXhmYo\/Fu;opgKH$$HM^VMhA.l3JtOVVZYG3eLe*9OUhl,]3qM=?3OP%4V8,Mh\UuC#SsIB;gYVk6ZF!Dt
%:h;j@8]%%Ojb-l'!rdMSEUV'CIas9Xl4O/'[$f_V'aUJ\esa5G9M(k>h:ph8[SYeb@7[MJHhg?T+QC<B7eWW+clMPRK9RSSMKtTl
%>V771XVe<`bK*uCD@A"N7T%O:RZWgDaZ8hO5eIj5iN?/[*)mVu(D>)5+rjVFP_u*2T[G;Qg?T[7'BO"rm_LI[L?8MeqQ2P2RXm3Q
%g/m6s0.DP18L$k8&r`b?\J6-mIelM^\Mfujr^fPQDF9a_Y#>E:2_41!96S,JNOqOCHV;f;^m,1cOY#UaC"ENrC2i@-OqBLKf(gq+
%-3NolT")>30)M6rEN*7@(5U-I!+rI"Q[=&@FnDc-SA9%i[`*k&W/H1;"!!T7fRpPMqZk+dPGU0[h8MknqN(SSlE\@<&RuEO=BVQ<
%2cg/P,FROP^$ko).=CtH[nHE\iVu])I4>qh*:QmDp8u4cP=?i),)K=jdYl<6'cX8&ITFV_dV@Ed2g,\t#'D0+Df8u[8fV+!T#P&_
%V#A8gn8LlAl[.epW#mipoIT4R(tI$0PH^9JU6h</;n=C*KF)[>0[Kj=b4SG>KU5?T?I<Cq1A31^phQnT@i@mTT+S#+$j]neWjk*f
%9#LTT9;2'U98L7^*;me=Y*Xg@LR@Jj$a,'P4s?rr.rV9s!U!1#bs4cqMFT-,,n5P.rYZE)kE<gQE!hr#ke4-#Y3276fO(`;;nJ'R
%cs:$DKb7rP114Rk7;Cb\G%CirBr:7+QG[2bm0J'QVgc1Z]h\HN%%;**<\lj#%@t07r'+76]aYA&qDl/"1*B.2N4AU$MQoQ$:-cb*
%9[2/'_7QDJe@a`DN^+H:92'[e*[&Xi9j-!\#&e_*EDGgP5pUo@D2+1L8giNP;e4[@Ksp>RK"\VZ&K.WNMIUp-T5[X:(k-O6'IrOf
%9(PkjPXmuKKA\oC2DpB?.@=qjb"H>MQM/nBaehUe`l6MnZWN/$K`PiZWf:MD5A.FEk'Y\un!XW"f9#X;nJ8Up"n*^\KTbcf`1O]P
%Gr1t=Xn0E-M8Z;_))`V!h=<uMeJW?VaQ4D,\utRYi%AYNl`'lZ+ldU`JL8.;mL-kCeP7/__O?4D.3[LNVBkG#72J)B>u:c5F2bj2
%AC`R-g=J?h4%J^>IA?'enGTpE.&%.h_iH698!!jogX(DqoRl9tL!WnM:"XeH-<nI*-e)3Z)N7K`;?Q;\X_TH;O__CW\oA`R70MG2
%pF&s7M[rU^B+-*kCrJ?d:i47:l@@MU7SNUU_5e1l)7^uL"JuEOQ#1AVZ%X%u4goA9=/p-Z3:aJ7)n<u]?tGa.6I.Q<T@b]r5>RAu
%PNiiU8BUUaPbL4`5i.;ok^c6VVL"'Yb%r/>7bIYr2-"L'&a^m+@c2SS+`.AN].#CAVq?eQYHC;(^,iA#a=K.>Fp=`+"tdr]O@IWt
%:fPIW8(rthbLm%&&?bXqjo$uEbUmIt$B(gdMu2m`XY\KU<(VD_ArKj6Zm/5u`d;Of$,Go1r<5SMp]sr*:_B0t"">;W]g40X<.9JI
%@J(W8R.A']TDgK>eP%2nB&73DcE7H75LnoKhue)ffO_k8LkLpE^YK,h(!ht(7)pm>mOgMJ1nXQZQ)Al'7Cf67n$'.[U!tnVBQp;H
%:U)e5,TB\-M'\QFZ=dplITOPGZQVQeg@'o1oK`78=%*?fre[.*;d1r`6tJNc_eOWW!]op2!t6C\2$78?*+qu^_'AP#9CYS[BD+M0
%X;MU`0)PPCKD3JVhUEanTFHbP$pKJ?1b%N8Not`6l5"RL@K7=2N5UcipQPNAYS\P"Hf>0C"O(19VC:e3OAth)P)aKl(^[lIr]RJu
%;^#K=->e2!g8n-HG-S:WLoX5(o=IUtMM4-`(`uIbOrW\XV@D;b65RW9du\Vu+JI>`_U'/]XnF[bMPq2n(CG_"/.8?oY::@4EBmEg
%HgMK$$/h2NCHd==1Er(L2ru2;S#]VaS9$)Xc!q9Qo<adTO48!8mnr@prgiqlo$T4",g<pGS?Y^j[D@.T3I5CEF(5VPi8GT#D]/ET
%^hlQN[@W%eqJ,,`SSAV?P`?Y93(C";i79%Qem!2!HH]djZ#r`32#%oUhFSb7<E)#rISQiRW#t%Sjhs#DQ=+C:VPc2/KZSR!N)_Kp
%Mb`!/4[0fqX*_^)NHn#uH!nC4MUqTi]%qS%frI-TF)$*7_Ggp/\YlLprqLZQ2T.p_ni/4Z)?s\6H_jam_*\m:4jdV.fq(P&q'(X+
%7[s5=q1W8p4?H2?flS.W&n*A=QAiJCSNB#Eh6ms="d36a'[*UL-2QIsO'4=a,(Z+'<nBJ'WZSSqbdp,tRAHetTTT>N:-`=+:k.ai
%MF`+gA-60l5ptPHX62e(b)!,nIW/X#Z8jQF9=F\gS9_?s!dlPk.&&du")fJQp+4.oZhAtcO?]oJ[?M,$eKr-$i&4aGa@b=m"O+<9
%(U*O6)kFcrq2fg][kLudn,3P9W^&QQWkBljR=`D2XnDC1i3="IT8Y;f+]Rr35ge\+$\--,?Tud0Da]UlD(gol;EAp;AbL=\YT3ZF
%qtp>]+"E*GC\;EsHm41B<61T$_Q'D,#/p:8]k'GJ?UeRkr`2olIV1=n8jH_UnCef:`q[&MMa\Lr:ggkoQ+g1MPn%FqPX%/8KLUtY
%L.BeTmo*5X6.Bi;T9`BIoV'ot'I:!q0krnQcG4!!FmE1n\k8#H"]s$@3F][OLCIf1nl0IScl$4Z0bnKi_m[>hT]rjtf\b-\W5d($
%=?Ro*,.q!F]`.M*j?^<Z]fK2[?h/]Hq/tB;l.J;VJO]<e;N!<8U[!5q1;>2Ro+(.E&X+lG#@ho"22;="P;VO*]QBt_O4T(gBMX4p
%^VJ,Il^=oN=2DObOm?]aQ":5HYI_B8EcrC9G?X](a:`j+-DBBF(M*<T.N2clmTGCPl9m[kH:IaGOduQ!1KUYM-R7l7F)SkIF&S-t
%01i;W:ACmqGs>N8<<%1S5@;T;22=gXh3u=G):<>^G:$ad>ukb$=*t-[0&h?SPiG7/3mo[0=,BY_+)-L@%=eNAV4;Z]!@#4C<ZQFO
%kp@-B"i@7cM`uN(ZR-2X6tfjbG.l4-+:&0AX45;1L(W0`N6%9-jG<kgK<45G7doXl2bOOq.q,b)^pr>m1=C97Hh`Co.*,p=E@DCh
%&sMc%JNs$hf(HRCP9o,s!Z/Wl%omtYVs?!9<kJ<*iaSZdm(i&Z+6KXsf_5id8Fp)U\&B3WqIV%LI+`E5R)m)!lcrCH\Z`NFlJ(B>
%h8VE%AM1)[PV!D@;oN^k[t4`>ll($%>uLKKH]Ld`q]$j?+<Kd;FNi8Y#qXRl*ts8n*-oBBZlH?gI[,86,K3">^l^:V(nl%SbD--K
%@)/RLO8+C[mo_R1D?Xp!PuS,8:VS\0Srb:eg.ku5Prt05RrLOACfQ=Q70ZtW9u"=LPNnH/T9anCrQ]pa4Q!ji!XNM@l]RHG2@IAf
%8)?QRI[7YBI.sCDS;c<q9A,TqLr-!q?tW;C?KrQol^_)sW18Yo`iRX*.29BM?9K4u]Bk#GNhb=5HQ'#h/7..-3K$0hpUhYQ!3kGe
%g)/:t\201\^KL`mDg[D*5#\.!dshg@mYk]Hec;P;+3`km=!($@87GiSU+bZ/2U_MrRO1hD\HQl-g@^X3S_NU=(4N9kFZ7qo(CP_t
%U2^Ap-h03\)EFNPjB_?T*k;5D)/C(tb`QI73fX!Z)_cJ/4f,<#X\l-&RFKqm[k!=Dm-GUPLZQT0_<>$`=:]dZ+YMM=:P!ZY<C5Wg
%Ca6_`qHA=E\jBK9=*oJZ%A_P3Nl_iF7iqS#?QJfT]V"!Q($'t#=FI`2F'h_g;Q0agau5'uL8kdnb+;QaN]t-`,rULX%ophTaNs/d
%V-`*EBEgZW<7h@N^J[,:kFXu"?3q#N/9!$3`Ke5>ALde!q*Z8@quNU^FO'5Q;KCa1GLYWS!u^L]1YrYN&.G(n/M"S,<rSr92@Yif
%\qD%PVr)p!eJ@Yr9k?ICB683\8-L%8$O/c1!g3h]>(2aJ9YMo"F`dL>6%@[pf]$CZK"#JbqAJCmT.ac70iaNecP<FS<HGPT=,7X@
%#X)5H,J47c2<6eff:!!6C5"@9)2q9p0:HiuVc=kqUHNf%P5P=5MAT2&M@n%Y$#1)P>.rTj<jFK]*9DDF@UbVjT.6,<%!Kr-k#95a
%q^[_.C5[V!9E*(tlP>kqCu?9Lffc[(f=*%ifJAOWZ&jF?d7CfJfJP_rQ+cP+91!O`%b%Kj*2'VLA0sVh*8":fl=$+@-]b4E^gE^L
%b@;,:[dUSC'<tEZg1AM(<ZdHSA)Q##9X7(-n*5l^@"Y<i57uG;-(^2pl7Ii6^+"cM,L'iXfU=da\gp`Dc7A!M@!?q$dR6NoK+YXf
%FH.a(2*]RU^o,')7r&8CDc`s:%jFbpW[bm'Jgj57RudMY=2UpEL6jf<Zf4m$J(JE-Thm@4bQH1Cs-0e!9ITkZPrkZpo@.U*,-$Y!
%`@Ln0IGW_`E>:r[E<mlI*f16[1>h$9),--CZm11MISA/i(%R.*iu7._!0$Bm>6gJ@Qq2RI(j%*'A+(pa!_*eiJ`O!CN55XUh+I=?
%m<02,/WoOKP//'U_oX<&THu4[J-ooNl`#p&roE.=`qsUUiAeO)T*%k6-;Ni*.Ks+Y4:/BJF1@,2o\?DP/oasA5Fi0sO(-O-Hs'.?
%3%uoqC/1T,c2"8iK0Ysq%q'5Pm0VW`A1mg!T1J2b@!WrdP&d3+5nNJE1]XcJV/Q0'QVaMqNrhQ5G1b7@?)Np(LN32B=uiMFZB<ds
%4/4!]qk5mdeWN6;UsAfd6)RP2a1fmmM0F=-G3qsURobOOh84@t,O*kSnXXPak:E7?odEKsA^OYj[<lQlA>[FRZUQs(f36AVX46]F
%e*q<^^,'s%M_e@OPj,S0Rd2G=oNem#a]"@+38ClP?iB'9(\5N&B.M&Yj=jatj)@:)BcsKJ%5FYdR1TI>&^/'4ES)>A*`iCpSB-=U
%/r7>g9jJ[@o(O8]$-07$8D;mD+N?W+bgLb@eV#7*;!8Yuj=?\'fjl'/JnD!r=Y5d`!X;G&gF/duQf,-?#J<^8o!r6bbuAX<HjU$h
%'KC/N#p-&rcZ<YU+,iqa#gQ$19&V0*]3NpW?<:<Fgpk_K5bZS#E$b-dlGbL]=F3P5EYYRFZ1OqIocBFF41$jHM'iD:2QMSh_JWkf
%qHK]p1WW1E;l'?BZM7WSoi\_+oBV79VJWehB3q[k=Dja$r^MOWag=B5@)l.*'=c.'S;lIk@(El'Bc8%K%@5ui)k>4^Mk'[iNp$?U
%I-%O\V9snB1'mj#EIjft@H6M'W[c/'q#*MYna*GO]\cKk`;0FXU*H1g]LZG%J8]GRI;$"kEY`pkE4]<C7RE`82X`QN]W4[K53JoT
%mk,RiqPdq41bGI#Ye\Ag5b<!'lIX8KJ\h@p]@(;o9]!8laGE_hJ0pfXWHl0M\!V<&b4g2aJ7Z8]MTBEd*?`XDcNu+`^d[M;_OmGE
%%umeB?!T`n>l/bt(96E9?a5@;U;S!#lPZGjo9PTOXf!21p:@o">]+i+?#=!F;oHCn]u=\`oI+<NA<;.l&rj].ogCcVBo9_)?`S>h
%JHJ\"J`SeDT=\MW5?L&cD.'nK:9`7u..fX*=Aa;UG<N^QRS4JASU,qkNjNL!3f/5@oP2sFd8.J>1I>:Tp'S+*>00;B>f:c&@b\,-
%At,sD)MQMIe\\aR+K8%*S3!cDQ-ep%Hbna%Di5k(E\*Z%^#n!#3Z40+b8%b.cV-$c/X.Jr-#R;u>7:T*WV^Th_2[CY.:97=1SLn.
%G.R*+=1AlXDP-YUEiLp'+j=d<m`HbO+fKicG11Z_@./JH<f]aYU;u*S&_hi=jO,5+$d\#$""D<k1JS%d'R5%@4Z::gRWpiBFZu#:
%?)rtmhZ8#Yks)6?@cCZ[QCbcp9e+g@".')U/&hj4eJ7ef_Age\Za9C3fJ?lo&K_?D,=9Q_D++DT7,O6YGG@BZFt0:=q<R4"D"G$R
%\Ap&H-)8u?U1Z!XOHLN@@#Hs[)ci0KSOjuW/PGjcEStp$5da!^@sn.qSKqglX&FujD*^hdO;smn-q8[PXZ\_GebVbghEW$(aRAH-
%J<?&-/P8EaR-^7CT4e0V:82/"(:]+\1f[HrC9W\*C2ABZl4_a.0j.j]_cLT<fl3a2<uhu@E>nkj@X>eJ@OEc*5g1ZiMHYPZFRK>G
%=1?./,!/rH9=;L^i3!^U[,]t?NUS/NnA-fL'.(SI)mTaJ9r\qEjp1_DH,gUD6'/p(iXq.lBo+DR8iu]=Q*o1CltT\]2XlF98#tX3
%>0F4PKd8T`^Xs./qdd'UR4\-JU+-"u(7_%^f6s1I>=kV8!Zoo9U)0O]RuW$VY(a]&HI[]S;fTEN2+ei+ZlQpkCM'L6b?/)(61M6=
%[$pD2Lr>L=mckMY0u'g_k6RNeDI0GICr88T>rt;-]nb5jFV+FE$_aH]W49,Jq1utiCJoSIrA<uf;2:JOkNYJg[!R*Q[Mm@:,V*>J
%VYNNcMnaC#g<'Ie"HCY_5?T#0pXl*7GR-e::J(<p^1G?5?g$J`>m+Vl*;:.1i;J:tY`sO;)DlKaB[<OJc44]nf3L\/`K3IS.Ch/q
%/+Dg\;qrcb60(rQ%[6K%1s@D6;\A2m?_FuU1e'a*bbeTY#+4pe!A[25UaDKe`@"]lbY-p!41Z6nf,4[uRPA`r5YJlO>sq?;><OEW
%P'o^f<_?t'@CPVK6o1"'PQOp;TY(tTh_sMgis/e(Bd(&EUid;?G@VZgqJram;8S`4+RVn4/*bYr9d,6+(n3=7S>DPmaHD>0^;iZR
%J'":A?Z/"FMN_<khOES=c=EJF;s`<1!*`.GXHkPIS4\9#hH'!V%(2=1df^Wo@Pu36dAaABdu3:-IEurh[>!fWBSe)X4R[8JScPQ9
%e$/.4dO/p#/jV9\IG75PJ_RJ`n\:XIhuB!.Z2r5coj2Z1s%/9BoG)XWdpLl0/>XAG+E+-Y1L_Bc[El-2O\Tn%^p>.oJ^oXDAAeNR
%^a[H"*Tut@+9[EFft)6n#;b]1o_B28%KT+dQd:R.'Z=p?PVfAOJ2:<iC3T2B:[qk;;`%##p*Wm&Rg#:0$fuO>-^tSHe%EjEk)rq/
%=SBXmro(Z`/4IfIo^,\D)J%ttH=[=+Y3]o'VV\bh<_&Z]pB9DmoQR;)W*1ile#kLA\-j(h0<0Y_kVu"=+f9JRmQ1;4D^dgOeWolE
%Q'rejZbU&gE7p&\2KfeAb6C@#kq!s'M:9IE#*Ssn'hcsN=#sn7i%H=+H(;SX,A![Vm<E#f(#,n;,?,-[ZNA:r@eib0O-:K;M:ei'
%b?;VMgXb#a-(mEa;0GD6Z-s^.CMtVT.a/JUB'iW)/PQT)TQ_oK;*K'>rHB&NXLgcKQG!?aEL4;i7Lb.^<&+=R\H`a:m24Z-pD?)k
%EX,r?^"d<jM.UE4<U^Ce+o9]YI7"'`gC85"1_R7q`*Ji2Da>;\DY#SdEQDb[];u6lP%9MVDfd-ls.a8>$(>RI&"*5r5&?T'4RiII
%'$BMj?l=SO+OXtT^8so93KCDZphZ5Tj;j>^XQp&0B]G.[jD,6V"fMbm0P1@#Z2Y86G8[`BE&)`rJo`'22!7B4_!?E/cNM$u_(M%u
%+3m!]iQq21@Zb9B-tL#!ron;/&7F:[(S!$&NIb&OM)W1G50:s%C*]DfN=cb>6T9,`C@`pU:Yr^LL?f3TeF0kF9@%Di5n3"9GTG+V
%WL.Hk'8pehFEdiG,\o6MSc<k`hGJ;3:=5=tmZh;91I3SV]V@=+Qlp*WiG,Q[W4m%=rA[[7Xa!3\f&%9P-h#qu(e7>0qGQ`7o(!O1
%cNQ(D_$RlikTSunOC"cUhV3+\Q08`bJWo2LVN]dCOiN$q*PBGroq$k'$lK<DOr37iRPMRsWhp0g#&e'9j]II@f(`]RU^m_/21+UN
%*=D:aQPGHTLKL3biK]tnZ\sQel+P\,H+p9MEFLUs?\MA7H@L9H#T[HFiaJXH93Fi-?;_8N#p\GDLLt_UpHWNgHE_Xk6n]BZPItGc
%DV[><B!-H0p_M7]n#E\N:e-Op4p;8-e0Q\%I]ib/1XF]G)"ANVC+:fBeODGC705WTeX\3k/SC^`3_a0`/l,'LF"GM8B$-cc_>^H>
%^cO#qZYSFo3e1m!Rq0XWph!HW@*B2OKhI8!0gB89REo!liQ%0eps"@fpcJWoI$Tb.PHmkr+%m6Yii(nCiIRcbnD=<=o.d44(lkC0
%%ePdPqT8F1A5Q5PdJ/8FpJVJo#6Y2meH#&_QBhh&K8mR/O3+!Q5]>d`10L-0]jjQUh3V!a!%MdbKm7B2F\:A<X]\Ed-?RQ#4EDNH
%Gn6k#6W8?hipQ"eUa3o`@b?WqXEM.ON9:AioLrTtg-BJc(WMY81kmCU]V//Ki1&NV)`mor2k</S]J/oC=Q[?WOsB/1I:WQ,h;sOC
%U#0c6*Z/n-KlJcEZ!.bmaJ15q>WC7\YWVe4Be1=!O,9u5i*Vfn>7atEEGea"-Q6lH<gLB@UEP*uP6.@p]n-&ci_uC*oE+"_"BQ.^
%)k$qnkW;b"''<\#Xrs#ed4ujZ!tEc36!Yri^q&4oN/JZ'-L@n].`$(sPJ<lP9[AY0V%iEpC=S2gm<3Il7M;fTYX/Y"3X(u7Y$YQK
%lqacOBYOlifLbb3[X<K/FCB\K_.Ql?2-1oZpR_'iEq*R76>&[>+bIS4"BSS)%kB=.R>c5?[`(O=r4>ATpJkBPG`<O\0G5lII6Wpc
%np:\Ncaq;6.G96,JnF`RfMQd6QdbY@:kb!C(U(R1d'ReREoJP]CU6k'4G,6n\h"E*D)GjA5$%D/ER]gEc$bb36Z^e=JEdXM>*6]Q
%i6A#6V(thaG^(*6D<YD9*ampJCkr-FDmqP=*X-NA`nU@!B;fu$KC7]D$[,!5ceQr`5[N_OhC$_?MWBpi4%i.uReZ3:+4R6dBkr4T
%Vj:q66i9;^q%_FM'R24n18$C2S+W%2M(#2'+mG$f_+SiCYD$s=G]-T7)P"d@.kt]WLVJtJ*`o/`mh=(^)'K=GHe&[qTFSU,XnX/Q
%.Km!Jj;-e>E*a1t$WNcok$fmc2MdC.af<O<r^n/"LrtO7#b(hOqH@Kid+csCj";1;2M#@$/!_i,ZOP?t:L6ID7?ZbL3u>&f?^-2?
%C$FiAHo2K!DR'U,JXjFU,6BIa0(ETr]piDf>P'mJBs[qqZ,68Z:/rYR/VqG-Za-m1Qu9A4Rq,tW<F>/`^-#$(Y9K(p/%.-haNoMT
%N1$.Z*$+8^nu\`2rCB,cJJBXa7g1t6kcJ@<k:inC'\H6$YrHdA=3M*/j\g9cV#K3iNq9C<UrdIFZ(o8e^Dsn_1AOV<=X$o?_E[W.
%EH&I?=Y*AX`C<Gak>`!T[fk^Vqpn::Sf4LHTE?RUbmAWJP$7N5>@.dBVf<E,,N(ti?KBUX6VVeKhm+u?GZ7NmYXQM-S><n2ZB-a_
%M1AJ-<c0KBD?j_#g4O*b30Q#T76&bZ@TLEjn_^6>JLH*(l(+a=<ip#k<=B7W?.bIeXNpMeBCK9^2A%k<Foi1?8i<g@9H=qgeN9E1
%ZUA9V<_*n\EFHc7O[6fmc:OgP(V&dI[$jFr$(%#m)?[?F?b5QG_)c/*=ie93q6A)[njUOIaQQC2K'`Js>=r#^<XN$9C^LQuf_?$6
%'O%7_b.F!RX/em5[9se+F047jlb4!r\!"Fi_i"gmO3GFY38JS')`8#*Z`us<dXf0@@c@6VU@^Y2+nA[9D62fE4?FbQ:!o'.@kX<$
%VM&7mrurgh]*:tuEr@_E3af`<HJYW:rIe9`_2Xf0W=CtKoH/Z0@?U9+7uuN1IP6Dhct`$eir5BsJ)2R(``WQg.Y1),kWAL+Racog
%b*^B<]H^59!8TR<V@$Wcm55*J5_S_a=>+C<'_KH[C$Ufm8E-Me&Tn&4mTe7jkcO35ZL'ZE,NA0BQL=M!*(P00-]!h^P7S)pUOR.&
%[Z+1m"HN-hpIMo[J([S'q'@aq1lkYQ@=U<4.>57p2j5IMeO&8hS(><I/NHZ^P^1I"X(I7NB>P86OA$&uS3&I0?UDkTQ`F.-U^I^M
%-".4CQkBrRW!(+^LlcX+a8R'5Z:!#PU-G[T"'ZcT#h`fP4T-*hpXD5Y=H0qh,I8uQi&Dl/f)%7%F(%H_i1Jg#YS2A(CYgs2>M(#c
%]+>[2[Y_)Ek;5uj"W%>FHG5ZXFtAIPr1J!k2RZPRiM)f6fku:@#fEpS,FuOmIAV[u2@aSQ/)9[>JmZN@WH(C#7:n!.NoRD9m"kS0
%f::(joL'"d`Ft2uNdusjDSU`p.&tB8+W=jK2bAOOCqqtJ]+X=1h]fs(b)cLLc>b,1NV%b=BT/.8IO<P,KtP<s=/;do_/Pe$/QI4X
%)?fHo=bq5&66e=jKUe%KEZLHKQ,mp0;JpCXX21]7E]lqF-b,]pSse+PBbL3taJo[ofc<q4^=dgVK*Zs/FSm,b3^0(J0KXg9#-Q'l
%[gMp??("jMn%>EWdEKbH^)l,n5$qG-Pn7BeGq8!WQH2/mB"%HE_p6UUno<7Ga\OjTa_N%fK7GnZ8J^59eW>>!;+[Dm)JD5OYLFA<
%6PHr*dBD8Fr=npTI[;L,^8VQ_\V&g[Q&j=!\M6`WO3(p.`inA&8N,8^ok!!H[9ra'E64ELYg0nUV6\OGkuG<olVl/rlr8cZ]1NsG
%5)7G_^WiaM5@e%tF!ab"V7QDnPT&1,EW#B%@UOahrOfI)4re)_N)>sVs)5X9Tc&Z1C5=L8=\ZO)&HMl!ZRR9kS14On"Qi_:O$R/B
%@;VP/^l]u[XJ4r0bYg<qog?N]7>92pYJu=-"LWYa7Ff(I]tikXBWO$)A[F7&*r:p:oCM'TIbT<PqK.YO.J`lh'iMY)m4=9I1"ZRG
%^jjVXVl3<cUs24K^?bqrPElj>j@!",2J)5D<BaF*VI:1nd43'HDt[V$^0"+g=A'6'%G4[d_sJlRCXaF,#pN!]TGi-(RI-Un#,pp:
%Cm=te1@s\1A?MEj.PaV#RjL@[F\h85=Bp><eLRFf$h-7n'4*FP7U-HA&P)):Dm1$p7Ga8[7oMMB2Bc*M&*-&WhBtP<.%jPeNm66=
%bHHU-'Zo9h/qR03A*Q$T)OE6J(B#S$;KMb,AKDRZ>m*HI^S;Q97bl;S@j[_)NKoF17'"WVGFRkZ>KEfsD&)+^E\?k\91@!2[[&9F
%Pf_me..QZ+RN_(s\Q(G7?4>I`cA6]+%Zp.gNn_*mp28_aj\G67Z:SBGaL9-^EbfS9#:h#5QMak4\FVEl7AHXds81QN^?L=R8%1qY
%HM3W6s.AT2&G8&.V.[)7DM1=0s#hHE$5Qt+'dfT!j.3-2cQlkk.bJNO<Be7Op(TcgeDKg&77+:f5\cZd@&2VRJ"d]sD]1n+RIbLZ
%>T(*96i)2en??Tn>e(HE(/"$jRqP&;:Zb>(D,+u8O@MbSe(-[FCtXlO1QuFXRi*r,@74)Yq)0Ehh\O?+KQTWqlKX?-T<tZk:2&r!
%5ViHab)uRkgDe:pGK;*:0Js3ghH(g<os&s`Um`J\E"f\Fk#P2k3_DMq--fXpGK9c<_6ckV)H`4AR4R#La>B&jjXEj<[(?1S'h'jL
%-&#,aGU]-`aG)CAN2fUY=[oFLYfQ-;p0:lP=a13*Tj"H>e$O3g!h_re1S^;SjB(TuYg-RRV0.!J,1h6l;)0jX3&VRA<@+'Dii']@
%6NqtEj(Q-5jaK4oLu(igL*X2h/2=RQj"!UK.CI;WdslWWAu*:$8lnkR\>?Z3CUVH-X-OJ>qh&J=h2'RFVaALtFL05l^.=C4q[(J)
%h(6lf3eO@!RKRk-RRWIDB<Y/dFo8lHN=r2;s(QQhGkg&3'>k#6lr&AEf57E_Zk>0>U)*+PZC@3?bg^Mso:\-2VBm@'D[BtM&?Eju
%NZ>@k<(_D"UXReLE5`2naVm2@e#&CbNGcR6$c,aYY=?,[&g]_&NSWL'0`WJ$m<;fV+n!J$B]^1_b20.F1hE;;T);X>X%T@DPBY%k
%TjP3EE1@(8NPp0pChXb!Mpa%N-AM]FBk\qsEe8]e7)'g<A<)#>6K%&F%n>iP=bh"^cBDlsA;(-#,cR.5&]UJ=7pe\)N62jaDYgH3
%R`6.Br)+C5E$0u_AHn5eY'$[7a3@i<n.i`>!u93rkt:jXl1OiE1C3.+39YAi-N2l7m",>ZXEqX=LO*ctnpL^<kh^kR\X7>TY\"VT
%Z`Eq@j:frr;?(9!<AGR.I>`d%^01%6l$#c4Ma9_;hWf5b-c!@L8l*VB$G+l;YB!ln:8Nq9<C\f"1L^aE&^gaZ_+R9q<%.G$hF\96
%CJ<p#Q,K)4E@)eaj=l=[^H7"%C3`m;RsZU!3j+o1`a2P-=r)%tRNtLWkG&_VnWWBtL2>d7li?F[%=\G,<R7,M"4)sp2/NGl00mm!
%$Va!$N07!cL1/g_HkuK1TfWQOj<;L62<lkhq"cuuRtGS@Um)@4ACQ02mi3e,gt8j9T^NNOql<[@oEg<4d,0YVAnslYGP0/lHR8<\
%G%"ch9J.+H\!iD9Y`(+N+hK2rY]KXVpjOuBKm`RZk_#T_@HUXM%NW+Fo9d7q^?[\<ONC'a,E9Q^@3)+?)?2^]@4Z@i<a"IU>(aT=
%!`UVq("%4PIF\M^_`kP_jAYLH:NU2"9_El&KJq5jB)8"@!+\fDa@Ja1pf_%a8%N[H>7[=ZPZYL8Qn;VmiqU-IW74$';#r78b>pbF
%T$Sl_-,>kIGs8!:-(IE&E.fb`fLu.iZP\iXGcS^CK\B(mP?1fD+t_g@ZE&"Llf[KRYIZCc#as<kKFVj"e.Km'/rHT@(lE+73Yt0J
%0sJ;H&lB8OA+Oo8DdeHI*(t8&p@,k!I:;e<"TNn/_YR7]L_oh3csSQGDLtE0-=WW;@)4a2]'u*@aEfaf`\_N*0\;bo=Df/brjuN+
%NNM73,_-OV]\gWF@DIXO$(C#5/t_Lf0F$UqYUNbZ@3h?.9J"JBYn[.b?[i0X(:2OJ1_@!!p(C*FOpaq9d'gEL.M$o)ng,tDj:`fo
%I"Q)!Cot!Ihs&$RBuf=?e);A%N,;EckllN$Q4sHt<d9R1V+1#8a[O*!U[UUSDm<$bh(G<s_PdM<a:s5tXOhha/s+>6s!^a7?:J7k
%K)N0N][IYI$.>>oWi*Mk4l6=c:Zlkb%:Q@^8VY>tH0`,b,gUS.lWp'HgT`2oVFr"?f86gc%VVqV%;.!Ao-%=K3E>r[H.8E/G-/0T
%8'I5#jY7!KcQYAad:q8WR[$I$.<j_eGVPP#Q#EF_Vk3am3t)d'qcp]*T2jY!g0A\ubc)sZ%/raCV2IJl=J+!?h:<HWDTR6RCDUc&
%iD8ltecWueOU.>d5WRlt\&pNp8uirl$5E@bX?_-GQBRT<J3:osjJmMth:nj&c[>cu&j=^,DoG`5d2ug_OG2s0/9=ObbBOmj*)dQd
%.<+s7Efnh`@Nd>6!fUYOqsdI<mH_43G"2lhKJ9H?GB,sjmo7mVE>@R?BBd_M!=7_[WqkEeCI*m$[$=m+]AU7D=SQ1`B?c30(2/K=
%9FPYjP>:6gg@=qbA0YPTMhVc,3HrtsI46I9C;RQ3Ua^+Q>1">376&Z-_`&pBQTHo&YJMb*":t,oJGA:4$+QqcnohP,Xh/DJ/H1D7
%$>.sN@hcs(dZ\gCfL#FYJ.!qM!*l'mOLJ<XqRC?@EKk@^E-l5KiL7pPFdrrjX?M.`klXEKJ9=:dU,NLqJ7!iRf$:D9Khg'(+63\Z
%iL%GV^m$#LUoN7RWa445ZX/,]q2Is^o`H<+-pkiJVR_D9\/k77BV:T&qMb3T,M[</]%!gjQjC1/m&N[tZ])EI#pN6nK.+TbI)N&c
%8ImXAH0If%Q+Fbr[ltA8]T&nSl=GI1-rO<qTDleK."Oe^k=4DflH$:?EKQ^ASHH6k]eD-).kj7[VQo*VZ#UTDo+nP"A9[51l+q]g
%bMM,$L;94c.MTtFdIrfY9_AZjA)kZ,#'TAiXBk9AM7oXS@T^lpMDl]b\RMM*j*s^E_a[BS)Xo4:T7+g+NE/nLak6bg3g8^]G]PcX
%80^Zu@uG6dZC2u>oFi-dUsZrcg2EcWSeg5ck:c!7+1>o4lb0EL9PMbfm./t=d:fCl&$9pVNl</<qG]VXDNER<8QtM[&=:W]/\\R\
%Q(b<k-`G#NR)DNp;2@2tH>9Z6Fs,eYg`pO3>:l@^jM9t,NKoEU/?.K_-P`5n\dHsq9L6].hC+m!W2-I#6H92^eLVT'cYlNm0>*)t
%3=.>$0&5G;,44/3q3&>Qc;?a?'@q;W$A]GQ&of->3T$AGl+4X@^(WEOB.NcoSSmH1WFS)PJTC+F#8i1Z4L.7Z=5aUf)H'6p"c?h\
%BOi!"YH)cS!DgEkXAJ<7:8s"eC?<WqXrCRThk]HFY=^YA+bdpi]1:uo>-7cml7UX<+difgd]uib:9+Cn_g(3Kj*%LSHtfJ9VSi=D
%l]g;lU(\eF8C@JX#uMrkL>KeI@%.?APbjIO.FQ@l9htbi[3I2l\bA_4WYJ.B8<"=c<L6:lA<ut=*OAN)DM$tRkVga!5D"u4rr,jt
%pLnhV`@B7e_E:K%/H<#/;LbR"B)S,Ad$r/hKiUL\]S;Y=.*'=UHY1jUKs9dJ.i7@sE%T!02g:Nlffg&K$hV5_lp^_QnCh(\?4PHl
%(E[I)]d!9LZ>7q^"J%[]iNk4qG<sMO9bTQZ7_MEU=AG'i_RoHSdXM<hZi]@>O71#7NKSm6E]1a*FBR)>_DBP6^[muZ:/4P5<fK_o
%prNY@P#Pe`=-=K66=D<f[m5D!](:Q'W[3H,f3sn20*PUKTQMB8AeY!H9TUicgX-!4U3WH.U7O9EV-E.0q*FWL<5[R!L;1Z8)b9&"
%Pr#5o9V5E;V2kg*GQnk;I%VU1_@+%T]K<>+6!]q6]P=!9H+j3QJim/i70F,6S)7PTT(dfO^V+^kGk_Ues/(2jP)fKI9%c:!)#pIh
%:$kSCLR,s0g@&LOYe,GC\9CBuYLM0dQpZZ_bR<1kKJ+]+OS<,pR^gMD?^Xm3Pr@P!d51dtdu9Vs%4R=?"0^7)U/IeqngGn&qllKF
%#coP6/P6;t,e2ljZ];(DTJ`'TW3!WeoXBfXh[8:Sf&@$77HO)FJ-md&hZa"FIT24YQ*n3u`\'LRmJuj=mQ<g#<gV>NW:CC?T]\=d
%XlMg,c#D"t6ljFG,BIgj5GG%<TslXd#oYUqB&mV6\;?b_#Qm!<W"<%lcYjHpY]IY(SG2_EOVUjm?pIhOM",CA$rQK+-A_gS;;tkb
%P-9)nV3mpBcdJ7.ZGqg)7/^AQG9q6/%1XTjWJ4DZqMgB&>p5nt*(>dWpN/MD`D.kR.cE+Tpl/\-Mke0<B.H^<.$oqa&W(tp@iuo!
%od;MM_O>,6L@.OZ.#Vr`JAq.XJj;O,S8F[FAfGe,Q[^A<Oo,-m1\]L(D2?L`kC"I&qbP3SW+K^4dn6?;7\1M!.HALP;eN<B^&"o7
%f39J'`=9:k#>Sgg)"Z.k;B>C)rRZ&hFe3k-($AJ-T<t*ti'4'YC(LFd2dT31683r3$s=>)@"'nP(o>BB&?FXnC!Z@hOj\U**.%$t
%Z\TO0<DG/,Y?f.5VDjeM<2]!(]Z<$2A!H'Vpj>e1<ONLK,AD,;e^2!o<)$'$4F=@fhOR\f8Qlq938Cq$3gZ^&W;Mu>9k=6%'9J"4
%&)NRt<Z%Lp-tmeQmjiRE.TM[YH`nuu%(DE;16HMM$#Bimkr]5IF<A)@5OBGk99a!EVl(?[/=h0:Yua14N3"M+0US/9T.0c<Vn`[-
%;K$Crf%`XnrVlBdFn"P9.Gj:-Wq&4FgnG1-(o>Ig&3/c%iigkJ%#!=/lq^QI:#L9J;q;N1E[UgS'%(<^',Q';4[Q1EA?#,1Y+l!r
%?Sh?K$WGIpMFT7!rY:tLQ^g)^;B"<oB\5G$Ah;(%Jb6eG\YEL#3K`&m+hP9g;G&(X9Eo!2<F[R6m'oplqX_j,>&0j_I[@'d73o;]
%"?o@n)<d@M6.^!3X/nf?>Kh"_5pCY@$?'#5k0R"+N3PXVZBXi9mWNEYmc;T=lWhD%qAe%g1]j,9pKK1o^n!mL^,PWo($;Ws)q1,-
%9$oUuA2<Q+ihn@.lIsLhYoWX#MRhMcPli26&6h"P0!gq&b6Q>um':WX)nC-L4-kNH\6*[2GrH;1Tnmh<WlV$_;;tF?J.g?a\C4U%
%A<nc>!\uMb"5,"[ZXaLfThDOX=7$UjB5O&kK96SuOqFfd!87_A&FeDX"[IVC/^_gCTQCps$%Up-"@1mN]rJUgo.>eKKeK4Y[F.5=
%ErbdO,m*NNldTp/8t8/?4:80G85&*V^Nu<TciYo1,NE'UP#g2Rgm&7*+#o8LpPE.&HV-e_2SJIXY;O9gAg#WP2\naH2pqd``tSuC
%G;6U^?u%$<KTe;h`^4l\"R;*<Qfm=-U"'/79$DkD.UUl9K9AR8g"J"L@6u=Q[%YNUr:ZpX;%F$.<^J1M&JWjIFlX^YQ/belg#OcO
%\>g'Vd1&W8"[0dIqfG5^]TDE$:Hhpa.l.g-\#n"]CU?Lgm4Bm6;[/G5X`snrl7O>;!,XgSeA(=IB!d+3Yltq[&EM^IRC-EXhA*aF
%Eeu4(d+L.I%]ggM%V\i/;MgBI&R"*<gaA;"#@.F+$RKWoNg\n$X(nR+\DcfN/XjK?^`a%s#CC&@(ckOI^8l$<1e^Wa7W^L``F.O_
%8mZOu$FFN>Q5n^h[Sa]Oj)c04bI5S-pF#EcV=e+X8d]((Bl)r$6kmj?>e`lEds<e!cR?/!]Bj_1mRMi8>`)7i<d,RA(6AS8RMJ5q
%;)&X>^(kV"T=B5*5H%L4a/"MhPp9D>U\LkXS(NJs.0I+-2$[hjRY!3G1[/UC<1a&<qLR\+lr9BeEL$i=nip<QOV#+Q0VEdL^9.Co
%cVe=00VImWb,iRqD4Zu2(tb`(8%J.]s#*'uaVYoB0fH3)r-<gtI.+e\@g^3q$Q9r$H3\JQEbZHd^*'%uC5,I,>6W6_kAPQAkj\RJ
%MbleW5QWBh>X#O[g)a]\#B+Y23B>%0U#8EkM6XRE?%7;oQlYkbI-p^[X*;*2JLQGL>sG5k3jmnW3b]EH&LTni&jQO]aL5qp#u;%$
%1M@#;.oAW^9nOO>"DMsenQW4=Ik`nbUZrb4mb:Y8[9)LJm0C^mca.@I=./!D2KQurY+bot(]B29h-?stESGb77%J94Aj^bb/5CEA
%PtIf/q0k_1oJ"7(ma>)+^b3T[Ku;IaB.sS&04bG>XnQLs,:mA\+NSPp\U*#)2L(lVO?hp0W:lh%:2iWSq[hsOX1c?h)6;X?VVHJ5
%A_V15$;pMgG8^l2\E!TWDqgET/0<?O5k,/hL9MnUYoRro/eKjnF?LNaFt':`%,",c]]E,I'lrurc6ZZ@@JbINg>\]QG5U<TbtIJj
%mq;FOX7#4dJ3Haso!hnJG;gNW[K6djMQeb+1lm]o1!ENd$1fK#ZUCRinH2jMB(DE,s04MoHPqk5rAL9.coTo[,-ss7hB`8c9'1"W
%0R&'BEf225XFqmOgDThb,:o@ndV3.ZZg\2h0%62+QT?6?T43Xir^nSgdbt&JH($>n-0DV]HbjU*8dCcJ9)i-I?BgCdi>_u`9HU9N
%gkX3V*.Y9=I^b%'-`CfpC`GtO45Z^SSb/#nA:s]9JEZI!#3lJO[+0Lth9_Z)3m=ma?Qq,>:H='!<If-OKa)G5BC7u"93&(_B!(u*
%oQ^tb`+J9+5\T^L4fP$1%VC<+<'_N_^H]4_GCn@nSLNSCOFU=:%<qH.TX6ED.04ML3]*b(Rp$LWCA!,P=BO'6(6X0,2p4,*0Pc_;
%Y<S4?m7Bhp=]iUH[tNV&L7C*Fd//^7=A9\;m)Z@&$-GfRdo_BbO9852hbXir`:iZ,_b93J-1S>.-N)J8OB[q8KZp:b+7>oo/?Nc8
%?nGdRoEmd[?^W(Vl6)WHm@1#];5TAT=o+&+Yp$2O13+gHS"k5dWo>fDZ*tLSKR?/37/NuUAUHI[7pWOjTYSHR>daV'9f<kllU$Zk
%'^c)tpGrh7PdS^eUk(sT<,VtAUUlMF\;bdlL`?i$DpECP7WY]?)G&>F::_$%:`ClOT'B"R'"Nd`O'PY;m\o4AOYtT+&1Z]N4u%e3
%IbXjR+bWo801LblKH:^')7dNVk&`Ku,iuRnX.NE7UU,6(:hk9rmQqlLa?^FFMZR?`?ppkYZP'j9bg$%L_>ChaeUc/-S&K6AZf*+M
%3Ll7['k%cZb#?H$SEfpZ$6Ab,i.53-L<kn<4I>YsWB&\nrZXKR3c8neh&T%,SuhH_`ZjZoP@V+biF1*tcYAncN'n(o:mOA/G^O_.
%,PhNJCW(erU0SG3%,D8sbK/u%WUH`Ie_J&cXo!!__[EP<7^(n6.>'=rYSNUtiq36$/R:"":B661KS6c`EP3Z6mdRKq@1=f2F%)De
%*^IX)h^qiX#70Gi,"r,gEh7(@0O9:`n3gCnffq6d4\Tod)Xu;G9o(K$i=LV3Zp`u];R!J%Mt?oeB>Z6qi&ri_:dbFmbD\AM@jKDM
%H=&1oU-:<kDUDpHO*p;X&N*)&F;Ze^a]8t3+:iW=Wk`@$c7$#YPD@irB(FNHJZX[/j#s_cjIu25.hfjWL-[A8,3KegZJ`-(FoLMg
%nHdN]WMa/h_j2Lf52Uq5bK7h]&^meJ"k-VPkW<^!3)%$(ht$?]3U*LMHQ^M=Q(ZQ,]>+/f0;j.d"BN#M>\Cq4&E/Y3p%0\d&Gq?H
%"W!nZ(]7!0bYK"DCh/c17FY0+?r^/;g@sjS[5X?u7f=>"-r(fil><#>`!V$XRPo(8np??9.+GWTiD=3d]MZ&Ic/`#U>*Tj_;g!nq
%3Z\=>>7)\Jq(=Zr^?Q"DHq-_^^#3u"/Odt4f@_oGn,Qb8QHk:c2@AeC"hV<"e_;esE-&YO<obo3c<s]n1WV[?>jQWL'\^ass!O:F
%?"/(T1%Lb&l!ObZ_`-72q>],oF(J"-AD)uu#l^MhJ8#<3,FhN;=\NqCYK1oVnFtRNWPq&([m3q6b8le%LV""1W`\]P]+'g"e3?@n
%:"5`Ah-MrEG#b</hI!C",9aaDJ;1G_i@_3YjE^hG)>(:<Y'4ll6#.g"c>CuQ2KsmXmbf1:L":uBIXGS]1i4&Q^LjKF!hUhd5V1k7
%JHod5#GG"j>'g?5i8&uhV;I/_'YrX2NUf9:Wf19'?&dr81UWWe\T@(9<h"IJiE=*4UO7Cq=+p$eTk;\Y!*$9sEFf/!?<1o)T+KtP
%5m-dtn@e8N6l*"\Z1H0:kci:HF)YCF3lU&WY=K&q0rj9+fDfl0H!KMfpp1aA!*H2u/>Yt0.4dU2;6O+-(.^N\!k1PB)(i;j>q:GB
%qlrE)^6@4C^5N+_b.G7.-m1FeU--oIp=S(->,5K;op&"c!C)e&R7@;G'`_?&mM1V=<A8bEF'Z,QRb!k4^>>&k,3Q@-(Jh8jIL]H+
%5\/]B*nI16?6GfZ"i,b!'Uo*+E(g2:]f_UY4F`-OL;m/b*j5J6(u?*a0_CLA+sQK1Kp6L@ZcM#KH?q5^\>QXNMj$MkV\5cYXI4&f
%&:>H`hh]A\R#"O`0trR@[eJr[6q5!ahuNGcdNEcAZc:OF!XbSiCZPE%IJLbPK)gB&<+rQE0b(>XD1olq*OD$X$`=U<gAm(l,fCm;
%^X6.\NGofpZfHT=mkAH$pEEkL.u)q'j52BVGE5Z/pMi_4meRlK_G>,2qcYtPR7,"[.-_)("`lp3E_]0cMQ3^6<bSYQUAC%f@W_IN
%+Bob&:!a:RZGZ3.1m"<#n+.5chW`:^BXGT:ggiIZnhUAq+IHo\jYu9t>(q#D^M<p>Vh/nkUD?X_]S&Vq^fT#%J>\7j-HSuqi6P:X
%.RCoZi%*ahnh28L5a%%)\DK?d@6Y`>=a[ie09d58mq%dX0_O\C4'Ui5^CmHO??F4C9/&GSTi3J0.&[Z\1M[Jf>TX%[#goMJW\_Z_
%Pn>>$kZgrI*QB,bO!fRQ_A76<]8&0.bCi<Jf%oqKe%^6"7..C9'4=[a?pDS7\-r67/^c-JjS]33YFWFZIXq?1W@k)lFYC.tUYWD;
%HCVX4P!2rlp?lBa,(k:IXCARBprO1p2n;KH/k[OQp46/U]7cVU@R)&85R>Jg\$_Fcn:PW[e=^@E3$:Wk9[7K:;1T+TO\OAcJKCds
%0EC"Vi%9T1(J\AT(T.c1<Oi;Q^V32e[,@5n]5=YO,9Uq[h9:.fbYeutKDD`=OqY(=5F<1LYmd0!PC@T)2\Sp47[fI#@#@YUG<Wlq
%r_[_\n_)K[X]>e:;gAG[Q^+Z3_lXEM:g!;aR;5T`lcg$O(m-u"e\njo^YhjT@<S==r:#3XP2eKa3@)9S(8P61*)HFd^X4]5@4"'N
%n@lj^YMm`j*%smdcHO=m/mW7Ca#`KKJ5H+)W?2`'843p<S4n'(JZ\G3Peff%[0"7`6@BXTU*L*u5rOgVIM\,kb9r:/5%?ZOKGa?s
%X.M>Z7uO6UIT,1;Ha#Vu?k'Sk.rYKB-U*QYqY4'=,)/9BpslE6*+DniIj1?$o]R<*S>Vl@U)^Tm!$A$mP-P)X9E\%4Uol+pbK[h1
%P^%n80LWTt+O=;?d;4=d&8K<%^)P)*7rM24Qcpg]J("qr^-2$sdRNjqX*ef(!XH;h5SXm$_EuQ=ZEKhd0+-X\;5FsL%Y<k:!mJU>
%%'gPbhtuk*i*R0Qln8IfG>^@S4qsE("XQ7edVu8:)Z(hc;#:7rl^S8+H;[8L@3dMU<>qJb*@fmhgp*OL3Jq@PZr,<ZVnMpA,q(Y_
%:pMT@LDdMBjFA=mXfG@"N!>p!.CBh`]-T#jp1*9Y*]T*<WnZ)Ni(Db1j<d>1<C#0K@_Veh>B%LFPHT!Nm+!o@><GtX!!h-`':='Y
%Qa*i]lB@hL)\)S.lQ**8/U@;l+K,[:M//5Rn#_oTJ&$8WMsQ!IrA3bA#FNN?R(B7*r+?ICnp>ju$uGCH74^Co5`h?D6AB&?4]5>m
%R=BDZ*;K=4[LD,P="S\R='21s5@6=HeH@"B+_r=X+42BZYLhr,4r,8/X\5%0`R6>+ro1GUo\>Vdl\(>rR>VT7AtRX@`r-4,4r1/9
%EEe0N4jU@'TPjie"]&71",M+2qN^p?r@R9(lAA_pBoJ\eT!C%uP;c[&'`8.=6;-?<@\&p$<>jpph4O/;.e$>oS5HZ9ZL>4%3W)V+
%=$>Rd(ql3n=qk.&5?f#2;Q7KrrC!#c>I-lt^4Ze_&OmmEP_f.6qhSRP\RJa>?-4D>'074=Z;9@4$LsDsi#0oIej11ZF\X*YGI=8E
%AmL9@Y%kq[4M,F+'8h4FI,]^>k.2QeK^9<Y0iGrR`h%L]9$%-4:MR_l7U[oi2jnVjq1u-ug;C3Oe5,?2C2\Wr12*`0.)fas?Ffs6
%JIQpbs2jYXG4),&?.BNQPMGM8Ol1iB26j6R;Eng;YVQ&6E!!Hcb&Zbfk;L*mJ_4)Q;.Z9TLU=c%c%]%YImk.c2/*&I/>t\XWt\:W
%q>D]P"r5&bSTr'FUuggHWnm6WIC=sq6&d8eLLI4cT]!AT#l1+JIcP^`++*ue*(F<f_O00-ogM).nEWjef<PC7V]Cmu1M;NMX\LpU
%I&;K2Kcf!`7fmjm9jq+r%i/+%J?r+3DK`@!+AW$TfuUOE/bt.Oe_S_VB_GDf_X\!>LIH?:(95^N)L6;9:%`UB"^l22T+AJU^W/(W
%5s?#'P;>A#Y979S;%V=JiiM-((]?u.IC<4!NJgns;qa<E/6QBC89oZ4Q3[r;8i>`+cc9Q@<2Ub+l`&470OC08>p&^F3\8+t,j3O`
%3j*HYV+M87d/mNs87^NjLhq<O:ZSL/:pI*c>i16=Ph$fR!t:M]=X5h,KWrOQ-Tq$kr8\4M:7Cmr>u=ID6E@@Dg=GcOSOB<\m.Hu-
%d=IOTcYV9a#he[C6d#)lbXC":20,LsZTY7FE_T9X-q5^gD7uol(6$R=gfc7Q]<3tG]X`+@kd]KAOgf1:0^+gJYjg\kN$*Hu6nd,n
%-Tq;c?I^7+8eY@JNVRte90q>&Y+'kl9@6W;/43b2mcD`V0*2ZPm10I"*q`[a,fQs'ljNVWB0jJa_/j%)!F8=f-G'c<_uVs-+>]5+
%;&(99n>Mb+)&upec0%#:rp?\MH:9N.XXfMRVfFncXZe?cT-L4_Y:ICjDW8"hj@>h:0M2SEe/!`IU_j[YbGf(C]5&o@YJsL:SJ^E@
%/C\SKlqLaki^Rj6QWJ^1"9=*D)e!Xs6(+@IeH],B*2Tf0TWfhoT&:t.oX_i[@5PV7Ft2"f9R\+1iei@Wa[6U*fts<W?.kX;VtbZ1
%HscpMVoSE[SeUZA1>%IWOC?(kH4i.4Zqq1WV[u)Q%@nj9Xo1/*kCKO+\>d7in8s8=YUHu5I#e&!pd[T#jpPbl3!T&KSMZO@Rs5XS
%ogD'&Ip0h532p_dN:^AoVD5%tZKf_<.;dAp<]4SJ+)krg$UTA('>mOe*&g)$V)]mnL\;JB"Q1LeWXC.T,d1rf!K7Ggm@6V^4,M2W
%f!o?c,`M,3Vn6ZgMYe_M"UIV.8Z->(Qd]0`1Qin2J-JKlr)8-rHuc9`2\rd%QZ?4lll1k"if#q&'!=l8)hUB+gQDA$lZ8(?4"df8
%'iM<uiuo?_Kt;>W25B<p%gSX\K!/<$,$=>J&R;nnA^ZRG>3a1ep^l^Dji,:U/-%HlF%C/iLV!>QU+UY.UVUS1>lqGH>C%6"(Nk8b
%Plt%6C0:ZJ>6)QP\q4j+s)u[8SW$4!5:!hU#6:l27`>\WS6%N$`uu:eX1B*dam[8PEWo;#?5T]s\V&2):"V=MP,2X_,iFA1s(b_D
%cZ)k<mF;uba>u)upfre\Qic?O,X3G^?'C>h3g$8r(GG4oNWh$sSakK2fI@.JBD)LfdLkI:lci5#rTE^&>R#gTSTk7>\%csR>ppV*
%cGDi&WaS.ucFQcJ;9MZ4Gf#_l)1k[:UoS;8NJi-[L&s<m*mF0QS?;(^BXt/7.IgB\@QUcD6;"A/GKo_\17,rp:Mofgqdo_3r-C[@
%6#VIXoWFV!edIk3RIY>lB@]V21[I,74XIH?3W(G9=pB]+s5pLg().NCr1F3V\C$h;jp[HU_I6lm-ru]1gZQk%-F02i85cLm#YZ4r
%khS9r\k\2#0&1]^'KQ3/SNPk8>njP=<`Ob/5t61J]YO8+5[-$'YQ.0>)O@=aO)21bmB_'7<<8fY8ms1#qRK<(>ZK=c;d/9%Iaue"
%MATOJ2G9^kp3_<98t:l5/ruh?_Ro1M!hBF!>WC)1gnfZ15_q$r@>-p,GD]-Be](#`FPpM9#@60go0gF(.j0XZInf=WFII2qM*kkb
%K<KUK+eq,L[Md2T7Juj#VVp-?cc9.+0^qL>iisee`/C;21!2#AZ(&9WR!@`R!!cbrV(\TbU1p;FOB*l3b"1YJZQk-+Cpf-:OK1Pf
%e4K"qQ&q#8<'$de_.1O<]sP$[4iV:hAiGLEkfn&B:H\N=`/VdEj+"9LI%2;tf9SM1BQqdE#FhRV-rju?\DFl1M>ApMj`*G.=tFP-
%p#6_?Qj-U_p@KPF]n<28h\EXN]Aspep`dNAbi_rkjfrjhmQ*:EfdeI/C$hAjoF2OefQ*Qe^)ZrY;lSK+oe,S7IFr/_pK^l.ScY;I
%kegP%R.lg0M&LCo:m8!J)O1Id.25I;8-HllI`u-0FuP_JHT6k$@a'r4:A2V#+'B#+$O(&adKjC"cJ>C1p0?X9OlX2Z3LHiqOI-L>
%r3=<rJAkQ"/A:oHS4Rn:i^i[E9(2j3R'5-g(70qnQ6L:@+]AGXQfW/V8B@\0=dcr?Aqg]tCFMI2Re49nAQNNQ3Z[C47FTZt-5JD1
%/7"R"l9K?a(r^i;M#cs9=\]@'E\)h?IcWiXRm1D4qG3&J\hTmip60!N6l2pbSs:HE=JNTYJhFkT0q2*iYF\9#HGt25`h)XThl.7>
%f4dj3j`6^;Tf;HTl)UHPj_)1]a6Isd&el\28+u:mg+hGsje"qS&sJ.JX+s_Q6]o*-ohX@:PE*hfji[EYJ>!_KH/(!MIA6e2C!$9)
%J)fNQp.NCt<cZaP?A`A.PElVtcCXrC8Grg0fhflu(9G_[9?BXpGjJepOYAKLB[B'$:>.mX6V:'3d^Qm!?)oBJR$KS9:d[L"eRhOp
%SI=C:eJ+Yo#:^^"iKWa[6@3n,l)!0!H4M7OYBYqFc1A#s&0<Sk^kke^'e1,nj"X!WU<YPHQSDhnM!sluDMtT8]8GocKun^G<AU,d
%8iMT3h-IOIV[+K%lIP`BXAMJb^`M+mT<V\-kPl25UQuX``0_"0Iml*8QMW6Uk:20<3%a*HBrs2q"flIPp@8mC<BQeIicLI9l6EE`
%-'CE)D/Hh9.*]E9F`6s)bQ0"e4IOZ^,SgQ;,#mb<%$(H67llO)SM6+up`PWlH,D_jA@8jd*(cW+3bp=[H6uhIXp;75l2!q<,\tXZ
%^H%HIrlkU>$OTci]2OfIEtKS[3<1D"LFEjX#O<7^'GL?(HIZP[P+CeRrZ`tdL%n&>!n^[R`J(%USWD;:2CVLdLiA*QDC[o)%d4S1
%m,!l`iAbXZQFW8;M\[)4*2bjgPP,;7-QE/EK=7M>Op)o*E2XSUcmh2An<(/T]46S-K:giA$d7*qr5Rut7c\32V^Ro>O3hn^Rl$Rd
%&8J]b_*JPPFN]FsUY1C@,o$%X;c7b.%4E0'X-=sLp:)oa&Li$FQOrd)R9[])Z8pBaDf-(X';207cd<_)!qQHg>CV]7f.6&E>_:AK
%"aWGeH(23@EOH!F[K<5CR*U:6fd+4ak:+skW/fHRNT5<4n;l\u)e-t2O)Z\e9>)Cm//5_ihqq0HJ`Et74pA,j<u$Ap]E#caaP+0k
%]/i)mV\FASO!s^(ZkRWc+E/?^lAA#K`c6%hcl,P30N=nqTKr82Oj0,O'aYK7N\Cro8gl?Si$)Eh*I@.Wm^=5l=:O%Q'G(J_F:4c:
%r9U\#,H(!(o&3ZW5[8XrS)'bKq+pfN5p\jZ^i..?146.4@%LB4/]=?Ra8fpe_aIY(BUD)n_HW[[E5$?2UBk<X"H/:+PD1S\VlY7I
%%:X._54j4g2(_N\\&]\@`]aAQ-gA]6,WJ[8_FA)`Lr394K_H*%_tEAU4d&dTE(2_hp0#DM'g[og)dikLnYIUZP^r+;M^,e^dd9.?
%ZsV?^q7L#)ZDQ(V`IUpih52W'K1@fchajNL?;f[m\83VS7201M(VD%WQT^0b%#VW!S]b@0$=<X:YEWY&/reWZ(Ac4B_'CGs\&e2'
%o^d::eb/b\co4-ETG!DUO'=hmJ5>`6+L/,4rjYDDF'D1o_HmG]]9*]l<ae4BY2Ju%KpggWbWouZ*me@b1_"(eO^3&?EE@$30./X$
%VmW8a>EW(Eno+b66cTb_-BIdI:IpoB;4>n,O<=N@PfTG0!SH!NB*Y-TNMgNX/VUCY9-p9";rQc@'a=C8!>I<fEb1*nQo:$qXQ7Bl
%#uWlio41-q?d#o-oRZg:MLN$.*<G9Zl*(]CMok/Zh,LUhOGJ&?F)ERlkjNKP.rThLf+PaQG5)(miY-dNoGo9Sql8qi([Pk5JhX&,
%8k.LAb7gdta8</tQnSK_AO$<Vj;#ZD//6MfR7CL)*b7<<=q4<(n&2h7-^0j4Wc2AB*nMb,o1Hn=<*e1P@:pquaDnm[<et-c`\Wrm
%]t70bB"eWaE?>A:l>a;i-ajJo*(-)\EM4N\PuEXEI4WrZr$m"2A[^6hcZOW*-;E%tcgT>_/OqkE=60')\k%d'EM;/2UFH_R,3F,&
%6@*G4L#?E4$Bi52OW+*t%@N3&Q0^A8QoT`28m]Wmh#\;QB2amsotp(gmK6P\2;fIVf/$8>f"*]".:1Y,d!/@$V5JZ4`"]E?KXI5?
%\T-YV!D.TR0#%Gf&3ke9ApQ#'-O6fOM*qM/gr@Ql0]LON[!aqt9G<AD/T\X`RC,5r"kt(X*HFVW(IT2cX:^KJ?!8nr6AO`9-Rl17
%k.Lb`eDd<fG\mB!bGP=&\Z38if)sD2W$g#n8Ho_(:s"e$OOr7qMsrflg\lL%!E'0U<>gjsX^j)UV;=;/G#A\/JXdqL^N(<iqET,'
%8D!3,.`.f?G<m<`Z3(s"1gtQ?iSeh,9mI@]IAk44ddcj"fUA!#/Y]Tt!m#q^I=6e$H%!8\:+c9c66D/=S0I!mH4pO@1OL`76HppL
%BJ3u4Td,OkZl'j7^hg!QbMC&'X/C^6]>XcD80XWoPPIKl-/kK*`GU/qoeq$$'-'grQ.YnYfhZeU(<I*0g8TrIlPFf;[OW>K>QVk'
%1-(7rf<5)q.t3hjSL^r<V6cc`jQ7VC>,![BO<r%;Z#ht.m,F^-[;37do+MOqL"BX_0s752b"]aW)-b'GZYPdae#G'A8LC*6cjB>d
%;4"%Eq-:lpJ43?ZQ^B/7a9)&BX-)-S!AYF;>]8T,-K8*o"+E\U7:)g%<//"R*"M;qP4(`Hk)-nTZqB$aY%VeR=Jc[;Gt\&:?(HnJ
%5/e$##S7Glm6#9amgu9#e)+MpQe?,4YhtW4fZMeqJ/[q?c&80BIu9StI0-9uD_MYQ+Uj2@fQPT^MoT64c(FbJ#%e[>%MX^W+PdfI
%_./m*R71Vlj79IlJC2&5a`)>]P>,SX8]<4L1M:9C@B^.W8-)g070+dk,na5#]$[gHm9Uu\?LU@Q@CrT+4LR*@;&8Hm>Id\JE`W-]
%&$Ehpb6D2qQ!K6L[I2BoGYe5N`VRnE&nc&_>E$SiaR#_=YS`baaom`hn)YapOjTe1*gnM?r,rf/f+.WBq^s7J8l./FPIi)[((Ql6
%$em6F`"Kk6G:0$I7r(I<UrHA4TQF&Z"<6PDK9C&=6tJl:WlNS';+V+i@cV.1A@09^iF<[D5tQiJ0[hGXY#4,\?h'\?a&:DA42o5b
%CilZ//^1n=,I+n]J/Cum/lfQ8a.EtX>r9a[K)[?IUjhVBq5^m%4>:I"ch[XZH+R"'ZL8!1g4gVD?IK+RM&akAPZ'o#PV[/1l?Xni
%i!pg24D-Hs98:^U:16Q91FKm=aQaDT1LJ704fpdF/4kt1@](nima(TSQ-acZ0JC)]Ng.)#NE6Xsb_YBp<tmTE`GgKcl)0iqofi'A
%n(/F6Q+Uq].5G&VWL'/jPn3.-R8pD&G/ZmQP&":K5agBBZon"EcM^4:P$)#M")n2/Lsf2-Cm<Ws\V8RpH=AOu:MfY-B\P)o`04:$
%khoE<I2(S`s*WhDCnOQ>4,fddGX?A.1M*,KZR`$-4nh]Ai3*9foi9d$I1o\Gf(WZp60)t%bC#VZ3bV=8kRq<4JDS`T^17F[0/eW1
%M^aG="*aV8egq7i[qn:4\H6etjR-uFGp4EphRc+/`b&lt&XL$:3p?,/\#?Z7Gc&+YEn8gef1_<foZ?2R:=D/p4FX&(`2QQ&@$,9J
%Zm&bhP3oh(b%*f&:`513DkOr/%aNn;+3m)?6#U</eE$i@+n?5'M6j&:C2kdh4^@ItaHJg9!o1U8fn_rBcW6n(>$4edR<__(S2.7F
%fKHr\`"-OJa5XB77]ajR<KRoZi[]@4WQ.)k6c(R6H9%#$GZh6'o?CLmZ%UFJfU-4>VGU&M*D$elQb3s$+9e@LgnP8uR(qKj7!eG2
%ZBinHaDp8%K`;C=JoLeK"Lpgp!pOI77DP";r$7,46NB6T=$VZH3VdcjQD>J@6_?V(Y&FJ`$d(uu6%8acnYW>j;Jg!%mNgB6"9B<J
%U?E/hZoa))<BRPIpBs1%.rY?eMKcQVL4\9o.ND9QA\I8.#p*1O_*oDgDuCCKp!3a>UNGuU4L+qU3rY"6RQ6>7PMYi#[WqjN6ham6
%SJBPp')8g4rlg@=QNRD`nM:$[c2$/9s7(AnJ,O<cqnN.!s3"<\=/ZtCH/"HG<u1TbCrRr/_/m<\c[#p:U%koFcs`X:XI2.%Ykb:k
%#@.s3]ND$<Dh>1n/`;4QYJS:X;G\3'Co1__..g&c!,5.7D6$'>^Us^k8:=?-b7jB6QHKA+AFi9diM5M0@+h_E:eE&<>YiYKUSGD^
%HJY\pUQW$L\>Zk[FY)#q_^\Xk3"_&Y$^M(h;EJYY&:R4F,^7S]R+7DnA_&9Q64)*&4R^&oWeaR(=C6-_P8*'"hEL9p?BI3ng$pcM
%jrtHI'6;/:%gZ<q%8+.G2':L\V?1O<OQL20934t4dV*$0UAQ8p)Rq`un7!+S(i[oZCslET=KL^)aZB2g'Pdjj)a5D_WilKLQU`Tl
%UbuC\\\U-pnAkU)"h/#i]Y@F>6er`2FfK"Rosn(C?7EA;bhPOaW%8)W.W]fGM$GffCt"RHE9CluLcFALF".!W#)2\*]G0HMAXGJS
%60o9@`6TQr+H#XIG9tZ+'[53).&l^-?!<:B3Skn!Vj(GKl]0=*BTiJQ3+>>s?H<bFJ?=>>?L=YO@Qirod&6`N/HEsl,.=sBi%t7;
%&ioah8[/_0"M,/`>X*8JZ\Mi6'U6c]Yjf<*F+_Gt2kA(>8l^nlR2)u!dO8/I4hO8H_AVY7f'aF&9qD^nc_hU'gX/i6WJo$nil'[)
%n&N&'jHH%8I^l'AbI[/+JCOmp$$!)u/*>Lm&.;m@7/BYnEl+"jl068fI_f\(cB7jNCddPcdBn<*XA"*Nf,us@%-m/#B1<9lRP6Ps
%qs$sTff*ZFGGr1JYb[ap'nKP@jp`6e1E1SNoIqO:k[?[5\MMB1/4g'@<g34:p?hL'<D!=]72'9sX=cF4e6Mu\OF7`.AGV$`GQj/k
%'q`]An1)]kh/=uAA2%707D$\]]`4ND<+`!Ns+H+_nu2XT[Sfdq&<[>YBe?t)E5]UY^\2K+Mf\9q^unP_,>Xtdrf*o.kH0q.XI9Nn
%0&Lk$\cE_[(JVRYJ]^/Rh.MD:]-(OK@EorC._Rj&0_e!r\H!,Qq7n/Y2qYDne(kEZs/&k4Y$E+cOUfP_GREb'^N/8b!hm^0D,7@H
%MqDlI74d"JVo2WXcs`.=%*5O?b`K@?L_Fiqk]XT>e<GD+hPpH^//%QVN;.F<<q1%Uf)lI45e6bbNTgV'Pk"+mc?VF>,1odo_=b=9
%>.e1`L0rKn!).W/)QKIuXG.9+!nTAXQfnik4!.tgW4]S:bjbd[$/V"U9fi\ea'4S9Wn`PQ;*G6:R/U$%_:T:;*4!IE%&i+7Mt6XE
%p6To['J3W&]?f=V>f$RYed*`kA9?G(TUeZ%B;pKo)F=n=H@UW8q@Q%^3V5(<](03V<f4cMDFY"Vfl+=98>`j`=>!/H#D,d^Hf1Z]
%D7@=]O.>E>d6#fj7"=1H:J33g-pomS$u"L`qmgES9gZ6&8f%Nq:U%h+n8..C8WV.;M_$-2lg5:KRgk.8\+T:o8;q_-I(:1flk5aC
%6u>HN;ICtY6N@^cbRn@NgWLU;5o4<3>@GF6*s'Qp'9T;7&-!6j2?][LZEWYC_P:L.i1>#5Rl7@D?4fN8%ZD>tWd^!H^qeZ*'K7*u
%;&)&2PEEkt\Qe_tPEQ]`]qiLeZFO6S7$W^W!N*rb8Y$OTU^O?o,)cQ>BWNHk-@h5o&-JTe/nG8"b($g<nqlb-o>1*[#IYa5iUn2D
%k'^j?roPW[">!RjBg_)^b2ILVQJ91DH&"DaVb<U-Eq(8M;h>D^DOpm":QWENc!O?qN)mGjVB^+TWCs=->8^Xj!L_Xcf35t'E#&qQ
%5ZH9M+i@R75,Tu^YaE\#7Q.]t]6pbPHh-R/L;B:3-[sl'BLmP(H.*hr?]&9T")[98:#8ed1"oGWkEL:]JVB+C_/'Y:1I"gO%u7qu
%[dk)n]818mTs3:cnW\s9l92H*W=T!`!G9E`7^Ifq@o.",?.cas-[Q[@?mIF8eTI"dQK<f\BKm.$e1qsNc98ni@*f9$i\^aib1?Gj
%mW`$"U*NP^Geg#:R?@[>mlYUg!:"^_^)#o$m:r99nBB%OGo0(0r/LMMQ<hItMa__4Q>BEnU-oM;#7Ho[m:WA@Z-/gMbO`!D4q=SV
%EZF#/jCM<W6Vg30N]M%QHP(V/q%QEel^_qla[\GrWp^3<R"LP,Hci%nOrKQ64((]1-(Z-rjf!`i-Z,0tS/^i.HPYRdhLf;`PC-0u
%i"VI9'553TGq'B#^VuA)gS#u;quSmH",iLCL*h1B:VPkipi^0g]Nc2S\F+d2g5Q'=So>F5Zf<75qPS':#<I4^_HPsX*[\[di1/[Q
%&1U#A2Q"%65Ll$]m]B71$!pVfcm>8c$L(!XCB8s"DaabdouaG`,R`m/Got<@lRoqni3U:S+iIR%rBudC]*"uj):9>fA\YOnW&c8L
%$.1dY,i>`B'(Sb;#IGC.Ea`oce[d(1(P^+LfsG2jl&`qWW_=O95RV,h/#"?C5?ZS\>-_K&]9GgEart:0BR"D4^n:65Eh).'OEn)F
%;lO3*)#8hiMH/SsTV<51bYt(K/Ln#E6tU2=q)>6gme7G'(PL(kh=6.S7kS^NhG2TYf_g(tTV_m8!JP[[oGH'Coar$#aTklNjcE10
%'?Lk#[I3_"W.a:0WnlOUU?`b$R%I:Xid"9/4:sY(*I+d??IIf#[j&;iDoGEJ$/9V[ZU[IB^[d3L$p69ud[5Cr^q51MLuQH(!mY7&
%m6\<Y`;4:5N(#AFVoVIiYdO-KYZH%;7X8+QhLW0^AA);agSZIO$##6.;S#mH(BJ]1O4<VQ(Na$CN>M!<,49<Hq`?Eb:"[,;#k[)H
%m5p9pQJ/SL85sS>LTV,:/aK_]*\t7njK_@gLjn>B@<6upAUTUq%qULWcIm%r,iTmj#/PD=+&jDeRuEr8L_."!DpN+R"E].8&u#%9
%,l]B3p>SPEIO4sX.ML#sdUrSD4\^q#A:KL.i$n>t,B7U#m/_k4-Y8lh^%rgp&b;9@02^%IUrf1C_C4k!WO>jq3Nl6&q!Y#"Ub%W;
%Qu1[++4=(m3CF-D43=B5QJ)lf'8^@%RO+Y<S?lFUA?F[Udk\7!mdfZ+NI6o3K1cjh$`BHA2hSPl502X&0VIH)H*3DYa?6!B)1[#)
%I%K\VCq$$2IVA9$?LQ/b<(G,^o1;iM:K"T)/>"m^$=:U;IOBnY-b9XPXL:Ns;;'r0XpUJ+;j$6V]aP`Zg>PDuC*6%5eY?!lL;!%W
%5ehOI0=REB$CSIW/!+D[V,\Ib/j`pYBgUHq8C[##9nZ4Hs6[r:$stX1YVR*Y:VF5hmf*c<_*0NsnhpKL/juP-!C5XOoHX/KH?3l8
%RDT9X)@6T_R:n'(S8bAfA\eD&`p]1Oj]OJO^5<G-Dp5kMOJt&/#29<OIHLB=V)q.d)Ju3&EWL9B;bMjO<(R1ufPQ:?9^h"c$3oK9
%AJ/lL@acV*0?M6Xc^;(K1Q^DL.6]/RbQ_gk,8RgXT;meJUH\5F7hh07W)!(;bR/ib&N1bk=2rH=No>h'g:2J5LYu:@LsVj$U-c^u
%D6+#D)W2[#Tm0^=n6RlW^l+08!%YNL];PmiRNjfp&m?hX>jJ5aFofD[T'BOFfZ^l;6JghHRF8HNAl2GtEX:U[Z`<1l=WR!@<uR?(
%PP*GM3#%.Lk&%0&K'jR^ieRAt/Uc8tEoYEN&bHu(r^oZ4'#0R4WF=@=0SA/Zc8iBkWn[`k4*$(nT^F'lp3U].\^F:0.WJq2EsgJ>
%hgG/)dD6ik1io1sd>$@#,l[V^;r1F3b4Jt!c(,4.(8ff_]i&[N:D*Bl%Sp'#J9;M7b8sWN&O>6Lm-4(f<9jT9dWRtH\1rBiC](kS
%YeOIg7e8\6oL@R)0"6Wd<?po`O)Xd`p$@33aRLtGG:=NVPkb:Vl^puJ55@qb3pkT!]Ha&]W(C]^r*8_l/`u*(FD%JE[mF1J3=bJ`
%MsBFs",-KjiP'b@j"(3%a79R&%U'a\fj<>IMUdd$p8qH6klG>l^g_;ID,s(TSp\9hm$079,^X/W-@4\eacLSlh9M)h\bM`M9Ic6T
%0XY\gnA[0i$EO)7=DGA6L_nd)%sHp8AC(a8SQ+Xf0A:OZ7Wp-*:.poI*IZ')mHCr[l-Ik?:Zge=l)V?9N6l]nfFuuDl*;a"s-%/_
%JU'jqk0Mf+h9/Q8pJp%9469XEYUiq$&Y'bN'&Cq+W4.C,QM/M6!n(HGJ)!\2Ib[h,dp:U,\ltj75YK@mmWMNcNrB<1aZa6J3R$(=
%DP*bnF'?S?;T)6$g#'MYWWgT@"jfQA>k!j/N.Y`#gN7#+[b+6-?]7E"CdABQ*YSES_:V^G'8:<"N;5)oqBt@!5.g3BACkIJZ5=]9
%3m6RWI9>?U2f8@jT+hogS47Ma8SQ"IP$o8m`1X//cjBQK'IPRa>2Xt6KlJ94Akih`:_!\sP^hjsc.7t&1J1NcXOB;f<r080=AELJ
%?G[NMbH,aOmGt*78&BPO[-=mPM_X@oR\t@5g<EP5nJ/62lj]7l(T?Cg:R[Lo!%s$raoa+S-QGl_EGo*Ybj,0rMJEK`?gl0OQ3AG3
%##HI%':LNfUMLLZP4GmLVK2I=\6_=t3i0!I-2QKE>oU[G^5UrV\^NdJ%ng^L4sOn`:OImCiJi\tSt8:]2C?rgCKj\?[0U$0LjT-\
%\G>UF-K>@9\XpCe2n13hs)K.]n\9+TjA2%?Q0;u%Fk5U=!TpJ37lU*i.7A#X:a`XU$6`90@dnD5m(f&8BdBWXBq>E0-"._VYC*Hs
%A.i*PqXY@kAYNat"#Ho5.hCs88-5L?Mh?PQ`V?&6ItB#Y#=_tMj^`6@HEu:Zm/?+299d@FSC6HD7-1Oa#:EUr]Ia4f&h#20R0Rur
%j3YX>#q!+sFb>-sS]UG<p.<hQH^9[RWG)[KNi^(&foB7!,b;2p^^f_"%qLuf:J;M2!Fg#JdbXo;1sjIU\tD_D_o4MMobH"7CHG+,
%ooos=Y<"A]D^UBDH(#elckR9]/F0IXck9\+W&C861iBuIeg'UVbM(ZYI?MQK#BjZS3Du0M.$&EC,bSbKkoG)0Fbj'b:f/0TGu(JU
%4*qh=T\C_=@7PeU#=DWY/>Q.qVCT768_\RHM"HNh"_oc5PpF$k"a7m7<e#j;D5G`HQ0Gl3$$#d7g@5j/H(tXPM0H120%^I;*_Pl<
%K)u1F8LF;70#%VS;qOXRd8Er4ZFFe-6/c0RCZ\/]06Ofgq%CF6_Z0QA98HmYK:Htu;^D2!]4E"Z^Q59BO[uMVATGHiKuT/!D"9W'
%),F"E0^NeSHLP,r>?O.O=/$EQb)h&9M<pqlGe_*.@b[[SQG$s;5LV't7)0HC]q.j7h"uGk1tG@8SdPK+;5p@CP#`u.bsr&Mpm"jO
%$GJ9XAnAbsY^q9&)i6ksr+t]e[Q%)q$958F6qnE0iPmt.F's;&^VfUV34S%QP3f!%[A]X[LN8lXdUb-?Miu63mK%BCl^Q:3dR5[I
%Y=dF!$AFnVQ=@#'mHic+mNUuU5da\_"51#XeBl_C?K.'GE:f%5O6pAj_WR2JbuN82FI13DUuuf&M-a2l\Z_ahg-KkC%2iu@HqqP$
%PtSq._.$o0acTFr8?;k\?G.4?/8u"Hp#8i1o7fP)-4I>adBeI!!=a6TS4.eqLgm4%Tn)atm0j0gXqGpJ*VPTO6gX_=F'=<Kmch]!
%l.r9Imi#66?MIP0AQNpff7hTCfjTE>rW[\e%LG`rD=!FdI`sg8aO.\2re\;'nkbG.Jo+W+C5M>KVCN%#PO\Zur@.Nl6-?]NEDo9s
%J0$kXmPH[1B-n/5SOQYCB^4dhc2^fm+'='a^cQm*\IE<W9G5+Up9L5kC2Jdm4?r5[bk`aHam@MD1M>:OS`1BPi_<6e+>8))VjX8P
%TZ',q)jmpP4nV2W6(%4%N!G;o%B(6PA<FYu@Vt,eC%mF9F4.mr31/FDFbM?#;4VoYEFGRoo3c<6mSs%L&F]j>C9n,r,DGf`!+O[&
%RWBp@P8O^,WS(?imV$u\buHUrWc(HM[\E:W^.Qd%!)8=Z,*4&Cr-*D%6L2mfbt^.R3JEQQU^<RV"rOIWb6Y9cmoi%D"_?lrR^W2E
%>&lrM6$:u<&$cqFj9Zu5+`^S^6>H6lZF]=#J08jb,!1W<6PsuY:aq3''R..t6]5)X9Z8bIm^/`6Ht0YAYIs^ecP>&Y=P4d*4b3Jj
%7=.mo8AVY(E$UnB+n0J2`_W0!0b?1rKj<[JCjoHMB6\Q^9piC4;ZurS^5ols#anAt>ke&/-;5jY!W2V[L7nPo`$897?p0u$Dbn?3
%deL`AP#Md_.j-lOH"f<O:SFZ,D`s^a)</Jk4N.rpBYY/rWc>6'mgoI*0.(Qe=\:M;7RSuDRUSgh;f"A'I(3gh@!!XnPP)O:?Vk(Q
%/s'X#Z<LbF@V\=[6`poHbcf=^gB`WD2X$c&&lg')cIKFr="ND,*D1+,pkmeF^PhOmXI.F7/tTDjVN`trBAn6O,MOM!d'%i[M@26)
%/]=,S\ZK51!-rh-9n,j#eL7Z\.@JI%]h,aeVVT[E,h1le+qhKc2Q>_jH3U!H:^+n=LPadBba,lWL1XH-CPn]`@@E)(Rg6,VGhVmo
%9",SVpe:najS_UT2<BU&4gi5CEkR;G_q3nr$l8'B6,n47hDqo0>ksoD,lun?KO@EVJB'HEF'#3fURG`pJU3E@;4aPPe.H*5V#M/U
%4\BfHSLmc(GFAn3k88iN29LAS>I`53cuBseWhM0[7V?7$WAM38YA3j:jQ[8?pNIsOc-S.C!1gr%:RBZJBdhPNPAa6iJA4J*.O1E6
%6[[4g`X]s:`!j/_*D'DKi8XQ5W1[DKZE034("sU[N`;l2>E,9,"[(][ZK4ad>R:82nm>MMKu)1k]8Ade!%NNYWGkf1QN/]=^bc>i
%>+D"L;Lf!a_'#Z>];*3$bO[&j<q-,1K>T*o<NmJB#f,Z8!f=a493:njl?Ejch7[3d'U,u<Q1.b.Y)duFjM4Lmn!&&:.-4!<'6/%?
%W*R(ZD6S'5<'4&=oVduJ5fT2:-j;6eefM@YE&lYm8Hb>ghm-h_W%96/*p?<[@8UX"7h4rUWtgL&Q\UAOJo]'G^/kl;X^A7]:CjpE
%Uq:'uRfP\[h^!I[AT2%8aF<A*\Lt?f:n#D4T%%p(8<!q`/c)I9LOoXt_!9Es,nFED#$g+tnUM-PT8+,B<R:oR#Vo9"L9ARW$qrh,
%.8l<TD\I,RLaT&M%sX/h*5.Gt;GQ3S"1G?"(</M+2Kl#k!QbMeRIKTsm?($6N'-[#BUpgT*YhrUJ[$%HfgPDZ7+r?Qc=eYgF8j8V
%g-6D_ACP0u`,Y%(ibJ^^o9*5F4JqS3Qp(\PC^%/g*'/(tX>I]f-']pS-n7r\0N5[fb0"<O5dfH7#gH=H3,Y8]dpPN5-DmBQW,Tdh
%_4B("DrR6m;RDMe/sR_T$F6Nf10$`jBpJ*4q:_u))@^2g:!i8=3SO-rKp!QF5K.e0bNi6GkrnNmVNUp2:e,PSIa^[s\mjanL8)5K
%lAFo?A9?U`J9iXBeZdu?/B7]G-(/<D[n"W[R`o27hoD1>ADQm5&Mm[GAMoAr`<?A:?i96t(G4J/_QAMg8V7*="+]\:$M)I9:.&5W
%ZW9j1(1G\l-U1hO7rtb<UD?Zb==-I:O`f$H@aRX?SHJ9Ir*K#F@,0^h7gqh$*5<\c*rtTt1G!R!Fn#M^Z2q%="ie'*b:($AL<,.L
%W&1_4fk&5B>_UeH#fF-k82umGRpGo#$oo(%-5O3nlbJ4E_!XX'-\r)3eEr?ZbHRf^knmWmIh7;MdiXm<O5CVu.,B"sG+<e"8bChg
%[,b2rS^N]9<.H.98<d#+.(A;G4\9C5ge<TmP=;@^]$.hD;l[!oA$JV)C/PK%WZ-ro3S>4AEh#^3X/Q8#&QlaYh;7_+(lr@K=6.cl
%YqOA?eX_&+fB.tXAI@dXJngSHO(%0EH3@ESP_/bdb_4@p'jplHlh4U\:*Wad&KRXO$Zfs8bo7\ffi74dl]mElX8at2]gjeVHh2$V
%P3hF9F/$\&b?NBrS"ZWoKmj/,C.B[Nb>4#!pRKHhcZ@>:d+W?Z8(.hELaidil<Cd?%"&fJJugfkOP5n/0DEs'Nn,[[O6s;&%pPUt
%UO_,O(A^eB!BoB^@p-3dOe8I7:c-F\mnt^(00-f3iE36As(o`ZPr(WK7+I)Nit7g+#X)6?f,__:Wu%kjqebduFR5-lAu(d>6,<;Y
%hrVEFqs#gO_'+Vq^:+GO.QX(j7BoImSnN"Eo3S7hG3iEc:2;G!03FeKGSj"md'aoV*Z6*s=XCAO^8W(ApmW^'WXarO*aOMXR)?W?
%<N;Q1eq6M"faQ3u>]mTFJu,P,_]7HhZA!B_KWSKTA.uZ%c?<PPMl80fGBL@bZh-ha,e9(ClOi5U)<Y'$gf?TnVWH5MSa8_9kT`1N
%FZ^*o3p/Y@L%1u@E,a]o9UY63QHc?nT$kMSk_@-Q3(RT@Ja,i(H\@Bg!?+_FJh;37durgr*,(#BIAoR8Y[!bP:.^Q"?[<\0M,pUl
%Z,&3A,nm#FTjJPRgD@R,N/q.?T]18DN38nVh6M$jBXfKPaK(`,<8HscahM!Rk<71l^4HAt0P@=.H-P(e`FgID]^.sV1l5(BO87aP
%^mReEW&f[<FBQheH-Tri]It]7R#nBl=-%NfF5>po]_tl7m0)_?OBtN/410oI.]6D^BjdaYp\A"mr8a<r!N5mDRHElX.B;\!`Bp0c
%cYo?6j>$E^"^"_;r%8f-9V0!N.LlDYNj3fqC%>E!TB42MjYQnELrEE56*>>^[/TI)*:aan6@Z))-7-u@5:`de0]jI80,>L*r`l4f
%n,%Q_Q?"MXGJ;86(?CPVg_DO6ikJ]Q=k;,PFr(Ru_LHGi*7jsi5C8YT`W"YBChJk.cIW!/lWodnJ+lFiHe28t"f8ot:Ohf<(dDC+
%pt:U#MdPN?mapiscnXm25k"<NoD=ECk:Z4RBja<UT2(&BCKZL$?NZ3DiNGItoVgRKJ%@3]WlHhEmm`"/\;su%L`ErT++JN,ADtM?
%J"8$V%O@Khr@JZMG.[e=Q8R_"Z[]WsVCqB+59?DaqPui1Es+Ag5Q+$R=H6P[PX1T.rAW>,,KsA!%i*9qqYfHn`cCe1SDB^MSKFKV
%;iMm&RD3MOI[k24mJsEqc</3WnFb5a>IaYno=i'l8F*J6s$'sD5.ug`Zm`ca7M)h0k9nXOQ/PmaY)5a';^)\.MuLJ`T934Xo^RoY
%']u6"pC2`P=\DKU)_7'-[)hc,<;^K0R#mEr8P)p(maP)OiKO-lI^[/I,(g]^H:eD8K#<GB#b5P.U*[e]>>^Rm]lkIFqqdX0WRR;2
%YcRn\)[J.,L*M@p6tSd!:("0g'&8ZBPY/MB;BV-(OKCgr/j?\,Xll05AQdLj<\"i2W*_T5RVWH18jT@nqFRNoWie&gA`Z4grOL6F
%RmT[SVf[h"od9WDV<H_ZM$BW<9+hA*=\3-(A'tLAr>0)TFc#G?P^>)u9+(EU]rm%Z7+q=8)Q-t8HV.&<LHP0/=k"d#/FKHW!*\%9
%H9.D>Jt8MQSPSLnfgT]t':^;0^9=/W>EB0\SCX]/#,MN7NM5T.%!b^]k8n"n\lp(!V.b$L5eN,Bia\c".0&O\8_+)o&9Sfe\q^+&
%"mmdeh:,X0TGM.mJfaU9D.FRT>'Rj[Y4uZ->K9`G9Tfi0PWT5:$@\Fh[>aUhH@)44W8TkXr5XZT!T<pQIoOSs]?`"rraS@1`:cG?
%'Y7&*25c_L_X+37oNlIWXDUk3EN?gDB@Klc0LR!$`+/6@_-s*07_[c>)3XOQkOi3H@1Ajkq\=8h_V([?&(O][]_Cmhr&_T'b*%6=
%H\ka5XT)dQY]878ls3$YOhCL>IK8^=9Q=7US(E3km:<1g#LEjgdN]Y..>d17)uWFCU[\dPD8Kh&/^Ii#Ch,]Odd7K8B72Hb`3$mN
%_;<+[O&=]T\=!H4Ah97!Ij],=b+dUbZ1>5@<A\LW4I5<\k?DB@XFSbFY^V5<BW>:_Cn^7!B:_7&Cp1Dr4&Q\B1YNUJg+M7o<?Nm-
%3ZP^moFDGrW1>WZah>JoNkC?Ts6WN+"31`ufA60breb^&Z$pTB_S<aqmh7P^I@gGI#M50QgA)VY(?M7[1PYb@=$M0RlC;4RWSRmr
%b?j(mL1Qmt6+lZp"c_8dVL\[Dl_Z^;[)c5Da)(=_'h!O!*=eLMfADFaMn^bOpC:@rX;l4MecYB`brPW&"BGKtOu2>#lWnhp<>3jU
%rQj*c]3\DdM-F46Y4YkTXG)[r<<A#^/$im_23pebih;F2*ke@:]oh?0G\,:B!Wku$-TT&+Aq47Ml`A`^Ajqu`&sMNG?YL_7'&in^
%WE0"h#S$l=E>2>I_+i+:luZU"GNT=:,C7m[ehOY5ad1[$\*r;dUKdP.dXp[b)pbntJ`p1iZ\'Kq/2ertIeMCB*gPTH[p)XTe4c]s
%pn+`5YD3hQB<O9Z_u*Sp#,:"aTk3T`o>X0W-)L9U68P//O38lf=eCXs(7k>Bs6Ti-([L6=0o2uW7tM/M(#2$o.nT"aItj6<Cp1_r
%H#qK8JcG7l0NsP7^.38&kFUQimIaHFpmDWSe'Bt7SN0AGl$$TN\_@"kl.9eGS+A^5H+]^CU?:u1ho"n97(QZ'+/o6:$[Z"4rmLYK
%/E0ORqYfsM>'tXQ5]O"lZ2=k8@5$[boB`23cU0"X!^UdV\4hHl-2[BjJXdt465$DhNbQ*UL1E5IYV[/CKN1J&N[@S^-dYl9CO2^K
%dn>/hBYO_tF28D_GB*CFBO/5@)\Njb)7RJcgb'/#"LOCKKj/pu1MTHE5H2S^l"*(nG9GD-@ujUX42`]8US9>B3C(15@0Z[tY!C#n
%?Rn*@LPdXIaHA^Hi-0ge:jSL>`d-E-jdr0EjM5%@\9`QGH[p,=RH$7LpF!RF,X#5NV&oeEr&ue>G^0PE;V$)8PWrU1a&8G.$R"N$
%(8]K<.oIBtP%b7Hag3M\gZe8X#1/A@[B>Z/>%'j%6D*GU:+KI)cNK'`J9&]hjX3iE?,msrkA`CBSii&W4M72ea?GOb,P,;*h(u&e
%*=^2IHJBCW=9ZUID!2+u$$?C6ST[;:<5sqK1u+rhcNl!=[T/M+r58e0hPq=Dh`8ur@i1#q:Z:ZGfj"-fRm#+3WX.>?"g/e-72O+)
%U<=L6+Vtpm<6f?=[p2*mi,LkTFC=pcESeuc?Ok`r<jUiLfqV!:NokP!9))7aan$:@,Cdlb$Rjb,H1W.;&BS?0McpG'3Af17[V@tu
%<d,:<eKf?4T9;OS8m1eB8a>OGYZf8m1I7tW(F/F#j'90&77]V/Aq$eb!3SWUaWmVckWih0>2!BpfF,-=W&T5Ip<\ggnib-O#\27u
%`fq*`d8FgG@(4(]"589UnGo+]T^fS!`10OD@/]6TUZ0'Xleka[rU[7KY$,.tGb^$%;F^tQ.-N6Kos)sI&Be?X*K..CO@'YME1g2H
%!BrSZW'aK7]u`/>JB^=,5?-s!RF"=Q?%8>;GNd#U;l-aL'ao-A&P5Jed6+$)rbG?N4L*\&D$CDgjM1r<6fFEV2a</9)fAtBY$CB=
%[fGVn5#<<@e,XGlJYWOD+$#jIEM"/s(X#@M&\]>3lAH9oakZ&"g9?E&#5)=@)-mHlAo#g\RS<\DbM@2`+T$h&GNpPr+Nd)+21TGN
%UZ_sa<-V8`X3WqZUObCYAuJW@IHRb^,AqW;jIa'ZVS"W!%6@=Y"0eWhW=-k<c`77L4Et:1GW++#"[-hgpQ7;[1-sjj>Yd"Al!0Ob
%K7Fb:MW^+rpcMWdAtSQ"J=iG;UI["m&O5=eSi^5)Er;K?P^F0tc%t5QXtgD+ps'II[#OI;K(8r<aj:O&dj[3r5bk-6lj:UO@N.CL
%-(aB_3R@Z0-Cl\3*-c4f"I-N4bW)e4V;f:$OY9TllACb\3DlYt#Ho:UiQM&0k>hjZE8f<95GjkT,)EEf;040jH3(lTi31HMTc,#.
%R4:@`1_;WRb&P5K4/H7uLoOhBKEjIbB6/O`/Ye.ddnlg/o\",k0LqZo<eg_r5K.(+0tg4%XHY4BD#Vcs0;[om9Km>75(?Cga=HPZ
%.9E?*rCF6[@i[6!X<jb'X"7cmi&Eh%9d/rqQL@3Cf.;^\CK]9.+r)<q)%!gHqa5;&>`Ec(V]W*J]@Vpq\:OP[f32%B>KT&i;ZH5T
%/'_pRa--PXff9#[=JaPS0+`M5^i=l-7@(@Rec*`TZ"a97MOhFjUe.l.TbA?$'dg14$l4XYr+UB9)8Z/>NF]aL.NiYm.):-/i;2I;
%0/!U2Fbf8[A%U2=VG&p$Ch%OnKX.pq2$(>%X]NZ`4.RU''n,VF6sG"p5?O&hnMFp2XQts/lnt[AWllu?=3fTJ\%]k;Nm_D>MT<.6
%qbJqbq:L-d1e-eIo.0L;n3d`O+d^P1H1!=M;$0HBmlV2f%Xo'Dad1>\7t*"cUd?PW8*'SX,VS=c,+1Wd*%COl:'"/Z;i=mp9jRN6
%=9Km7Y_BicR@Lr"%(8n0Su_acMFBO\cB&&`+V<,7D&FD!N_aNpN#I\tbo1$@-[8G8__nG<J6kAsFV`D:FC/g`.=&e\S9]&do70,%
%8I*VJ*jIpd%DWB]G&dVk>J+MnkP.Mmi;fE9c05T@?[!.!7E<KtJZsc6dqAtl)uY1g/ckUQl/m:6Q&0.VcK\<umSX.?UhdVeQ_kR)
%?<0_uD`<gB`=`*]Nj[*]L^/]jp,#%B;.Li=P*(=jV8@s6`na)k]"ISsNoH/lIk2:SXI(^q]<^%r2@@7D%s+M*=Fi'D^'p;D9t(dD
%kDa`,e-'dj6/>n/"3U'6J5t'm1"Oo0)Ca4.(5p1*;=XkU9rb0M@>r-pjsjeoiE)R'ear7A?B<(<R5ZXF]lAinkk9aI/[(_COioW)
%"TD6r8$./fXiX&&ZUq^#7AOngV3RRo(1Bf#,s.<sdH&].iA*Q4;nuu-M^jPp&(Rpoc77i(ph.2tHs0l87+9c3@'4h*<fFm(:-Pdl
%pO>>mKE[?Rgo8)9<GpEH;Fkdid;5Mi;NmRqB/<oH_?;Q@<!.D!$g;-s[_M2H3/LCH'fS,Z-F(_eC'<DYU#Mj%X,GQm(9$>l3nH5\
%ro$rpI&><'F5VX_]O],2A?Hh,X?Y3i4B=I<#0.LQ*'7q<TY$qTlT]M]$S\[t/`asjlKWf"[(H/bgZr#nRED&)V8&Hl9*:=rZo%sk
%g_I<?_ekRuM$K2@fVqqmZUX8@oI':^iCSRdlOYHHpjC<KH`.7!o@?YO<UXmI9:-3\QfMd.$Pl[da1-bhV?qoFG:e"#;j7q%_5ZqQ
%,tPc,2mreJh\A?P%c,VL%X(X#dntX#FWb48('j!!J]r8-:*+rT[-1b_e9<Zt0XXs]L$'9A%D=7%M.V*s'I58iFJ#2\WFeL#HJOjk
%&f?6g5LUD>YuJF5ZZ\p.FQ&47Lb9kV)4IVi]lr,Y5GN32nqdct9W?9/1-%^pk(3<]'O]S?gb?6GW(5_l]8MOd'E*W/k));fVBr!Z
%Wf?!CBIR%=j$&BPndZ8raFQ/:ZsL\!>)l/<E9DTWX1[kpdWjZ`J7s`p>SS)A]5.2pSM>Pu/PG[lh[;V$2CWIkcE=5b-d"om*oT_a
%+q(<=M/"hUCjl^3oupb'Ha1XK1#f(Fl]Nb)rqDVAU8ME5;2?sae^:8;C(C5Co.>B<MLk?!O`_Q\m^('qmaTQ!W#m7UJB2SoHj[$h
%:=@O03YXFP,mK.Soj1J@S!X.-[#qgk7Ynf`SCpq;/\,-0,.f?]b$snF:3$;8Xk*ct"MLWnU=#c:Hi)X%'0KF`@2RHK1U&RG4[3^>
%+nlZMeXIgQ:0Rr;%N.3SESHpd]3,eEn1Q_Rm'TpUj+q#HSRgC5W(UitGO&8h!M#2NQY,e0mu"c5lZ4^+esBn.h029i[7Ub;3nkr*
%[q?UcF0%O;G<%k3rfM\%s7\,f]fNsRQJZ[:,_32@;GUTPEKIk&*</&\nnYHu]0J9dKB;q<'pob0d,\H3@8BrsVPhagb4"E;inO2Y
%)ZD'dIfQbFkJ1p)[6!QMOU>)"o<g!!Ml"0!Gd7e3<Bbc4B,`GXj>p5LT2C`Z'%FZ[Y?M";6+p9GINa`\/AN!3k\h0Ms/ubYjR9n?
%@$psm5/596>EJuEbAWs5N<3IB)BZ/]QP-9'[[d^3dm.>N'R,5>aiZ>2>3W_CBj/p'\9n%ro%(Zb]?fe7hr[c<FF,[]a%1._YCKW+
%f0$822IX^mU1]3pn5i%GiRR;BT[9F;-P#\:<C0G15lCG$kBXM_ZkhW4nQfg37huUeC5Pp)hrfun>HNfZ\4*gH2?<m==VX'QYRfO&
%Ih)[iIp?^j.t`_`"m]/GD$+hD5^8Z'57U"D_hJh@N01ch9)C4WA0Y@^T0Ip+as&tV^&U2GIS">_6_E,j=JQEt+U>G"[CX'W[a]%q
%.05oZaM49qs/\`=ek(]p]+u7m6SnX]GHDY*;6#r'"4c_af8p0FW`WBa86Fc6`dc0c,Y.Dis4@9>ST.s9AN%[0d@?pm?i73O,j7A^
%K%4FKeSB3#c*BW-d>BYFFE>c,iaLf;S1:iaKNZtiMRW'>JC67+Fl:?n5T+)jns3)dj;37F*O_no)]gCn5R,C6S(VC1$U:o>q#"mH
%T3lWJ>_p;LkI^SOQcXZPZGj,G8EMHQ#;lB;9+uOG0En:7)M&ma.NGGNG_36\ME6Z1j!dGh#N!j+I-,RL[]HFg3YC,DY%3ThGDNUB
%OgJS2;B`ub\OSrE-qLoG+_5IC^bR#S&jk^nM,E#R-%'X$Ng[%0gH=q%H9,/mF1DmJ+I/[I>u0Sl\T?f.7BM/C`QqXq'ZVF<j<qCT
%;tSOOp:*1A&Y%dY7G_(Iak,MM!lql@AlI8\oXQ6s`K+2%X=d4rAtY0\=9PXA]UqgZgi&Fimc#Y0Kp-DjFlFD0=%sFQF6X5"Y;+Yi
%brV]McK%GRS8l5^ln*YA5:fQC[g1HEnafZI0=\.FJMEO*?E,s6$rpShl62_<@&I"K[pf[j)"WG5Z[#%kS=:LB'qIOu]T4S$8p`DN
%Q[BO\c`=#'dU&:nH&OB_fg^b\Z^'pa?4FY2>T);1i@DFR5gFhS#8sQnBA7$3laTB[[,D.pXpW.C/S.+/`C!bAMZ7)A=-t.12n%<X
%hEnYA`ElslfhWb4<H7ClkG.Mfofr.;+=b\f-/4@JMDGR=>&V0X(L5?NTl8S,N.%%-)a1j'$5f5k&S7)=5<a^7kAVTtGtSKS;c$)Y
%oFp$/L.I2tM=Mcb:s>Ek>=h.T:0tc/Vn&@S-/ELY!PY;&m;Y;I+)7L#'smYFg7Cj2E$!P["\G4jLRj*a.aa>U#.CUP9@5_;@>uj3
%B"pYj[:M=).IDQcRril>ZS8&(/]=pOX!D(.rKJtJYI*KLm(F]$^9RuoR\ZuO+tFaH-=k&.Eg^*I@<?g/:T1pT*/<kbE=o*nZ9021
%r?q\DGBJDkoS/tYbI5$%'daNa\*s!58L_noQJch-^-4&Nil&@SB;@2QJ9,AN@D8e0Jl1E55Hj,U7B#>Ge;*1)'qLke1t12*4]73V
%@[doE+_k+q';"nI,^ng+pQ`cZoV-.gE9j!#PWk$<]kH_4TtE,F,u=i/)1;nML.<&C3SZDBODgs(FRi":[#SD(+8`]+;MYm_[SE_'
%PFhW0=\>:U]H-&=TF-<51[BQ;.Qjs6U))i`i$7d-4)HN@jOc^h=Uso9=uNs>=N']59e$/;<_r@iJ:Cl/b%23o4V_sQ\orlq)&aH8
%IqN'1RmslEI-kQ,:GK\sHu?<))B&:qbKmbC8tLl2@h[Q[Q0@6["u4*?RnaO+P`lfnD9m\l'gAhrZQLW"_U9QJ/\=U#;(!*:>Kj*K
%>@D>[rs\Y*]PBP1]a1<&8$mp^m,1itYVh-]a%Pj[8@'t0Pu)1l,qH\6+Hu0t[M"5N4@ue<c(/Mc&Ug0mOi7^IW/r#h<n;WK*f%S2
%XK,r5o?:kSrQ9+]mV@K+:<-&BS.'6*5aNG(hR:ndMc!9g:E&s8G=o[raW)>\=$4ru[6qd,T19*Pf4o+!4c@0`S-GoT?-ScPKhqDD
%gc#nYdirh5+,)0W3OjFS,5G%lHhr)^,i]e/1u5LLSZkX:O(I-rQ^fNs?+icFXf&NWmeM<u&',90iog7L`V[2PB=c/5G8@-('m'e@
%?)q)m<i]kj"':WCE#XDRERr)n8f*)$4m0QM$]BjJmn)G$:PicH[VEqLO&&j\kIug$*tq*_))3UAJYglV.+S,Ce7-Q'On>@X]OD#J
%JYP5`i^_E)2GW,8c#3s3NN9h.Zqs+R%"Usnq"UGj5Kl#G?>sP[Geq/S8_\8./eAdm4DEap_N:F[`F?[n`0'6p^S`IWMA2I1_VQq9
%Oq]=#%H-kK>5ii^/TnNPYII`@^@k5QlVi>/3ZTp">A5b7[QWe:cnI43.%bLP&?(,dCjc!J$a[W<"=BnNa0B_NM862d1#%@oo.q*p
%Hl#*WbtY,2`Y;8]9I(DgTLO0%KnfGQ9Iu*<+rjBNPY<C:n"j^7E,K7JajOHPrL@$c$#fR85pfeOj(6^;NW5s64Q&gOj;Wc4P&`m9
%K%[^Y+sNR.1)'`)D%johS2%7=r\LWM`;<=Hl)tpGFN%:,hEN(0%M'P6-prW.ds5fV\'YguPiPLNN33C$1o;Hpcj]jPq.0M"@en4'
%Tsl$gc9%g)J&SZ-cCrU=r<a[_8?F+3.&Ds,/g%+QKHl$J0"<>upeVt>/=,Q5\[9e?2KWJHVo5&G\"D+G+=TeXMa]jWbgJVl@bqoZ
%<%VEq"Lf-J<pD,_ZF;b2a_JDj,+<k1?1>@sXlXT"i'Tn@jUsT4H[*5qcN-TD.A;40o5cM(R)X?#2U@0_<%E]:G-#/9n[PODW/fZO
%:Y]P0O_`MQ@%c9o;4r>@lGQm6^`HKe`S*:uKO]kMi<7lM`<]P-U(F`nJLq_kn]H-'#?01:&te5#$;Rn@gs>mlD&e!o3sC#V/@s6G
%TE.C91H=%_-it1UY#ma\<C#l^W*$\5LZOAb2(V#CW3E!N3EA_^D!7PuPfN2hp`g7Uq6r]N=]P4.S7'iDh6RG-@i&&c(?*^%0!Zu;
%>jm'6n4$T>a-f<.\XBbP##l$)`-W>Dgo6-)T$';2<Y!QI:o(?iC^@?Q>.=Z$Et9dMH[[h<?=l=3l?6KeJ[1T`R9T3SE]N6>3,[qs
%YNc`?+>;h<!#\IpMk$ASV#tcTXnhq00$15g=-fbNSsfE>hZ1N>.RGs2[Nk'M46%)AbFHNfE6aK8!\<'B]7BO#<*O/EG\p,7d0`fO
%GcWU7GgB1p]?"rljE!k_@*B9M$#XHKs,Au[#R9/;Yj3T8)o>5aq]TBdcVg`]kpZdNiah:s3R5oe+0h)Qc7/Z+%kW;B#b[U):$Wj7
%OWb6)>[%]F@KGD*;VU=2[i2POObl"e&NWN3cYE&%dCP#6\N4R.!N/(SPJ8Q.&]C>7_s_?=%XbP?j(VpU4Xb'0-9p&AHa'?3>i.LL
%C,pf$_P,_)o]"+ma'XSeGJ=#)PuIOn(d1ATYtO5p<p\*6GG+]s.DFp>Z78iO*-P]\Z#D1tSEe`V-,?fE?IlW8KlPp!<k;5i=o"JD
%MAc`04g?Ddgk$`KOg22Ve[O[uo0oKR%[?*AW4f"O.j'lYSdLih<DRl6<fRnkOM6gmO[5/_WDm'W?H3dtAe?UVg;u^?C`hF^EJV]q
%G>(L1a%H'f-[9CTY(7H+XM09V*ojDC=fG,)][/OqV7HtQYo=5"+iq0T3Lk6&gMEUKeF^o[C0nEV;GqnTdKE6*lbXLJ;-3/mU`t5f
%+*-%N"<V*Xo:5H0^_5t(^PSZ=B>38p_,E*?;HBoIbp!muQ[KKPH5F*YPcObGQrkW$7;A"lF`*Cs__UD"hN@&Cc=3"N"7Ulq7][j(
%/_Ci8,HmqV`q5_`:_8*lr)j.&A4ft7a=Qd\W'L#e8'hC7aE1!-MXST[HDLc$F=^haC'=V.\cR)MO4N@pB_74DIG:\#L=X/.C^nHH
%nZno$"C?)%).+V,8B^Y@*EcMsU?9KkdC,Xo0V%`i\HkLPSA1m3Z)`<q-K]O'&=YNFri0%jkRTH*<Xj_5D@_*@esiPc6'54'Q9J^c
%baOY>)Zu9P$b*2a\,F$BIUjY>Y0qZM>17/.Mik]q;FtibrQMh57J'^sOcg9(,[$S'PbDk9qs\7(foDd>oM#%'1_58##U3pH>S,7C
%_EQlfE-BN!#M@75VN<,&*pIhulnos0Wh&B0j!lWBc6V</RM*#0g3aQE\M-Q2qKtM7:L4<Tk-hDmD!l*-[)>D%BKFU_Rg%$`QM/Y#
%$iJ7d&i@8q)TlRXU[#Ynhf"^e6SV<\S94;P@742gk;ukPR9/ro3KX@V\XYMY/D'2*p@9f/m_-[tmTpJ1W:^6u-''!bG_5sY<q%EV
%9WnY7;=4RW9n[lRg;B"a.h1OG!a585,OEAdFq:lg\Hfc\[PL+BCM0SlojqR='Wk4TF9:D@-j>T<KTR)2P4:'CfhKG,gQAa@p[e@.
%e:Oq2KGLTF!m#I0;?[G0m]Hcfi^5mYG&9g^93ZbVo8N)f59/q_mu35U@5O(^Oi&R2LX2?Zq?!W#dtG]DnpnD->$."jgW#2ImbhFE
%l!C?gH2?R!HPO*Z.Nq*G:g>L$ol>+FARqC&-moFMUH5+TBNBOb;4q.4gKTlk\hZM)0+"6J$$2B[R1(Zfd'$>_Ihrt&3#Kmc364-'
%L0f)&?-_XGk>J4`DDc^;<D^'ld*0odli"!;ntQuB-o'ZXl:K#oEBKQ^%;1"8Lu750.',V9rB8O$+9IXPXp(SeI<u\NN;ZpV/ADP!
%WUJ&EZ$k3B,$gpdU[H"l0$)1$OR[QF;pLU-SMsOd52#_^WuC`g$AB&7X$+q#X:YYEShXOQ)kVff)Re^ZO?@K:3rE"5`9>c'OgBFR
%67d:j==f/N@#m"1eD\/`>\MF)#Kb@?(F&_tdBW&eXcTu?"8C+F"U8?C.idbDn&p)heq3_I9Q&`&@pV#r<_'A2;u=SUjCcGN[d>?B
%4E-Sl&Aqll2Q43C3>02JrDmYY7$W,KE<Y!F&)O%aQ9IZ/*q!k**8NsG=fHg9?*9H"#uJF#]IQD@=gP:%jrjf[jTW'/>cFs[][;=8
%@o:lPMu>lP[`^]caa!qb]DO6(p1QKJRB__Cp/ME^"+df$"Kd1\Ym8+($!L:D;-M["KcsfJ&+uHWJJN[F>:I>/$?b5p0d[e/9LmMZ
%6K&pc[[g=@/_+4/!XPST5_%n."5?>Oq'iI5J(@CNlCB7]f_OqhY8=f*-bn+FF9Q+6JNF5Jjf,p=B\?MqVsHKH-je/PW#442"brW<
%P+<[/o.3eX;mcGZQ^Fmg(NEot$d%%d86"/j5!L%8os2GCaFp'l_5lU"0@`8oae%_<3Zq>G=3m>[8#V#6*>TuN&2l:dBlScT!^>2p
%!]!E>l^]iCg_f4>"(c)pdU,Z!TCCV4*nYRYB0kXgEc@r%IlYTJkju&ABjK/#g!!.ab[_BLl[HJ,U-,i\JAn;:W8<6]9EdiJM><QX
%3Z79H]L5t65MQ&aqI?Gf\`;9))/uHM[ik&[(X,BEOeW.`isQKBbJHq&?BWHI4;QdLkTTW&;>*!.6,;-ZGge]5_]ig(Q2=LD8\Yl_
%;:VbbWq_%n*0CJ7j+IYQ.m:G$+m&Rg79beS3_iC'2761s97B0l/m</Nj1[tYijl8]L\R+BfEMp<1$C#'cU;[E<AUmfRsH;]MBRLr
%e7AVg$G2G&[F:Er2G!KpQrn+&=%;X.Yo/KuhT:rFQ4-Arq6u2Dg6c.P5)2G8PaLgoM8/#j9ZSc/fe\Mcku<A+mD&fS;/bE\SI8V$
%*FK8qZm/2W$3r7XaE`s!iFh[$=_Z5qjA`KQ:V#_]0O$.;=J%0f]sjC^l*I/L+]#"Xr)YKBl]oJpKmdOkk%DNS3.4j<1qBjO>QoIB
%M76VWl/=_+"0JI/Y^lA'o=Lqt20nJ=JbH_XO>SY5?[":"Z+SVdX,$REE1=.jp\1nr?T_aKehXCm\V(r<@I?dDdE_\#V]+h-pQ5]G
%.?s%)ab;53l,[+]D+!+o%r<EJk@Y0?9PD7/:;E4*j`#Q529Etd.'Z&t(]e_mh#GOSFU+'kC.YVm:=5Wu4m*iQ*JR*ElKiJR5(lTM
%QAc]5mY,J=n8@l_YhYZ*+d4b4(D\p6OZ%>3@>];NUCcan'WVG6_c!jFpM)"fZfFiO.HK_Yr5s#gGA?fq2r/>b>W)t[d(&MT,rbFA
%^]fW3'f1CE=DVTR*!_FROZ=g[/\*ae4l[s.a.W9n,>.Vo3gZ,-58I*%MCI&Q$e`@X&q]V&LV*!g/qbLe:A2?9/+kc,ZHm`[%YK'b
%'P1W(9Q?M;g!IgN/ca##?<^Jf'?/;Qpj=+aRO)]fLDqoq6R&Ipk'N'<h_>Jad/mD&ZJDO:l_okK4WX4g@["?UG_Yd4h,cnGE"Mu-
%VsHjY<u4PaPK#d8V'#1KS:M+)!35hHl3]Z>8LEeJF@U1f>Vb/dO@,rZLD>2QpnOJ0#kr'$]=s.QYhLJ\g!Ami\j;]9K]8NWrbL]S
%M*&%MoZo:N-AM):Io[2#&g34GU)E<)V1pI)Nuf?/<%NaTlU=En#OTfMop3/i2@CYNI+b(NPXUkTaM[FF'H"QuP0:hC<3Yju=&@h;
%;[Z5`h>%?3f5aTFBFpJ?Kb0hc@'UK-Q`]=od?GtelhR,Eii]O1Zm*;#LZ[^)+CmaTHNY!U'jlA&ILc8a.KSH!`Ail\-sVjn9gtVu
%kWeO,L7=:U$&d0O8PdLXj@EJZAciP*$)O&i!L8_$@8LM9Md/Ts]M)2,'TX6o*Em"b>^t,A*9ug5#s2S#E$-d`?*[NEk#V\&ZVL&u
%0=[,3dST#T9+pQi>V2AQqd/`n[eGDhEb:WGFc,8(pUeMYSUGk792%>)nrp'He4N78`O552l\/Go&nlK@p_5Q//=u1)JC4P9FR9<1
%lQjF/,["4OF"-nT]TO9ne7N4#>+J2aFuGD&?D67Wo!_H!+$]o/cfXOkC'?_A\A.i1<hQWhZ$$-gCurGRp'E"p?,qX$WEV,Rm^2*:
%@h]b4Y(_f_Q6&"Z0;@l=nZ/gno(cZ<N?TYDmY-)&,!haE6l6]2P>cn(StX-sjEa:2LX>>iZ&Ym+,f#T3(C;S6K^-\GF9DUR5JZ:.
%YRq'i=M1;Gq:'@P;,%ARlRG&-3c#/#'b4E<;\E8B_$`9'i/B*M1<PG>OS8_["eS=boa%!i[4[ZV;/>>4s"=01PpVL+0!dip0%g+/
%+U)4"!?q4i%.5OX`>1/*B;Zb8e@ZA0>F2B%8Yr?#Y1Ga2B`L0d4DG*RA[uECdPuN!Pqj+`F-SXngd0/HGl1?Rd^BIj.nm\"9[c>1
%2h>JdK(l9U-8qn1%)#!<^7O*>>*'Q7_Hj?8`Ig5@ArRQ.p>#Js13blD&$#^''MDO.ME4RS%iLa(?'08WL-32j?rljjD^0UhX2An*
%lCmSWf18fNN1Y'_N3:r<kV<^@HUdF'5&Ms;]6<hU3_Eoa<aK!@-tQ%(911YR9,?2!n(Vc@35IF+N>*Ss"a;_GaYW30X&#096NX([
%OdI'.bW]D*j,'T$:q>fNEh@K[^[n<&R6?]/Irb-A5/%P2b5[Z47Mm$:`N[AT+;:7I(OcXRHt:A+(U#o!$<3\hk+c3.a?l8*L66hB
%G4JR*d(^d<'^[r*9h5&;/m(YWl64c+TWb1%r&B+U%Bg$j$-tCKgl=MIB;G[ui7$SGkAiC:.$k(R_dl/]-LrKO`X5a=4iNPuq,h<J
%+JJ&sYs`Q7'O%>q;h=ZA,76_UQhm]gZ"?K9g?5TJI&P)\VlgjN^QD"2.gg_e6!/b><H]B"#>`"9kK$2lWpa4B+-13f(5rhF#Sr7R
%hiWM*"dB":cSki0=5[7!TC%&5`Cg<\[Ec2i?.Z%p\@r41>NbAB>PtCX('O8W4u`!h[bS#@o4>:*-2@A\WTR21A&R9HI+i8^ZNpRR
%=ojaupOf9\:&oTDgo'=@8MYrcG6"tVR[@_48`B-CkTD-\MMEpEb*I_<B,Acj!m&?k1GtQ>Xh-tf!RV4cjJJX^38u:8SN_/5EF\66
%j+.?Sik^^%@gpqX1u5:bH>>sG+)/SS,FqCmUuQg'UJ;,NqlU[C#$=AY%SM<T9K,9\ZfY=e.E*7FS94^=YTDM)Q97bLHhF,\]47^s
%hm<Gg1$?;lS;FcVA@A%nnB+gPh9NJ*d!k)W;!s[de'2-@e?JKG#a5P@r9$U/G*PN=TImLgb/*((XBnn,ei9*BQ_K5T>jP)hK[$*4
%nm&UeXVliQl(U"$q:P,$ieL.'F^-78:Xs;_3`-M6c^$DJ^pTb5h`_&G0KZG5BYg/NrReqfALs7eQH7sL)VGHXNg#OZK]tpk?OYPH
%QDTPs=Nkum)'@JJ.)=Y1p:43pGA%0=$@6M_$?7Z?SM*^nZ34oRUY)l<D9a[SS>k+k)uZ(@3R$[PTcr@N`RA:QS1"c,;%0@3`_@lr
%lhPkFHHB&Le98)"hG4<]n%.F_QBak>B;`WVgZQaE\K6Pj/56;])0/,<W29DW_e&8p`?f!XcUmdj#rCOD(7CaI-.;o&E)d'D#_s9%
%PfCrkpBgub)HCZM\^(P?I76G,rG+_YZ1%15g37;7K$=o2qQ=tJ^Sth5)Xteh$/"2lHBn^cR5'j3Q%oiH'1j-.5sc9u+pg>2i_@H)
%:u4!QXd9QN7o[TX)H3d1h21+oFsZ^2$)6Dp5dL2lER#hMJ8BB,Y?=OC!7_]/nXcWCjm$?*f0Xja2:RZi#MMGC@$A]1$WS.5%#'":
%8]AFBe.+3*',8=$Q/0AI=VAb*s(ZVKq_+q[q@9XT=qZ'ET,!WXq6KPj-V!i9N/;QAp1K4)Z"`[kI#Ce(PgoR>X*.,d_!NP5l"@/*
%]+ci6C1/hChu6m<YLjV'NTOF>Y/smVYmks-Hb9\frp0Luah1t,'#GX_?R;ZcBFf^7m6-%:q%s?^)leTn:TF\:Q?(a+kS\&)/K'/2
%X+kDgg4%*+)E=<::hdb2_=@n4l8NYZ1@Fo/=2nB$@rShXli8;h!X2(".>nG&"79ch`gkIGj,gYgGd>+j_(p)NVc'>>Uj-cDSm=B4
%o>iNF(f$;Z/'8U)S4e4&AGL%NMJ_.7)j-?1>.7CH\;K1J?:=laCRBN1HdojkHFr)YQ%`eH3D/C2W8)[^lt^=hH=Y"mk+&M/$p3kA
%h4nj]-=NPOOS%'19tMsK`h3kHdaC?r9tb>5g.;]uI].Or(mSSCK^5\k&o?u$.dC$d.a-LU5NLsLR'<M6aCtB@K"tA>\!CK73l8cp
%nh\b$!d/@]#C"_d=Sbt$"\UR[cYWsJAN<\DC8c&):*mUo_!qT^RHM0LE/hk3A;QNXM+kdc4HuB(TT!HBo"^tg(hsH"3aPr2/1KV0
%bW?;BO5F/C[$)%DF8GdYUTL2]F^::Ao`^-=Pq:lh5n.5GG"k1hHbn7jk]n*of!sY]'oWa!@Y*"`+%'OeQSV4?+^"iV]lAM0@J0d'
%,i2PpV#Bl"[WFt7U8L\e4b`ZW(\Vc]S8qMKla"7u@]`V<pHA$DI)4EVp0Q9j*HYj/M4X@>]o8Vp(&+[/hH7nt"iX5i^comF0l23e
%;JI]:r-/=BN7[\erGopm-%b[:)WPU]K[CUCr4<Wk8b1(I"pe'W*%9gb>D7n>bGf@m5K<-E<cQ'=K&9ukKO(ALA$B(P/uR[:GD5*U
%.(i1bDSVjDj4RM,P(TXa,)Tju^[XJ-95)>EPd]^>X04YY%EjGQTC:qb>Tu)jjtK?+JgD--=MSEU0p8`Ffh:T$X1&"V-[;Jk_$1.-
%p_e<#YMRn.8a-s"R[*GTgdu=%@'XEm4n>!Qiq+-.J;%M]r]%,M)@%`]IHIlEfo]SN;j&3C9$Q,I4((`2p*g9o]2@BgLe#kJ[&_`9
%"+_p6M@@pMX0U(k&RsHZ`"[uoJ#Aq"q0p:5/?;.3VGlrB<Cu:lFuSj=ld'Y&5r3nA>g:2DT^YTT[iXu1A:POZEYVZ;0\hj$LDY_1
%8;#>Rdj5,G<>_$1]_c/5Z5A7YX&6VLbMY`E#Vc((V2ZIQ)!sBRHB7BkO^5W.@0lPmC+*o*'o@.W9V\"ao59@49cH<"0Bo>(/#UfF
%J`4D\.ZI$BhMTe/?tDmPRH3S+Fj#.d(E>t2dA4/<3m_2fcg>,a]E1[VD!0MmP@9PidH7HOI?+KT6Dml>oN&3>Z2WsSe9g-)c0"!p
%,91,^d&[EU:QI3oJFjg87?oUU^uh@m""HR)T1,'H=%7VNfG/l<'B>`mp+AR,l#OMg=`dM6[m#S<WW?uR`*($U*]=X#E'9gsiWb8h
%_nCPt3,*)?YYOl6O,F'N3fIMMG"0m\D]@\?@h`?4H?aVH@'A_,?DQHk;s\8eMm@tmQcr;Z=Iatl2^D5>.)]G8AD3c"(h<%EfL\'V
%GJcAnUG#KpU0Ne`KP1n5.SG^K+S&RZoe-'js,j;2Z\YI:YIMeDZiRr56AKQfG@Z[10IB9)iW;\0^e*!FA6c@;92HG3_/-bH4-$tL
%jJu,*4Q<5O6+`]d3kr!$.mh'2-EM]Noj]s1,?7OecW3)RZ1%3GO@7#0<mstq-nr!kj!@,f65PIH:i;iu37:M<"i<":kpqsY(mhZI
%9bA-qhf[l)K,s-7$&\J:k0c,n`E7$<\5PNN(e%/r;g$.P'gan8-Yq>2c&;q=^oI[Qp5k7e4j6"@#Wp7r)gJPKb6st/g!Oa$AZ_X:
%`#/k"gs77A`&00Dnr$@?"GT]Bd%B:^44h]iIEjuIbHQ`Sh-(W%rpKuKB-3*R=3-N=jnK[iU0c0Hb'HGEWj17$Pf=oBLMkqhZ7Xkl
%GMF=A+79g*M:P3]?E7($"[)dM(<SdHDs!'``N\X#drVf-456l&IiJ.+7).\hFW7jk;r5D:<1'1+MR5=8K9LnXd?Wu9jfnsW6?$](
%mX3PfX(A[9k'?r1>fk!S.[VCEaqH5Bi*H0Wmb0YXd%[]`(rqQ#R,QUt%!8e"_&nHE0h6=[NHpV%(`!E/]q<Ynj7Top)Jc(O'[NWR
%@#TWHLLo0il)-?jK7ELT`=4M+83gL"pf(p%%b,L:@N((R$KV/B]C$::pnkk%lF=)EcI230Ikr]%;Alq"XuA4O1I->Z.2M.%=%QhS
%&]*IH+;9[m9,eFQ^4O]6bp'i@hf5tF3TPVZaV5_(NXD#jW>0WCn9UBTNuLB`f^2pkp)*1&G:@+,drP=Oh6ge<.ck'+5<2Z-&6\V$
%OX3_3L76Fg!Y;S,K5.s+5l.6r]-b-l8_j]sr0%7(ibD39Sf4Y4)hV3S'u@0QL_gWamS_b+&Sg%WR%*%/`SU*,:%uQ;8.3MXJeqet
%!sE)JBj.YbA^"LG20U@>^JZg"R58C'p#^J`=+c7<B:h-%B4Jcn)&Ds7G1Dmn86b[D0#a*qb;oH*h"^<Q^=1c/s%Z$nJ0R4h0N^.u
%F9%;E'mY/&+U.r!Vm;[j>R+*C//g@+ZG6OVJ(chY/+qB$8mT4Y6626TH1M2`(p4&KaLC^g9E!6b'c_tk@_O!Is#eCuM7=J"pJs<@
%URiPPD9Ra[p+qp$l_Wa>a;UBCIMfA_ZEKZ&g-OQM\AnIm]14(k`S=3WSpnKGB`r['3/7'>KHkn_i:DQ+>-mX0`DqtJ]ck,+b>:S7
%#uiH46"(([;3$'M8:+GQl4lqG1p5FpLI?_ODNLYeQ=8uEp]dc*hK1^sbbU<lZJDY1/>ZWV-C!qBc^e.*q$hf3^u]4;)>iPF06/O0
%7&LbmD[1=;hkXBe4nM["Jelcr=N6kTD5F30Sp3D:QqkoJ?esW<p>eW`^0mA6m-4^Eb`@K.d+kOJp5GQK$g!@,d;*:hG<g(Y6T671
%]#fA,hYDPm>R&qbHI0Cp"aOO:bcX(B&sJjN%PWj-[H$rRWB<9',`OGqb`;0A57*!5Y*Lt/^84W(QRVOSARol9oar*582^rr!a+3A
%7ggrFj`reC<hB:J,$&5lmlm0,Ob9.R4O.6#EIE7h5+KdD7_3RA%Uhm;hm4Q&$[fn_<oq3J)=tpu+$C$4$-B1R:*%lJf2378Y7pS>
%%I.t*[4E(?%QTgQchrM7K$-<Rn?1qA(5BH,l.htAC[jh$L[p<#c,hBJ"7s>&I>[FK4cE[5$S'+aTg>ne#DhmcEp$^1;gPI&Hd@$2
%Wl%N"ZgJ5VY0-3t74]$b]LoV-\"]@NmAZLWott7nKmQKhT00SIoU)Ea`<.eQ?Y#o-UKA4]oK\5GS6K'.'<K!lodf\#"Q?R?2L)Ut
%'h?DGhM-J'7F+gql`#0E*:`3K:=nt$UWah:ckT>bW(YCU,?(XCI=0XAmVfh"d*+3:;\/#FN$$JDkq"K5@U+6I"Q"9r#$.l2VP'mH
%hH)7:(r_>VQQCd#&"Fi@]/b$brP6NiEnNco-2]ckh/57p\)'4&Ti\I)]q6iHq4&l5;OMM+Sgkh72IWr]Pu0WMC6('KMgdd=*BdFe
%?q]/o=@!A8gJ!.S<7bOK'OhoM;L5gD>.]Vk+m<uC"'6d"VI/#HPYi)T1M^L)'Co3E'>f"W9^=_,'84pDne?&YIS;XsK8_k:Q@F*Z
%eH'`gr2dg\:E"8ZZeo*iNtj$[578?Z+oRRc;MjNT[2H!C_I69tkfpCW3gE:>=cK*!%,(b6[Pi-=]t_VX\hM)LJ-l(Z3#BR@U&[tL
%--eiS2Bc3mq$C>upa[#aZt5%J*"dK=P*Wg9WgSY:55PacY"\8r#X<@GUUT.*r0CmX<*aB`kMJSRm1@?uD_Y,hs3\U8eIB,aWNplt
%q<!G^0/'@+>m3POn)P$LWsul)ShQNB,uYi0P2%$o`%f4dC%]F(*I&^6(@4D']eXtZF]f-,"[iu1jW9`]_!`6j'dO9.(lMf;k)GIe
%9"2p6!M#::HHK@m[>1A/8H%;a,A[%Eba<:Rco#Q/K0!/75!&M,?:+\nS%Z[HPm7WJT8(-Y0)h=j,LcLVW4H<ljGMQEXO_cN`p54k
%O`75d'Fa7\N9kgsm:ij#C$cp37h"_\,*'.C9=]/:0TY^NLH[FPMbb^),,IaPV6>7c`#Z\1M<^@@XN6TQJ]?R<O0$B-!0c1c!=K?E
%:>,FU!T,,1Qhd=6U4E(J<%>d%0Cl8D-^Ha?pC;(bW0CJB%q'0?5rP)pR3:"#\<,rM]X@$<iU?5q/]mOROjO]J6,J;\V63)0rMY-G
%GBor=ZdhuI2!PP:StAT]\#e#ZYcF0Jp4C7tB,Z#mhak3L+\`A*99@M+o!ZtujL?H%@F#=.ltl"VUqK+_\LdQ]<qJI+]E]2oMWqLK
%cECpUd,VLl#k?HChWfP/Ef(4P&KPTA9@.:Do[j;FpH$MH'lUt>;E0asOau[107"[PUlg[pZ^JD8^FaG?'4@&<?d$`'OqQIn#DDb3
%;K\>,58h13_]`Q9QY!'2EeFTibOtQqp?[%6cP1.K=K*=;or\.g.7TK5@3t&VG"<&r3Q`T,,JkTq.Ql6qGu.W`W<9f*dOF\_kf%pe
%_kc9!P_5$@R8T#idduiW[5:UH;LU;8C?U^`L'[M;fUVC5qXSj`(#=3S7ln!4aL0+gFM5l/Q<$_heMutiQ55CUdH3PA4[ZE/9/]6g
%MZ$:CC8fi#>k;T01a*a)AE@,VMih-q%gCSo=3U]JXKuWkh8mn*gu/4jM'mjl<)T\f)CC4L":WBp)$b5(klc%<K=d>/Iikfcm!@!c
%cbS1G>LKRuWnMea+.AN>f`ZLVSV0(+!M_Sja6;>31:jM[c9e?Gl+uCPgVB(&O`OaEoD6/NG9foR#%$V]cHmm\!cOBZ<cR(Mm,5#&
%>)="!N`#ZoD,fSpD73U1=]pR,&F,P!C$S]RZ(V;o_>lul6Q`UQP`RDWL<XPsC,62EN5r/8qGAG)qG>W5l:\sDG-@0pb"o]_]=\!]
%*Zi!e>NQ`e8]o$>Q"'NK9!V/C?l>;`I:ilF>&Gjn+Cj&Qm?M-OC>;^j,namMlFgCO)n)b^a51'(2a@#b`VQ0+qo1*m\h6^N*St85
%?KI'3-_*Vr,))]E642X;=e[W!-SiR1q@F>PBO[j3YQ?7/\MArtI;9iV;jF=;XojIdNB4dkFl]28>u_aYcFn[E8Sml2EZ`t1r1ioS
%iIZ>N54&R[hSSQn3QHHT>pl$Qo]"*<KI.n;@V?C9qLi`jDpb_l:ZgrsDZUB*AeCo_o2,LtNZ@pG&XcZ0IW!0t8&Q=E8MCrK`0-VC
%;WS%6SiZIMMBY][#:CYC\uoqmRIT"_UX3Fc-N(dAmiMLbB*D)])Dj+Qff"-G][um^nFt`t8jS^XLt&T2[aOe2FG_(a`YrMs=2Zo\
%-*<iWLPO;)#VI]RA8>5ZoE=sU3($G7<4A=iI7o8Z)E$4t,H#hmU\,C>(',nf\,!>ZoGK:E[lF*nOUljkB)GjiI9=+Ls#C@[++)i$
%g^3ZK[up7?C;tMn<'5K\mOISMThL;XM\;;&,edt1)K/K7EmV7D8BFEe*sgVs#,MbdddA=r>&Z'q!Z]BAm2siV$]p2?NDEG,4\?>T
%eGjfP)HRhW>>&m'H*L\DCAm'I#;Z1Om`:_\N7GC']&?&a?*GHPO<P:.`NeJChQl1cN[;rl&#OUk--*XIY:)`HDo=SS5CilHY-UO%
%//&Xn5M?CA>V_jeBjL,F0kE.L='TiB'dp6Z6f^6fKD#>8F<fs92W?WA+P0R4h/@OFEk=:pDX7&>#Ep,V@];K-,7BW]@_6)[/lh%[
%J9s%q>PSs:''YgG@t7uu-DIM.mANth_%B,34T\SXppY9m8*'dKL_Ae';IsU>C.uh$M#0>nWo4WHfCELrW)``*jOU"0]qS>Wc_N,g
%/j`(iG-GSZahh/WpEO/fOarCD6)g4%"6e!l9(bM)T<JP?(\cR$3,-6?G7@%Pl.Ur%E0M@0?F`%:ZHIeBiKiP[:M;COO%:8ZRcf.A
%cag4:4A0!sU%GGAq^.9MIV-iG^0\/Egae@&?,\]2UZbM,\r)6sLf3bL/.$o+."p&7+!qW]%!@Y<Js-sf`qbVXk#TZLM?eKM@$UR3
%ON3AAgKFBb[T)NSPOFX1?i#<.&bVgg)$+;p,5/(Y7ZZY5EhlMM=l(qIW(1BhcU_aZ@J"0FjnepVg8UApcXTO"T(,CY)8;HcBC71:
%et?@8emsR>e&K>p'*QX7:p21,Z.t(ehHfaG0kJIR7:]_92!YpolLkMR\`OQa2qNMRqLIXcObY6,i(S^Y.?=`EfNU/\#keVa3VOp/
%G6On*+qbP\`ZTZ[<qXPTr3dk4D$#bTSJ<feK*3,4oTI))<06?X$`U1RWof.TBSrtF#uS'R>rl1@)pntWU?Ob5H-96``RmE+7n^_h
%ON(DV_#@[caqON<1_b<i[-*4_Y=0)<I%C'#4P:d*eQ+=0Dt?Z]"_$(N;=lD9#9MpJ>Y??ij)rPp:ZM/K6%h_-@j7SHP'ki\P[87Y
%fOn?5$C"]A<uU\$<W-q.THeEHamKnM:j)?o/!3uoYBQNcfM0>G1b^'0iIe$<0pW\83MjO?HEnd[e?,+,2t/d_f'H*OjYMfrnS,A;
%]e_L"c_N#4*$S-0nlT-4"`8CpeY1QNYQX0aC3UGom*_/s=&m$MffPtU[b]\AW_/5O/A7:!"^`X$igU.TViE_Gh'IuJ$@7uC'^uc^
%[HI;/Q\L$UO_qPl+7`C7Pj58_j_`X$9Pho'l,]c=P!2LR[;R@`:30ZKXhJ1h1ndYAoR:QtL%3kmPbJNqZVbB>ULjnQrmWrOrkDg;
%cb'a=+1%%m=rr?LJpi&Zp`XFM;JXn:?ZLkH''jRENJRMCB*"i5,JOK;dCM;`,:hm=nPB7Cb5`@B1guut,*8u>%Dk_+gThJRbHd>r
%0^8;AOOFnbB+?16S3,g8ipZ870i9U5]2_%@7SD=X5%S&?Z%Slg!R=krGgS.TcUCu5?'Y*[\H#!39pPk6=_S_6<?i/`X^G]D,*9R1
%<GgI5M:qj1_H!mDV6Q*R]=M4L6'Op;:b7\=S_aF;&.D[lW>M?.9aXj7E7;R5"q`8%<0")[[HD(O!E->n&*9eK$+YL!9Y-j3^PiP;
%W;u3:^iF;F?_Ejk0,+r:B3&[0J9ib2%o34BY>obZXNiSoiYP7EeW;)],I^1@!'oV8\][n<)5un)_:dkTB.uc7gUgn08VgrB\ricW
%mik5&Wh?1re_K^6"8qG5Ve'p,Q=<(VYcpqB=,<I'f3f+^Prd9sQhM%t'D?jb^t%Yc\0=9Yfonl.ZNq,TU:I,ASE1JK^,aa:`p@7O
%L6$sd%A're/#IB#YEE56B+U8TD10TdK#WKTs#?e-b\Cq"0R'Bh;#:F(a4R<?!\5ncF%]gJ.@cTR<l^AHp'P#_&G\V'kdb;>akZ`[
%O*u$jH./d(_jZ7YG];,9nHIb_/?obJ.Ac+"7OYhmp/%"V!Zs^=MuqXG$kd]Gn;?6BFr7K/%t.S4'ZaSYXu=1R#NQ880MB`PaD</K
%oBZ"l78Q<KrXe)[!9O/cFf"Ss;.bN`J!\_$HtI@%7'7aiGPtdclb</XXJrDQJ5qG+.T9=i,U*q&`%;U!0C)tsUZ>@S(45>'4q`u6
%m?(kOejF#N+$A9meN@K-;j.>tXn)g]n+.:Vas.:N*XO>/WbCjt6)lB&_(-^k;j)Aib,DG-\uUsi6qC,tq-Ll"T9_1q'l@aJ&DIhM
%!)EZJ71Dd6K>AEH2'QmkZg>jdbd*S<?7`+:e4r[+;5)p7SuETd)UbjArP<hM$eh]Bo4?P@W:jX9U],W]gl9"De'OBA14qZoHm@W^
%OtqbT9?trehdWo0_QMAE=R6MBkG[K,b=*YXAmg'`?6fjH:%Npp?-1StM>4RC\_cAC`/QGO/<ff2op+Kae>Jd,Hl#>]8:6Ap--_@\
%kUG$@1^[W4Mp,Z+id,u\h"51-,bJ:s)7?5.8>R(9%\e%k-[dTsgo"*Lp_9?AN(oCY^%rGNN&<"]>D/#X0-r!WcrPX5&R@%5AV957
%>X;R40hFDu7Fk#aCR`p%SEZ8_HqgKbNbl+5:CE$dFlj[nMl[rRQ@i<r8(Ha(HeAGsm0.qfo;QLCPoM7E]dLWWF@<_%!@:*uqf!@5
%a4cs.4p['`Bu"(E`rSQ'hZq'-Wt<RFg!r+fZ_-*22>+3KN?M!KjnXP3lMsL&T.ekXFqhGtOutP[*-X9*LTmlO/F"\7p#BU.;f2D8
%(`0T"A7?V^b,C@TfHl%FmB'O#X;$/+k+K-RSmXB[p(CUU,$WS'-^i].(*eo^BtS5sY\1:Tb0+D&<Vqph2ki(57B5GQZ=e`$0OCgW
%LSopHBMZ%^S>pADg<lq0kC9,cr,K^s"@]!0=1H8LC33qa@CG`uLM+Gm?oa7T&e._\?rg:J&"TNYm'#u\&4V8\j]C/ZhOcToCTEJ*
%:S]Z0.a#H;Q2G#Wre@mU[lR5TZo?A:reuno1IkG)>bH1s\pI%!)5:9oqkig^Q]H..g@7dXaeS7&&a=ql%uR1YHu&"Y_3Id-9]U*B
%pI1E71%3QlNQLF@[dn%FUrk`uij\"fZBqXN5jWhc3BY.h#k2"TTS0Amb6\ktFUn+C+p#g8PT6n$=ZL_o8Y4:/ZHt6*lW-\tKKu%\
%>N'[hf\^fjq<c_7iH-^Bg`mrB2'^<N\%&`g&Epuc[;h1(p'qcn)Y87aMOQ@T,7T?cVDFOC4!V*>YaXFmq6G0`pcm;/)Bl`I^<[MC
%;g\ChVB9m5=E_5=N1(;q!7`Pt>r<J"B;j\AksZUc*IMH2oG.F[fG1gEoMrQ5176F6pBO-"YG:a)7a`c+'5*57lK$LRZnuL_[eu[9
%HYES#ZB/Bj_L`>%WJ8^\4Omms)>k2(;Ag6LhK9XmU7=s'(Q]H1]P?a2FK+[,qUX.JlXTI=HS"C;K.=9*Y">"DS\5#dE3?;k",^(M
%9ntEm3OndhPl2krpH)h\,.JJN_oB&-k,`Q.m6t8V#Fo0Qc8CEJR9UrOAO4NXiHtrT)\h&,>O2upP%JtUs-+1Y^N#O_E1LX.96Jc!
%0?&Ob'/O:#'3(l=P]h_Eq\D`%etLZ4[mJ\]c!^WR6uhji@`3FkNm8Zi;?F4d-nU+M%SOdMV&TQ"JB=Bpi<h#+?Y>8%H,S(N!52UH
%m<<s*PPWS!5hD$5Q(:_8>h&D.W9)O:Gkq:$l]oi]NSG)l*GP"iK%V.Nb-7G?\9LrQ&$JN5p7990)@9Ird6a'!G\25@O/Lm7ek1\U
%&;q<P@UDre=j:+U!'4&a#i&$UTdnVF]T'DI">kcmK_b;F$*Jo.He]por94:7\+#PX.5(.;K$dSr$-Cm!<#B%a&(Nr=P'F7pKC[%u
%!A>3aHuT]CWl:_G$u/K$ObA\DZbYi%boW\sZY,K1Ykgu0gtBhtX3SSbT"F7saq^9KEO(`O5@%2nX(9?,'"p`VpV`emJc)OLJJRor
%CA*c#em41<bq.tT]'$%m;[V1JW.l=DA!&(HqS5ZXHOX1L8XJ*]&\cI-"DL_.^^BM-dp-P#LFZeV2s]fl1@%&jZWKK+*/Y_rjeZfu
%bQI!*1a?A'E(ePn+EGd`5IcI;mo#\+g1Xp'fh<D5e9DsSdB$6_XV[["arWd#Um$J[0B!1QOBM8Q;Q/CNd!=q..IgEs+jsPR4^RaI
%_;r5-lg%T".BNOB[X:4'n@.lO*51NS0q)'nZB&IS0TZ9UO.u/#,IPs_nKWE3`fL9PRh[U=Nk8ar-1_O:]4]JtddBb$if4a6J#<:H
%C3^+#s8"iBc9HGY1_,qNht-R.o*C1MeJ\2,2MFu!_op`,`q-tNFtA2rX!"dFWoeSRM<Qg.R*hK`:ldC1/ARq:J2;Kap'r,3C]U8X
%XD5do:NVSp9NbF$5msQMW!q98$:P.#J9T=)Q2A=`?:=2_Pn:<_750C!<k=N_4T%&LBkntX[K;re0/Do#2Z:"0386rU1^_o_ZnJR.
%O$o"IgbD`ePW(+8ERkuM?@)tS"6ipi<#60HCAM71h<>ZF=j(dpXqa1YRu_onI>l]HC-pd`?E-d.1pui3]B%9RkX#RG)@Gqa/+M$O
%GUK6Z9G\>hJ[C&UT`L"Kja8cR0>1"VYc3Ao>oMd'D=*n1op"m=(]reo-Mb"/*lrb754gX`WY[^C:,O99Vb::d&G0^!]j'8*h\/uR
%P+_e`&RD/(NRZ.:Z/-Z?J]4-gGbV9+%)WT)Ro1JM]#XpS5aCUjqeI4FL`(N0q)Kc$&C6W)>f?smGIspIqpGi<3g59Tlp@_-32mCG
%0*.<k>lg;Z6emF^PD8NOEgLk``#fdR;8i>(D-=co&N$_n+]c_R#sJ`p0G]nEFARD"c7kTl4(,iK6^JsA/d3H_5K-;&V3M<'89mh=
%O"[@pOo=!@@S%3&,^-R28Yp2<q(!]0Vc-lfctdXES.BtQ-FBfb?[H(/E,FQ17gWFsd4T&$V.\:g^21p?<(9ar"UnmcVe8We7-r"E
%IY!;m<=&(b@gbpXjK_RZ=f6aMEp3Jc.5=BUl6H'\-(o?oQ@dTNQ%B%6`5&g2i6J0Qh;QfG[-<Tl%r3K"+p`>^D+dO_>BNg#$Ub@2
%fJf;<\/umQUaoi&d"@sA`qkU+HCAl8eLJHArY>c_Y.UKl1[._/X[p'K\N,"kE9t3_,<%%9SY'fE.]/PF&j8(@rpL-t&C[?oWFHg-
%`C!lS/R9K]eW23dLoqX@T\V=(m>]I2!HL@e&?fQhSG+e1>&449At)W84kZ0\B]tu;^28ZV20cckmD1;l='6Go3_`h<RfgS6!,J5q
%@.K?VUIq^Nb>rTM'K*P;Q6l@iqm*5(HRVRl[cCc0-YR4#-H!4ps!:&$=Cqt].hlRAo('G)a6]]0Bpi5oiUQ-=Xdrk<6ji;U-0=jc
%OW?047UjD3_GR(8jg7"Jqc;W`N#'CanVo9n&igcd>^e)`BFTMU@RdKW$YBSI`*)$CY4`4("WNhUop74$0;tr6*lYXFX^W$>dQALr
%_2rui*<Lt1^SjYY%k9hMn7Emh/j>)nGUUV[f5;hcs#\RF,BF55-ZC%P>ZYQ+?C$pJ!?s][VcSLVd_M,=Z:]o$g93/=`ZFre;,pF7
%@&jt@oaA*4Ua'IbC+5)M[5"o@UBi-(f8'toO;7jqQ8'm%O6h^fg)/;O#SlZj^>s]F="A&3:oNa!hh(OMTT<Z;R`])1Ko>R8/A*U/
%O_6_i!Sh"\UiWOhZtm&H?j:HO\4sZ.T"kE8mGG9"6oYHYCp$=;Jkpd*3?L->E7fL$.D7B^CIn[YfHDrW0%<;)Ws$09;SoFaYd=pg
%,X&FpJs2kuXH!\a'/te"F=UnN?:LiJ_f"iii.46%YV^sa/jCaFlUuCp_Z@<-4J]T6XM)Pq5@7i)\I&.hCl!P9>^8Q_kRg9$XOJ-$
%:M$/K2Y=s14A44T'Bs'cF!rk."mCWA%G+dqnie;=NjqV5$!r3L[DG=t8]+HTTpg,'rbn_J/%>nnq^PfXW^W5)nDU1kc%uXci%=7Z
%I(mD-E2k_,F2E8ok,2'gC5:MhbUfN6`ZdCf,B*`rU.!r36N!Ke-PfKn*PUf9h2YuP$jX;,5uk;ujM(l8+_!qMR]IfkN17Mm4n&b%
%emP:YhM%Rh]._*pntm_-<ImL["a;0Ee#SKa$L"Ck8?cA,.<12&N^Ya#N;.L1El\1A?_2cHqtoh#0S`ju`b/[GN=KXO40]k''E2,s
%U"e#[1Qo+3nDAFq,pgCmSD4ZSR,8]Hr.ZWj9Nk7!mcUcPRt\Ph#^C/.WcBbj]DHK"Tkn`!]<-oGYE.RB(\<BrEVfrqKlL%I^\sC;
%=76rbm`\r,KtXWu>b.kJh^j6<'pWnhJ]J:l@\KEdC>2dN(,.#[kA*>mE"=c,=c_c9*]4scEOR^FJpn!"jb]K8[N-@,':H+0=&UWd
%FD]L1LQQ>tqW`p]i2ZLdFIk-uO!q+>_!T3lk)u69+eJMF9"q8n(%$k%e.AUEm;'J"R;`bDEE\SmV9J>kPrt0j+p$T&0A:#0;oi>l
%9:na*FA3prT#_u#D$A.DX*/<A2s.5R/pJR1M7p9(T8Y0S8;,DkG3mb$DLmcc$&4;,_BYV0b5V;'E>Xn?.V[pdWs/?:WBiY/=cC-3
%"7>G7(@XHnr"HWmi\[;('=jk'aYmeQE)4'L'`slciS`9@!@iP%4kh>^&l!oOYAhUUi*'!BO<8KZ`F7NM#W![(l=e"sB#c\2>]aiX
%pCeDjpj5D.cU`llrP_<UK!SVcB8G;<jJpnI$>N@Il%#=UR_'f>FRZ!?;nAAKEfc3,5"6e\\,0aIB2DaM<_0>\R/^@34s]^C9Y.:V
%GM$[8-Y#DNcA6L:9g-D\V+E"-I$hYIS37UY6'Lj;"HN,hBF3$gI3KuZGR4tan)@UM.GT^hDERS:?"iIC&&-7Bdl:kZlmXVQ_)&A<
%Q\c_aK4>Nt2g=,\kLb"J.Dh-t3.-<&&/th(/a%8RB\)2>o*"bXNO5*G:EIHG>1?k6$1=-/IuC+ia3M.T?4(`X'm2a`Y!.uhXXYlo
%^gV(4$\Pio&;ML*YP0MSMGXml;al<lHFuq4T&<U<kUkM6DC30S`J0!U5\J*[Z\2h/CO3_MZ^_/HLo,7VN97V<UBgjq.nYT=blZVd
%8J:>%=Z"G]fQ5qAKBUXiqg:PTlQWYd%m1*;cE#!`b;W)h5GZHm\i&\6I@&*<&`n6_Q21ZVA`bJ4m@LNU<".koAA0$*=KiLZ;%_\A
%)Pl,:^4,V)T2S1f`N_nG[HHCC:!,/;QH8LmZ)IERaGaBXj^+\@,2etd#E^g]@aF:]@nm4`$K7WqICiW"gV`[P>2n<ZEiXX'dd"B/
%iFi@k!9?T'C1ZFf`.GI8]R!lVp$@P3iVmB[=JNp\EpX0=RCsPnQL7Y)7NO'Zp2ubGa]niiZgYu.!"sE6oA$>EHHPMK2dh8L;X*YM
%(=?;Gh)bsSkbNmE3Piq&fd>dKdsZcW:n_eS1L:]4'17W?B+DOZeV7aZrf6Y8,3I-J\1'`/(jQjV]W!CDFgI0>APYka^$OK?M.h"%
%GZ9ENbVb.RMjJ&,14Y2Q^pi%J%UPnD[/!as']JjJ='baj/0&DGI=B]H$4)^GZg"UN"1k7]gm2bR*X*#=V?P1L0A.a6_U])D>S!d<
%iL,hIn^sY&OD5umGE93h;$Y^34&hn6SFqbPX"AC#UGoVe29.D>pe48]5rSV*R+cm::-3j:F;WY$lae`b*i82D!H"8e5Da>mMZf5^
%Q'%SjCHnuRbVmg9+=[pGe+k]I"5Pm]if.Stm;(7-5dMi<><jNaA9OCR$f+9W!&Y_No4+nbH%pHN%DGj%i,pklFm*cFesO@q*3[KA
%>d12prO`7teIa+o2nUVgX]bCCf0I\D)Y-kuesrqX=]RP.0P?8I3Ba>.9hhO\6<e'A%og)(iMYN(&Dt0L/N)ml:nUab*][!+H[#X2
%[8=3Tf!a1Fq^Bp82nV:P*CCedp,%9NlL4eRgaEb17hJC2%_O[#**$/W.sT[bd^LDZ;0Us\j.h,0&4GPm-RESD=n[Db?7?'$)MT%H
%S9\H)-S]@d.(L<W+lb@#!WtL7b$l#jorND`@,7HrSi,@U/d.ho9\nG6hsfg#?k;%.QGg7fEq'><r-$&m<Qg%`F+f99p(_c"Olj]d
%fch+)LuRRq67:%0P9e&Y8[DRX,-?9/O!*fc\J`VX>SUQ7(3P-\fuZ74Z;?]`dJS3/rqe;i+NdDYBHZD12KM>!L:!1ekU>hm)nuBq
%<abC!=hf#[.g6ME:,`cX7\T)bn496?WBWaXn9;;`PP0#E]4\)hZ$`;Yn1!o,o"dIC%J-RH\u*4A?9s!oJ^?J=&^eSn0!^78?KTs)
%J=Q;\RA\i*R6QfYX[?,=VkX`-7>br+[F(-ZQLEXPYN**t'1[cGgaY[6R<;Lm0sBo2\u1er7j`b</3'grM8BqZ!lr:Eq6#ho=!O^J
%\Fr2o1J]@4`W^?(os.b)!`sL4+,RS_3+/Y-7qr?Ccd>lJ_++?M:K%^B>aG&DZnbUbpBis*;sZMLa9*:nQH76g-0((8H)-]&b&92k
%RSg8/r3Zf]m+C8F8!-L@R.:'Rj^bs,\5\2W7RDq]IR#*)qTQ)9ROnh0l[IXap:V(n(Kku$3b9T"HL;)tMdp<X]gU(IK5?"[qNX4-
%XF_(f36CD5<a6jO`EG:uTgJLEZSE8n;\<8]jWM:9@PLrdiTsE](tIe+Gu8j''YO#.U\H6>?$)NWHr?BL[`V$r8C=h$h#TRNBM@Y,
%(cCC;L![N)/E?Z$8eQ50_fnn/o4olHESUjCl:qnI,"fi)KqUF+FAhJD"dD#phW;_LfBtGk5"@(Oc42059[%SN(\7quqtQ"3\*_o7
%52o6c>P$R7F6?j*X^CXOZ"9)qnD)iVYY3Zbl>lneg,q\bJ7gn`PKl3=-XC^/^6Z;pU'de\(Pp$RGo`eH7V^Ng!6SSRZo]DfM(IF?
%itT*-I[qn&J^.oKCW;8&RFc;%E+9$'Z(IX4I[`[@->YY]^q.3,'k'>?O:`5b4%HL*>_gnL6R%\m?ndrp]piPV/P^e]egH^--LM`B
%WK$j[qYsh5a2",j00WbH%1giYT7,98jEH[pRlC\H>mV3j[+&aN>$%qrSq^1OmfH3*cgPiA4&jcon,-G@4ubTL)bue%b[OI!\@oR(
%d6OCI8Fe$icEZ7_j6iM6TQFLUn9gEL]&5Z9`6h1'VI5_*0s6=jQ0$1lafLlH^j47/ZX-4\VS1lh*"&<T`e%g35RaM&P[_YS4-C*!
%;#ioogrIYY75d\6JB]@VnAnV4lLn&oaGtV)\d%Eh9u^!O'W),]'hkXea,$'m7qL<NL0RZ$_o-J&6_j0.0+j;&al)1E.r)aMD\RO7
%%nK^?3Ke6&bq$odVE0j6cOV$Dh=&Ph;@?#6a\rdDT]%0_Lg>=CmFKcn9jO6p0La#=;%4N59Fj_[=oE>-cfAbFCRS4&o5&;=#@0sn
%[ZjG>&:-F!&kgZAX9WZ&?f2:<)`6]S5e"8H\X]4dKNm-JD64k3as3S&,o?-'U&cF8:YiWqPa]ag9TAe2b%!Y^RM%;>3Df$gk,Bb7
%'7&0"r#PZ7L:o0RAd%L5FS0Tt45Gl.QLcA5Qun=Al2j:#2@Z.0![=H4q;/"!_\RS_.7(9TB"GSqYHbDKr_3eO29%'Yi<lMFUF?k2
%SK\9o&uV2F[dSeOhFuY0ob%>=bK5Kp)&?UHM%?++k_D]9>Y.`S?N,8DZUMN%<DZ/(9k$]FZfm+fB#l3$O/b[k.nj6i>/3qVHe+R[
%^>\$ko=8iL-Y!:\h'pRorkeY73Q*lDN5h%?(dNiN!i'$&6kHriKJfYU$,k=/%0bl&V=auFo!1$S7)K"Z-^BG.kUsr.dQjDB[BGS`
%1pELWP`W_8!dV)nMNYfn6f5</>tuhi"NiIf-0\.KK(V.Y8@IFt/Gdf%82d2.@MZiI.WYZkJ-G-![T;Dh%R:W$$)S&UQ%IA:$r[s)
%<f-r[/)CrdG'f(in4-I.<-i!7H@bS<>Ma6dk<:J+ZF]krn%Shia1qS.o3_OeVgnU.kPtGUbO9oS"Fg9HTE"]ZT7?\45Q:9?0Ah9R
%a1qQM5@8p8q+lM:o3["Hldu/_rmq[1r8m6Orqbeb^AdVgJ,f-?&n.]i%R9sfLO]7!n%\aLHER#o~>
%AI9_PrivateDataEnd
